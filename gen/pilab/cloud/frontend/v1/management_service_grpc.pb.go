// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/frontend/v1/management_service.proto

package frontendv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManagementService_CreateUser_FullMethodName              = "/pilab.cloud.director.v1.ManagementService/CreateUser"
	ManagementService_GetUser_FullMethodName                 = "/pilab.cloud.director.v1.ManagementService/GetUser"
	ManagementService_GetUserByUsername_FullMethodName       = "/pilab.cloud.director.v1.ManagementService/GetUserByUsername"
	ManagementService_GetUserByEmail_FullMethodName          = "/pilab.cloud.director.v1.ManagementService/GetUserByEmail"
	ManagementService_UpdateUser_FullMethodName              = "/pilab.cloud.director.v1.ManagementService/UpdateUser"
	ManagementService_DeleteUser_FullMethodName              = "/pilab.cloud.director.v1.ManagementService/DeleteUser"
	ManagementService_SearchUsers_FullMethodName             = "/pilab.cloud.director.v1.ManagementService/SearchUsers"
	ManagementService_ChangeUserPassword_FullMethodName      = "/pilab.cloud.director.v1.ManagementService/ChangeUserPassword"
	ManagementService_CreateRole_FullMethodName              = "/pilab.cloud.director.v1.ManagementService/CreateRole"
	ManagementService_GetRole_FullMethodName                 = "/pilab.cloud.director.v1.ManagementService/GetRole"
	ManagementService_GetRoleByName_FullMethodName           = "/pilab.cloud.director.v1.ManagementService/GetRoleByName"
	ManagementService_UpdateRole_FullMethodName              = "/pilab.cloud.director.v1.ManagementService/UpdateRole"
	ManagementService_DeleteRole_FullMethodName              = "/pilab.cloud.director.v1.ManagementService/DeleteRole"
	ManagementService_SearchRoles_FullMethodName             = "/pilab.cloud.director.v1.ManagementService/SearchRoles"
	ManagementService_AddRoleInheritance_FullMethodName      = "/pilab.cloud.director.v1.ManagementService/AddRoleInheritance"
	ManagementService_RemoveRoleInheritance_FullMethodName   = "/pilab.cloud.director.v1.ManagementService/RemoveRoleInheritance"
	ManagementService_GetParentRoles_FullMethodName          = "/pilab.cloud.director.v1.ManagementService/GetParentRoles"
	ManagementService_GetChildRoles_FullMethodName           = "/pilab.cloud.director.v1.ManagementService/GetChildRoles"
	ManagementService_GetAllParentRoles_FullMethodName       = "/pilab.cloud.director.v1.ManagementService/GetAllParentRoles"
	ManagementService_GetAllChildRoles_FullMethodName        = "/pilab.cloud.director.v1.ManagementService/GetAllChildRoles"
	ManagementService_CreateRoleGroup_FullMethodName         = "/pilab.cloud.director.v1.ManagementService/CreateRoleGroup"
	ManagementService_GetRoleGroup_FullMethodName            = "/pilab.cloud.director.v1.ManagementService/GetRoleGroup"
	ManagementService_GetRoleGroupByName_FullMethodName      = "/pilab.cloud.director.v1.ManagementService/GetRoleGroupByName"
	ManagementService_UpdateRoleGroup_FullMethodName         = "/pilab.cloud.director.v1.ManagementService/UpdateRoleGroup"
	ManagementService_DeleteRoleGroup_FullMethodName         = "/pilab.cloud.director.v1.ManagementService/DeleteRoleGroup"
	ManagementService_SearchRoleGroups_FullMethodName        = "/pilab.cloud.director.v1.ManagementService/SearchRoleGroups"
	ManagementService_AddUserToRoleGroup_FullMethodName      = "/pilab.cloud.director.v1.ManagementService/AddUserToRoleGroup"
	ManagementService_RemoveUserFromRoleGroup_FullMethodName = "/pilab.cloud.director.v1.ManagementService/RemoveUserFromRoleGroup"
	ManagementService_GetRoleGroupsForUser_FullMethodName    = "/pilab.cloud.director.v1.ManagementService/GetRoleGroupsForUser"
	ManagementService_GetUsersInRoleGroup_FullMethodName     = "/pilab.cloud.director.v1.ManagementService/GetUsersInRoleGroup"
	ManagementService_AssignRoleToUser_FullMethodName        = "/pilab.cloud.director.v1.ManagementService/AssignRoleToUser"
	ManagementService_UnassignRoleFromUser_FullMethodName    = "/pilab.cloud.director.v1.ManagementService/UnassignRoleFromUser"
	ManagementService_GetRolesForUser_FullMethodName         = "/pilab.cloud.director.v1.ManagementService/GetRolesForUser"
	ManagementService_GetPermissionsForRole_FullMethodName   = "/pilab.cloud.director.v1.ManagementService/GetPermissionsForRole"
)

// ManagementServiceClient is the client API for ManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for user, role, and role group management
type ManagementServiceClient interface {
	// User Management
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Role Management
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error)
	GetRoleByName(ctx context.Context, in *GetRoleByNameRequest, opts ...grpc.CallOption) (*Role, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchRoles(ctx context.Context, in *SearchRolesRequest, opts ...grpc.CallOption) (*SearchRolesResponse, error)
	// Role Inheritance
	AddRoleInheritance(ctx context.Context, in *AddRoleInheritanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveRoleInheritance(ctx context.Context, in *RemoveRoleInheritanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetParentRoles(ctx context.Context, in *GetParentRolesRequest, opts ...grpc.CallOption) (*GetParentRolesResponse, error)
	GetChildRoles(ctx context.Context, in *GetChildRolesRequest, opts ...grpc.CallOption) (*GetChildRolesResponse, error)
	GetAllParentRoles(ctx context.Context, in *GetAllParentRolesRequest, opts ...grpc.CallOption) (*GetAllParentRolesResponse, error)
	GetAllChildRoles(ctx context.Context, in *GetAllChildRolesRequest, opts ...grpc.CallOption) (*GetAllChildRolesResponse, error)
	// Role Group Management
	CreateRoleGroup(ctx context.Context, in *CreateRoleGroupRequest, opts ...grpc.CallOption) (*RoleGroup, error)
	GetRoleGroup(ctx context.Context, in *GetRoleGroupRequest, opts ...grpc.CallOption) (*RoleGroup, error)
	GetRoleGroupByName(ctx context.Context, in *GetRoleGroupByNameRequest, opts ...grpc.CallOption) (*RoleGroup, error)
	UpdateRoleGroup(ctx context.Context, in *UpdateRoleGroupRequest, opts ...grpc.CallOption) (*RoleGroup, error)
	DeleteRoleGroup(ctx context.Context, in *DeleteRoleGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchRoleGroups(ctx context.Context, in *SearchRoleGroupsRequest, opts ...grpc.CallOption) (*SearchRoleGroupsResponse, error)
	// Role Group Membership
	AddUserToRoleGroup(ctx context.Context, in *AddUserToRoleGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveUserFromRoleGroup(ctx context.Context, in *RemoveUserFromRoleGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRoleGroupsForUser(ctx context.Context, in *GetRoleGroupsForUserRequest, opts ...grpc.CallOption) (*GetRoleGroupsForUserResponse, error)
	GetUsersInRoleGroup(ctx context.Context, in *GetUsersInRoleGroupRequest, opts ...grpc.CallOption) (*GetUsersInRoleGroupResponse, error)
	// Assign/Unassign Roles to Users directly
	AssignRoleToUser(ctx context.Context, in *AssignRoleToUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnassignRoleFromUser(ctx context.Context, in *UnassignRoleFromUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserResponse, error)
	// Permissions
	GetPermissionsForRole(ctx context.Context, in *GetPermissionsForRoleRequest, opts ...grpc.CallOption) (*GetPermissionsForRoleResponse, error)
}

type managementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementServiceClient(cc grpc.ClientConnInterface) ManagementServiceClient {
	return &managementServiceClient{cc}
}

func (c *managementServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, ManagementService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, ManagementService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, ManagementService_GetUserByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, ManagementService_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, ManagementService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, ManagementService_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_ChangeUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, ManagementService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, ManagementService_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetRoleByName(ctx context.Context, in *GetRoleByNameRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, ManagementService_GetRoleByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, ManagementService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SearchRoles(ctx context.Context, in *SearchRolesRequest, opts ...grpc.CallOption) (*SearchRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRolesResponse)
	err := c.cc.Invoke(ctx, ManagementService_SearchRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddRoleInheritance(ctx context.Context, in *AddRoleInheritanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_AddRoleInheritance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveRoleInheritance(ctx context.Context, in *RemoveRoleInheritanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_RemoveRoleInheritance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetParentRoles(ctx context.Context, in *GetParentRolesRequest, opts ...grpc.CallOption) (*GetParentRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParentRolesResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetParentRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetChildRoles(ctx context.Context, in *GetChildRolesRequest, opts ...grpc.CallOption) (*GetChildRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChildRolesResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetChildRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAllParentRoles(ctx context.Context, in *GetAllParentRolesRequest, opts ...grpc.CallOption) (*GetAllParentRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllParentRolesResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetAllParentRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAllChildRoles(ctx context.Context, in *GetAllChildRolesRequest, opts ...grpc.CallOption) (*GetAllChildRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllChildRolesResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetAllChildRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) CreateRoleGroup(ctx context.Context, in *CreateRoleGroupRequest, opts ...grpc.CallOption) (*RoleGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleGroup)
	err := c.cc.Invoke(ctx, ManagementService_CreateRoleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetRoleGroup(ctx context.Context, in *GetRoleGroupRequest, opts ...grpc.CallOption) (*RoleGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleGroup)
	err := c.cc.Invoke(ctx, ManagementService_GetRoleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetRoleGroupByName(ctx context.Context, in *GetRoleGroupByNameRequest, opts ...grpc.CallOption) (*RoleGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleGroup)
	err := c.cc.Invoke(ctx, ManagementService_GetRoleGroupByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateRoleGroup(ctx context.Context, in *UpdateRoleGroupRequest, opts ...grpc.CallOption) (*RoleGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleGroup)
	err := c.cc.Invoke(ctx, ManagementService_UpdateRoleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteRoleGroup(ctx context.Context, in *DeleteRoleGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_DeleteRoleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SearchRoleGroups(ctx context.Context, in *SearchRoleGroupsRequest, opts ...grpc.CallOption) (*SearchRoleGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRoleGroupsResponse)
	err := c.cc.Invoke(ctx, ManagementService_SearchRoleGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddUserToRoleGroup(ctx context.Context, in *AddUserToRoleGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_AddUserToRoleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveUserFromRoleGroup(ctx context.Context, in *RemoveUserFromRoleGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_RemoveUserFromRoleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetRoleGroupsForUser(ctx context.Context, in *GetRoleGroupsForUserRequest, opts ...grpc.CallOption) (*GetRoleGroupsForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleGroupsForUserResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetRoleGroupsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUsersInRoleGroup(ctx context.Context, in *GetUsersInRoleGroupRequest, opts ...grpc.CallOption) (*GetUsersInRoleGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersInRoleGroupResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetUsersInRoleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AssignRoleToUser(ctx context.Context, in *AssignRoleToUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_AssignRoleToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UnassignRoleFromUser(ctx context.Context, in *UnassignRoleFromUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagementService_UnassignRoleFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRolesForUserResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetRolesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPermissionsForRole(ctx context.Context, in *GetPermissionsForRoleRequest, opts ...grpc.CallOption) (*GetPermissionsForRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermissionsForRoleResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetPermissionsForRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServiceServer is the server API for ManagementService service.
// All implementations must embed UnimplementedManagementServiceServer
// for forward compatibility.
//
// Service definition for user, role, and role group management
type ManagementServiceServer interface {
	// User Management
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*User, error)
	GetUserByEmail(context.Context, *GetUserByEmailRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	ChangeUserPassword(context.Context, *ChangeUserPasswordRequest) (*emptypb.Empty, error)
	// Role Management
	CreateRole(context.Context, *CreateRoleRequest) (*Role, error)
	GetRole(context.Context, *GetRoleRequest) (*Role, error)
	GetRoleByName(context.Context, *GetRoleByNameRequest) (*Role, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	SearchRoles(context.Context, *SearchRolesRequest) (*SearchRolesResponse, error)
	// Role Inheritance
	AddRoleInheritance(context.Context, *AddRoleInheritanceRequest) (*emptypb.Empty, error)
	RemoveRoleInheritance(context.Context, *RemoveRoleInheritanceRequest) (*emptypb.Empty, error)
	GetParentRoles(context.Context, *GetParentRolesRequest) (*GetParentRolesResponse, error)
	GetChildRoles(context.Context, *GetChildRolesRequest) (*GetChildRolesResponse, error)
	GetAllParentRoles(context.Context, *GetAllParentRolesRequest) (*GetAllParentRolesResponse, error)
	GetAllChildRoles(context.Context, *GetAllChildRolesRequest) (*GetAllChildRolesResponse, error)
	// Role Group Management
	CreateRoleGroup(context.Context, *CreateRoleGroupRequest) (*RoleGroup, error)
	GetRoleGroup(context.Context, *GetRoleGroupRequest) (*RoleGroup, error)
	GetRoleGroupByName(context.Context, *GetRoleGroupByNameRequest) (*RoleGroup, error)
	UpdateRoleGroup(context.Context, *UpdateRoleGroupRequest) (*RoleGroup, error)
	DeleteRoleGroup(context.Context, *DeleteRoleGroupRequest) (*emptypb.Empty, error)
	SearchRoleGroups(context.Context, *SearchRoleGroupsRequest) (*SearchRoleGroupsResponse, error)
	// Role Group Membership
	AddUserToRoleGroup(context.Context, *AddUserToRoleGroupRequest) (*emptypb.Empty, error)
	RemoveUserFromRoleGroup(context.Context, *RemoveUserFromRoleGroupRequest) (*emptypb.Empty, error)
	GetRoleGroupsForUser(context.Context, *GetRoleGroupsForUserRequest) (*GetRoleGroupsForUserResponse, error)
	GetUsersInRoleGroup(context.Context, *GetUsersInRoleGroupRequest) (*GetUsersInRoleGroupResponse, error)
	// Assign/Unassign Roles to Users directly
	AssignRoleToUser(context.Context, *AssignRoleToUserRequest) (*emptypb.Empty, error)
	UnassignRoleFromUser(context.Context, *UnassignRoleFromUserRequest) (*emptypb.Empty, error)
	GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResponse, error)
	// Permissions
	GetPermissionsForRole(context.Context, *GetPermissionsForRoleRequest) (*GetPermissionsForRoleResponse, error)
	mustEmbedUnimplementedManagementServiceServer()
}

// UnimplementedManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagementServiceServer struct{}

func (UnimplementedManagementServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedManagementServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedManagementServiceServer) GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedManagementServiceServer) GetUserByEmail(context.Context, *GetUserByEmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedManagementServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedManagementServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedManagementServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedManagementServiceServer) ChangeUserPassword(context.Context, *ChangeUserPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (UnimplementedManagementServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedManagementServiceServer) GetRole(context.Context, *GetRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedManagementServiceServer) GetRoleByName(context.Context, *GetRoleByNameRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByName not implemented")
}
func (UnimplementedManagementServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedManagementServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedManagementServiceServer) SearchRoles(context.Context, *SearchRolesRequest) (*SearchRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoles not implemented")
}
func (UnimplementedManagementServiceServer) AddRoleInheritance(context.Context, *AddRoleInheritanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleInheritance not implemented")
}
func (UnimplementedManagementServiceServer) RemoveRoleInheritance(context.Context, *RemoveRoleInheritanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleInheritance not implemented")
}
func (UnimplementedManagementServiceServer) GetParentRoles(context.Context, *GetParentRolesRequest) (*GetParentRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentRoles not implemented")
}
func (UnimplementedManagementServiceServer) GetChildRoles(context.Context, *GetChildRolesRequest) (*GetChildRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildRoles not implemented")
}
func (UnimplementedManagementServiceServer) GetAllParentRoles(context.Context, *GetAllParentRolesRequest) (*GetAllParentRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParentRoles not implemented")
}
func (UnimplementedManagementServiceServer) GetAllChildRoles(context.Context, *GetAllChildRolesRequest) (*GetAllChildRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChildRoles not implemented")
}
func (UnimplementedManagementServiceServer) CreateRoleGroup(context.Context, *CreateRoleGroupRequest) (*RoleGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleGroup not implemented")
}
func (UnimplementedManagementServiceServer) GetRoleGroup(context.Context, *GetRoleGroupRequest) (*RoleGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleGroup not implemented")
}
func (UnimplementedManagementServiceServer) GetRoleGroupByName(context.Context, *GetRoleGroupByNameRequest) (*RoleGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleGroupByName not implemented")
}
func (UnimplementedManagementServiceServer) UpdateRoleGroup(context.Context, *UpdateRoleGroupRequest) (*RoleGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleGroup not implemented")
}
func (UnimplementedManagementServiceServer) DeleteRoleGroup(context.Context, *DeleteRoleGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleGroup not implemented")
}
func (UnimplementedManagementServiceServer) SearchRoleGroups(context.Context, *SearchRoleGroupsRequest) (*SearchRoleGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoleGroups not implemented")
}
func (UnimplementedManagementServiceServer) AddUserToRoleGroup(context.Context, *AddUserToRoleGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToRoleGroup not implemented")
}
func (UnimplementedManagementServiceServer) RemoveUserFromRoleGroup(context.Context, *RemoveUserFromRoleGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromRoleGroup not implemented")
}
func (UnimplementedManagementServiceServer) GetRoleGroupsForUser(context.Context, *GetRoleGroupsForUserRequest) (*GetRoleGroupsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleGroupsForUser not implemented")
}
func (UnimplementedManagementServiceServer) GetUsersInRoleGroup(context.Context, *GetUsersInRoleGroupRequest) (*GetUsersInRoleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersInRoleGroup not implemented")
}
func (UnimplementedManagementServiceServer) AssignRoleToUser(context.Context, *AssignRoleToUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleToUser not implemented")
}
func (UnimplementedManagementServiceServer) UnassignRoleFromUser(context.Context, *UnassignRoleFromUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignRoleFromUser not implemented")
}
func (UnimplementedManagementServiceServer) GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedManagementServiceServer) GetPermissionsForRole(context.Context, *GetPermissionsForRoleRequest) (*GetPermissionsForRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsForRole not implemented")
}
func (UnimplementedManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {}
func (UnimplementedManagementServiceServer) testEmbeddedByValue()                           {}

// UnsafeManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServiceServer will
// result in compilation errors.
type UnsafeManagementServiceServer interface {
	mustEmbedUnimplementedManagementServiceServer()
}

func RegisterManagementServiceServer(s grpc.ServiceRegistrar, srv ManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManagementService_ServiceDesc, srv)
}

func _ManagementService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserByUsername(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserByEmail(ctx, req.(*GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_ChangeUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ChangeUserPassword(ctx, req.(*ChangeUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetRoleByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetRoleByName(ctx, req.(*GetRoleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SearchRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SearchRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_SearchRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SearchRoles(ctx, req.(*SearchRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddRoleInheritance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleInheritanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddRoleInheritance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_AddRoleInheritance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddRoleInheritance(ctx, req.(*AddRoleInheritanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveRoleInheritance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleInheritanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveRoleInheritance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_RemoveRoleInheritance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveRoleInheritance(ctx, req.(*RemoveRoleInheritanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetParentRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParentRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetParentRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetParentRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetParentRoles(ctx, req.(*GetParentRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetChildRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetChildRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetChildRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetChildRoles(ctx, req.(*GetChildRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAllParentRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllParentRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAllParentRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetAllParentRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAllParentRoles(ctx, req.(*GetAllParentRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAllChildRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChildRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAllChildRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetAllChildRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAllChildRoles(ctx, req.(*GetAllChildRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_CreateRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CreateRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_CreateRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CreateRoleGroup(ctx, req.(*CreateRoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetRoleGroup(ctx, req.(*GetRoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetRoleGroupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleGroupByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetRoleGroupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetRoleGroupByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetRoleGroupByName(ctx, req.(*GetRoleGroupByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_UpdateRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateRoleGroup(ctx, req.(*UpdateRoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_DeleteRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteRoleGroup(ctx, req.(*DeleteRoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SearchRoleGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRoleGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SearchRoleGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_SearchRoleGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SearchRoleGroups(ctx, req.(*SearchRoleGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddUserToRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToRoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddUserToRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_AddUserToRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddUserToRoleGroup(ctx, req.(*AddUserToRoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveUserFromRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromRoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveUserFromRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_RemoveUserFromRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveUserFromRoleGroup(ctx, req.(*RemoveUserFromRoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetRoleGroupsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleGroupsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetRoleGroupsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetRoleGroupsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetRoleGroupsForUser(ctx, req.(*GetRoleGroupsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUsersInRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersInRoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUsersInRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetUsersInRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUsersInRoleGroup(ctx, req.(*GetUsersInRoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AssignRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AssignRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_AssignRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AssignRoleToUser(ctx, req.(*AssignRoleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UnassignRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignRoleFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UnassignRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_UnassignRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UnassignRoleFromUser(ctx, req.(*UnassignRoleFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetRolesForUser(ctx, req.(*GetRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPermissionsForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsForRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPermissionsForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetPermissionsForRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPermissionsForRole(ctx, req.(*GetPermissionsForRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementService_ServiceDesc is the grpc.ServiceDesc for ManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.cloud.director.v1.ManagementService",
	HandlerType: (*ManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _ManagementService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ManagementService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByUsername",
			Handler:    _ManagementService_GetUserByUsername_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _ManagementService_GetUserByEmail_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ManagementService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ManagementService_DeleteUser_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _ManagementService_SearchUsers_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _ManagementService_ChangeUserPassword_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ManagementService_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _ManagementService_GetRole_Handler,
		},
		{
			MethodName: "GetRoleByName",
			Handler:    _ManagementService_GetRoleByName_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _ManagementService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _ManagementService_DeleteRole_Handler,
		},
		{
			MethodName: "SearchRoles",
			Handler:    _ManagementService_SearchRoles_Handler,
		},
		{
			MethodName: "AddRoleInheritance",
			Handler:    _ManagementService_AddRoleInheritance_Handler,
		},
		{
			MethodName: "RemoveRoleInheritance",
			Handler:    _ManagementService_RemoveRoleInheritance_Handler,
		},
		{
			MethodName: "GetParentRoles",
			Handler:    _ManagementService_GetParentRoles_Handler,
		},
		{
			MethodName: "GetChildRoles",
			Handler:    _ManagementService_GetChildRoles_Handler,
		},
		{
			MethodName: "GetAllParentRoles",
			Handler:    _ManagementService_GetAllParentRoles_Handler,
		},
		{
			MethodName: "GetAllChildRoles",
			Handler:    _ManagementService_GetAllChildRoles_Handler,
		},
		{
			MethodName: "CreateRoleGroup",
			Handler:    _ManagementService_CreateRoleGroup_Handler,
		},
		{
			MethodName: "GetRoleGroup",
			Handler:    _ManagementService_GetRoleGroup_Handler,
		},
		{
			MethodName: "GetRoleGroupByName",
			Handler:    _ManagementService_GetRoleGroupByName_Handler,
		},
		{
			MethodName: "UpdateRoleGroup",
			Handler:    _ManagementService_UpdateRoleGroup_Handler,
		},
		{
			MethodName: "DeleteRoleGroup",
			Handler:    _ManagementService_DeleteRoleGroup_Handler,
		},
		{
			MethodName: "SearchRoleGroups",
			Handler:    _ManagementService_SearchRoleGroups_Handler,
		},
		{
			MethodName: "AddUserToRoleGroup",
			Handler:    _ManagementService_AddUserToRoleGroup_Handler,
		},
		{
			MethodName: "RemoveUserFromRoleGroup",
			Handler:    _ManagementService_RemoveUserFromRoleGroup_Handler,
		},
		{
			MethodName: "GetRoleGroupsForUser",
			Handler:    _ManagementService_GetRoleGroupsForUser_Handler,
		},
		{
			MethodName: "GetUsersInRoleGroup",
			Handler:    _ManagementService_GetUsersInRoleGroup_Handler,
		},
		{
			MethodName: "AssignRoleToUser",
			Handler:    _ManagementService_AssignRoleToUser_Handler,
		},
		{
			MethodName: "UnassignRoleFromUser",
			Handler:    _ManagementService_UnassignRoleFromUser_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _ManagementService_GetRolesForUser_Handler,
		},
		{
			MethodName: "GetPermissionsForRole",
			Handler:    _ManagementService_GetPermissionsForRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pilab/cloud/frontend/v1/management_service.proto",
}
