// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/frontend/v1/tasks_service.proto

package frontendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/frontend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TasksServiceName is the fully-qualified name of the TasksService service.
	TasksServiceName = "pilab.cloud.frontend.v1.TasksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TasksServiceListTasksProcedure is the fully-qualified name of the TasksService's ListTasks RPC.
	TasksServiceListTasksProcedure = "/pilab.cloud.frontend.v1.TasksService/ListTasks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tasksServiceServiceDescriptor         = v1.File_pilab_cloud_frontend_v1_tasks_service_proto.Services().ByName("TasksService")
	tasksServiceListTasksMethodDescriptor = tasksServiceServiceDescriptor.Methods().ByName("ListTasks")
)

// TasksServiceClient is a client for the pilab.cloud.frontend.v1.TasksService service.
type TasksServiceClient interface {
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
}

// NewTasksServiceClient constructs a client for the pilab.cloud.frontend.v1.TasksService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTasksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TasksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tasksServiceClient{
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+TasksServiceListTasksProcedure,
			connect.WithSchema(tasksServiceListTasksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tasksServiceClient implements TasksServiceClient.
type tasksServiceClient struct {
	listTasks *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
}

// ListTasks calls pilab.cloud.frontend.v1.TasksService.ListTasks.
func (c *tasksServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// TasksServiceHandler is an implementation of the pilab.cloud.frontend.v1.TasksService service.
type TasksServiceHandler interface {
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
}

// NewTasksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTasksServiceHandler(svc TasksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tasksServiceListTasksHandler := connect.NewUnaryHandler(
		TasksServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(tasksServiceListTasksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.frontend.v1.TasksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TasksServiceListTasksProcedure:
			tasksServiceListTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTasksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTasksServiceHandler struct{}

func (UnimplementedTasksServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.frontend.v1.TasksService.ListTasks is not implemented"))
}
