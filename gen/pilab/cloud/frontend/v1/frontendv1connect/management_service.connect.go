// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/frontend/v1/management_service.proto

package frontendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/frontend/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "pilab.cloud.director.v1.ManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagementServiceCreateUserProcedure is the fully-qualified name of the ManagementService's
	// CreateUser RPC.
	ManagementServiceCreateUserProcedure = "/pilab.cloud.director.v1.ManagementService/CreateUser"
	// ManagementServiceGetUserProcedure is the fully-qualified name of the ManagementService's GetUser
	// RPC.
	ManagementServiceGetUserProcedure = "/pilab.cloud.director.v1.ManagementService/GetUser"
	// ManagementServiceGetUserByUsernameProcedure is the fully-qualified name of the
	// ManagementService's GetUserByUsername RPC.
	ManagementServiceGetUserByUsernameProcedure = "/pilab.cloud.director.v1.ManagementService/GetUserByUsername"
	// ManagementServiceGetUserByEmailProcedure is the fully-qualified name of the ManagementService's
	// GetUserByEmail RPC.
	ManagementServiceGetUserByEmailProcedure = "/pilab.cloud.director.v1.ManagementService/GetUserByEmail"
	// ManagementServiceUpdateUserProcedure is the fully-qualified name of the ManagementService's
	// UpdateUser RPC.
	ManagementServiceUpdateUserProcedure = "/pilab.cloud.director.v1.ManagementService/UpdateUser"
	// ManagementServiceDeleteUserProcedure is the fully-qualified name of the ManagementService's
	// DeleteUser RPC.
	ManagementServiceDeleteUserProcedure = "/pilab.cloud.director.v1.ManagementService/DeleteUser"
	// ManagementServiceSearchUsersProcedure is the fully-qualified name of the ManagementService's
	// SearchUsers RPC.
	ManagementServiceSearchUsersProcedure = "/pilab.cloud.director.v1.ManagementService/SearchUsers"
	// ManagementServiceChangeUserPasswordProcedure is the fully-qualified name of the
	// ManagementService's ChangeUserPassword RPC.
	ManagementServiceChangeUserPasswordProcedure = "/pilab.cloud.director.v1.ManagementService/ChangeUserPassword"
	// ManagementServiceCreateRoleProcedure is the fully-qualified name of the ManagementService's
	// CreateRole RPC.
	ManagementServiceCreateRoleProcedure = "/pilab.cloud.director.v1.ManagementService/CreateRole"
	// ManagementServiceGetRoleProcedure is the fully-qualified name of the ManagementService's GetRole
	// RPC.
	ManagementServiceGetRoleProcedure = "/pilab.cloud.director.v1.ManagementService/GetRole"
	// ManagementServiceGetRoleByNameProcedure is the fully-qualified name of the ManagementService's
	// GetRoleByName RPC.
	ManagementServiceGetRoleByNameProcedure = "/pilab.cloud.director.v1.ManagementService/GetRoleByName"
	// ManagementServiceUpdateRoleProcedure is the fully-qualified name of the ManagementService's
	// UpdateRole RPC.
	ManagementServiceUpdateRoleProcedure = "/pilab.cloud.director.v1.ManagementService/UpdateRole"
	// ManagementServiceDeleteRoleProcedure is the fully-qualified name of the ManagementService's
	// DeleteRole RPC.
	ManagementServiceDeleteRoleProcedure = "/pilab.cloud.director.v1.ManagementService/DeleteRole"
	// ManagementServiceSearchRolesProcedure is the fully-qualified name of the ManagementService's
	// SearchRoles RPC.
	ManagementServiceSearchRolesProcedure = "/pilab.cloud.director.v1.ManagementService/SearchRoles"
	// ManagementServiceAddRoleInheritanceProcedure is the fully-qualified name of the
	// ManagementService's AddRoleInheritance RPC.
	ManagementServiceAddRoleInheritanceProcedure = "/pilab.cloud.director.v1.ManagementService/AddRoleInheritance"
	// ManagementServiceRemoveRoleInheritanceProcedure is the fully-qualified name of the
	// ManagementService's RemoveRoleInheritance RPC.
	ManagementServiceRemoveRoleInheritanceProcedure = "/pilab.cloud.director.v1.ManagementService/RemoveRoleInheritance"
	// ManagementServiceGetParentRolesProcedure is the fully-qualified name of the ManagementService's
	// GetParentRoles RPC.
	ManagementServiceGetParentRolesProcedure = "/pilab.cloud.director.v1.ManagementService/GetParentRoles"
	// ManagementServiceGetChildRolesProcedure is the fully-qualified name of the ManagementService's
	// GetChildRoles RPC.
	ManagementServiceGetChildRolesProcedure = "/pilab.cloud.director.v1.ManagementService/GetChildRoles"
	// ManagementServiceGetAllParentRolesProcedure is the fully-qualified name of the
	// ManagementService's GetAllParentRoles RPC.
	ManagementServiceGetAllParentRolesProcedure = "/pilab.cloud.director.v1.ManagementService/GetAllParentRoles"
	// ManagementServiceGetAllChildRolesProcedure is the fully-qualified name of the ManagementService's
	// GetAllChildRoles RPC.
	ManagementServiceGetAllChildRolesProcedure = "/pilab.cloud.director.v1.ManagementService/GetAllChildRoles"
	// ManagementServiceCreateRoleGroupProcedure is the fully-qualified name of the ManagementService's
	// CreateRoleGroup RPC.
	ManagementServiceCreateRoleGroupProcedure = "/pilab.cloud.director.v1.ManagementService/CreateRoleGroup"
	// ManagementServiceGetRoleGroupProcedure is the fully-qualified name of the ManagementService's
	// GetRoleGroup RPC.
	ManagementServiceGetRoleGroupProcedure = "/pilab.cloud.director.v1.ManagementService/GetRoleGroup"
	// ManagementServiceGetRoleGroupByNameProcedure is the fully-qualified name of the
	// ManagementService's GetRoleGroupByName RPC.
	ManagementServiceGetRoleGroupByNameProcedure = "/pilab.cloud.director.v1.ManagementService/GetRoleGroupByName"
	// ManagementServiceUpdateRoleGroupProcedure is the fully-qualified name of the ManagementService's
	// UpdateRoleGroup RPC.
	ManagementServiceUpdateRoleGroupProcedure = "/pilab.cloud.director.v1.ManagementService/UpdateRoleGroup"
	// ManagementServiceDeleteRoleGroupProcedure is the fully-qualified name of the ManagementService's
	// DeleteRoleGroup RPC.
	ManagementServiceDeleteRoleGroupProcedure = "/pilab.cloud.director.v1.ManagementService/DeleteRoleGroup"
	// ManagementServiceSearchRoleGroupsProcedure is the fully-qualified name of the ManagementService's
	// SearchRoleGroups RPC.
	ManagementServiceSearchRoleGroupsProcedure = "/pilab.cloud.director.v1.ManagementService/SearchRoleGroups"
	// ManagementServiceAddUserToRoleGroupProcedure is the fully-qualified name of the
	// ManagementService's AddUserToRoleGroup RPC.
	ManagementServiceAddUserToRoleGroupProcedure = "/pilab.cloud.director.v1.ManagementService/AddUserToRoleGroup"
	// ManagementServiceRemoveUserFromRoleGroupProcedure is the fully-qualified name of the
	// ManagementService's RemoveUserFromRoleGroup RPC.
	ManagementServiceRemoveUserFromRoleGroupProcedure = "/pilab.cloud.director.v1.ManagementService/RemoveUserFromRoleGroup"
	// ManagementServiceGetRoleGroupsForUserProcedure is the fully-qualified name of the
	// ManagementService's GetRoleGroupsForUser RPC.
	ManagementServiceGetRoleGroupsForUserProcedure = "/pilab.cloud.director.v1.ManagementService/GetRoleGroupsForUser"
	// ManagementServiceGetUsersInRoleGroupProcedure is the fully-qualified name of the
	// ManagementService's GetUsersInRoleGroup RPC.
	ManagementServiceGetUsersInRoleGroupProcedure = "/pilab.cloud.director.v1.ManagementService/GetUsersInRoleGroup"
	// ManagementServiceAssignRoleToUserProcedure is the fully-qualified name of the ManagementService's
	// AssignRoleToUser RPC.
	ManagementServiceAssignRoleToUserProcedure = "/pilab.cloud.director.v1.ManagementService/AssignRoleToUser"
	// ManagementServiceUnassignRoleFromUserProcedure is the fully-qualified name of the
	// ManagementService's UnassignRoleFromUser RPC.
	ManagementServiceUnassignRoleFromUserProcedure = "/pilab.cloud.director.v1.ManagementService/UnassignRoleFromUser"
	// ManagementServiceGetRolesForUserProcedure is the fully-qualified name of the ManagementService's
	// GetRolesForUser RPC.
	ManagementServiceGetRolesForUserProcedure = "/pilab.cloud.director.v1.ManagementService/GetRolesForUser"
	// ManagementServiceGetPermissionsForRoleProcedure is the fully-qualified name of the
	// ManagementService's GetPermissionsForRole RPC.
	ManagementServiceGetPermissionsForRoleProcedure = "/pilab.cloud.director.v1.ManagementService/GetPermissionsForRole"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	managementServiceServiceDescriptor                       = v1.File_pilab_cloud_frontend_v1_management_service_proto.Services().ByName("ManagementService")
	managementServiceCreateUserMethodDescriptor              = managementServiceServiceDescriptor.Methods().ByName("CreateUser")
	managementServiceGetUserMethodDescriptor                 = managementServiceServiceDescriptor.Methods().ByName("GetUser")
	managementServiceGetUserByUsernameMethodDescriptor       = managementServiceServiceDescriptor.Methods().ByName("GetUserByUsername")
	managementServiceGetUserByEmailMethodDescriptor          = managementServiceServiceDescriptor.Methods().ByName("GetUserByEmail")
	managementServiceUpdateUserMethodDescriptor              = managementServiceServiceDescriptor.Methods().ByName("UpdateUser")
	managementServiceDeleteUserMethodDescriptor              = managementServiceServiceDescriptor.Methods().ByName("DeleteUser")
	managementServiceSearchUsersMethodDescriptor             = managementServiceServiceDescriptor.Methods().ByName("SearchUsers")
	managementServiceChangeUserPasswordMethodDescriptor      = managementServiceServiceDescriptor.Methods().ByName("ChangeUserPassword")
	managementServiceCreateRoleMethodDescriptor              = managementServiceServiceDescriptor.Methods().ByName("CreateRole")
	managementServiceGetRoleMethodDescriptor                 = managementServiceServiceDescriptor.Methods().ByName("GetRole")
	managementServiceGetRoleByNameMethodDescriptor           = managementServiceServiceDescriptor.Methods().ByName("GetRoleByName")
	managementServiceUpdateRoleMethodDescriptor              = managementServiceServiceDescriptor.Methods().ByName("UpdateRole")
	managementServiceDeleteRoleMethodDescriptor              = managementServiceServiceDescriptor.Methods().ByName("DeleteRole")
	managementServiceSearchRolesMethodDescriptor             = managementServiceServiceDescriptor.Methods().ByName("SearchRoles")
	managementServiceAddRoleInheritanceMethodDescriptor      = managementServiceServiceDescriptor.Methods().ByName("AddRoleInheritance")
	managementServiceRemoveRoleInheritanceMethodDescriptor   = managementServiceServiceDescriptor.Methods().ByName("RemoveRoleInheritance")
	managementServiceGetParentRolesMethodDescriptor          = managementServiceServiceDescriptor.Methods().ByName("GetParentRoles")
	managementServiceGetChildRolesMethodDescriptor           = managementServiceServiceDescriptor.Methods().ByName("GetChildRoles")
	managementServiceGetAllParentRolesMethodDescriptor       = managementServiceServiceDescriptor.Methods().ByName("GetAllParentRoles")
	managementServiceGetAllChildRolesMethodDescriptor        = managementServiceServiceDescriptor.Methods().ByName("GetAllChildRoles")
	managementServiceCreateRoleGroupMethodDescriptor         = managementServiceServiceDescriptor.Methods().ByName("CreateRoleGroup")
	managementServiceGetRoleGroupMethodDescriptor            = managementServiceServiceDescriptor.Methods().ByName("GetRoleGroup")
	managementServiceGetRoleGroupByNameMethodDescriptor      = managementServiceServiceDescriptor.Methods().ByName("GetRoleGroupByName")
	managementServiceUpdateRoleGroupMethodDescriptor         = managementServiceServiceDescriptor.Methods().ByName("UpdateRoleGroup")
	managementServiceDeleteRoleGroupMethodDescriptor         = managementServiceServiceDescriptor.Methods().ByName("DeleteRoleGroup")
	managementServiceSearchRoleGroupsMethodDescriptor        = managementServiceServiceDescriptor.Methods().ByName("SearchRoleGroups")
	managementServiceAddUserToRoleGroupMethodDescriptor      = managementServiceServiceDescriptor.Methods().ByName("AddUserToRoleGroup")
	managementServiceRemoveUserFromRoleGroupMethodDescriptor = managementServiceServiceDescriptor.Methods().ByName("RemoveUserFromRoleGroup")
	managementServiceGetRoleGroupsForUserMethodDescriptor    = managementServiceServiceDescriptor.Methods().ByName("GetRoleGroupsForUser")
	managementServiceGetUsersInRoleGroupMethodDescriptor     = managementServiceServiceDescriptor.Methods().ByName("GetUsersInRoleGroup")
	managementServiceAssignRoleToUserMethodDescriptor        = managementServiceServiceDescriptor.Methods().ByName("AssignRoleToUser")
	managementServiceUnassignRoleFromUserMethodDescriptor    = managementServiceServiceDescriptor.Methods().ByName("UnassignRoleFromUser")
	managementServiceGetRolesForUserMethodDescriptor         = managementServiceServiceDescriptor.Methods().ByName("GetRolesForUser")
	managementServiceGetPermissionsForRoleMethodDescriptor   = managementServiceServiceDescriptor.Methods().ByName("GetPermissionsForRole")
)

// ManagementServiceClient is a client for the pilab.cloud.director.v1.ManagementService service.
type ManagementServiceClient interface {
	// User Management
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.User], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.User], error)
	GetUserByUsername(context.Context, *connect.Request[v1.GetUserByUsernameRequest]) (*connect.Response[v1.User], error)
	GetUserByEmail(context.Context, *connect.Request[v1.GetUserByEmailRequest]) (*connect.Response[v1.User], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.User], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error)
	SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error)
	ChangeUserPassword(context.Context, *connect.Request[v1.ChangeUserPasswordRequest]) (*connect.Response[emptypb.Empty], error)
	// Role Management
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.Role], error)
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.Role], error)
	GetRoleByName(context.Context, *connect.Request[v1.GetRoleByNameRequest]) (*connect.Response[v1.Role], error)
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.Role], error)
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[emptypb.Empty], error)
	SearchRoles(context.Context, *connect.Request[v1.SearchRolesRequest]) (*connect.Response[v1.SearchRolesResponse], error)
	// Role Inheritance
	AddRoleInheritance(context.Context, *connect.Request[v1.AddRoleInheritanceRequest]) (*connect.Response[emptypb.Empty], error)
	RemoveRoleInheritance(context.Context, *connect.Request[v1.RemoveRoleInheritanceRequest]) (*connect.Response[emptypb.Empty], error)
	GetParentRoles(context.Context, *connect.Request[v1.GetParentRolesRequest]) (*connect.Response[v1.GetParentRolesResponse], error)
	GetChildRoles(context.Context, *connect.Request[v1.GetChildRolesRequest]) (*connect.Response[v1.GetChildRolesResponse], error)
	GetAllParentRoles(context.Context, *connect.Request[v1.GetAllParentRolesRequest]) (*connect.Response[v1.GetAllParentRolesResponse], error)
	GetAllChildRoles(context.Context, *connect.Request[v1.GetAllChildRolesRequest]) (*connect.Response[v1.GetAllChildRolesResponse], error)
	// Role Group Management
	CreateRoleGroup(context.Context, *connect.Request[v1.CreateRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error)
	GetRoleGroup(context.Context, *connect.Request[v1.GetRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error)
	GetRoleGroupByName(context.Context, *connect.Request[v1.GetRoleGroupByNameRequest]) (*connect.Response[v1.RoleGroup], error)
	UpdateRoleGroup(context.Context, *connect.Request[v1.UpdateRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error)
	DeleteRoleGroup(context.Context, *connect.Request[v1.DeleteRoleGroupRequest]) (*connect.Response[emptypb.Empty], error)
	SearchRoleGroups(context.Context, *connect.Request[v1.SearchRoleGroupsRequest]) (*connect.Response[v1.SearchRoleGroupsResponse], error)
	// Role Group Membership
	AddUserToRoleGroup(context.Context, *connect.Request[v1.AddUserToRoleGroupRequest]) (*connect.Response[emptypb.Empty], error)
	RemoveUserFromRoleGroup(context.Context, *connect.Request[v1.RemoveUserFromRoleGroupRequest]) (*connect.Response[emptypb.Empty], error)
	GetRoleGroupsForUser(context.Context, *connect.Request[v1.GetRoleGroupsForUserRequest]) (*connect.Response[v1.GetRoleGroupsForUserResponse], error)
	GetUsersInRoleGroup(context.Context, *connect.Request[v1.GetUsersInRoleGroupRequest]) (*connect.Response[v1.GetUsersInRoleGroupResponse], error)
	// Assign/Unassign Roles to Users directly
	AssignRoleToUser(context.Context, *connect.Request[v1.AssignRoleToUserRequest]) (*connect.Response[emptypb.Empty], error)
	UnassignRoleFromUser(context.Context, *connect.Request[v1.UnassignRoleFromUserRequest]) (*connect.Response[emptypb.Empty], error)
	GetRolesForUser(context.Context, *connect.Request[v1.GetRolesForUserRequest]) (*connect.Response[v1.GetRolesForUserResponse], error)
	// Permissions
	GetPermissionsForRole(context.Context, *connect.Request[v1.GetPermissionsForRoleRequest]) (*connect.Response[v1.GetPermissionsForRoleResponse], error)
}

// NewManagementServiceClient constructs a client for the pilab.cloud.director.v1.ManagementService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &managementServiceClient{
		createUser: connect.NewClient[v1.CreateUserRequest, v1.User](
			httpClient,
			baseURL+ManagementServiceCreateUserProcedure,
			connect.WithSchema(managementServiceCreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.User](
			httpClient,
			baseURL+ManagementServiceGetUserProcedure,
			connect.WithSchema(managementServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserByUsername: connect.NewClient[v1.GetUserByUsernameRequest, v1.User](
			httpClient,
			baseURL+ManagementServiceGetUserByUsernameProcedure,
			connect.WithSchema(managementServiceGetUserByUsernameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserByEmail: connect.NewClient[v1.GetUserByEmailRequest, v1.User](
			httpClient,
			baseURL+ManagementServiceGetUserByEmailProcedure,
			connect.WithSchema(managementServiceGetUserByEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.User](
			httpClient,
			baseURL+ManagementServiceUpdateUserProcedure,
			connect.WithSchema(managementServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceDeleteUserProcedure,
			connect.WithSchema(managementServiceDeleteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchUsers: connect.NewClient[v1.SearchUsersRequest, v1.SearchUsersResponse](
			httpClient,
			baseURL+ManagementServiceSearchUsersProcedure,
			connect.WithSchema(managementServiceSearchUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeUserPassword: connect.NewClient[v1.ChangeUserPasswordRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceChangeUserPasswordProcedure,
			connect.WithSchema(managementServiceChangeUserPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[v1.CreateRoleRequest, v1.Role](
			httpClient,
			baseURL+ManagementServiceCreateRoleProcedure,
			connect.WithSchema(managementServiceCreateRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRole: connect.NewClient[v1.GetRoleRequest, v1.Role](
			httpClient,
			baseURL+ManagementServiceGetRoleProcedure,
			connect.WithSchema(managementServiceGetRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoleByName: connect.NewClient[v1.GetRoleByNameRequest, v1.Role](
			httpClient,
			baseURL+ManagementServiceGetRoleByNameProcedure,
			connect.WithSchema(managementServiceGetRoleByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[v1.UpdateRoleRequest, v1.Role](
			httpClient,
			baseURL+ManagementServiceUpdateRoleProcedure,
			connect.WithSchema(managementServiceUpdateRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[v1.DeleteRoleRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceDeleteRoleProcedure,
			connect.WithSchema(managementServiceDeleteRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchRoles: connect.NewClient[v1.SearchRolesRequest, v1.SearchRolesResponse](
			httpClient,
			baseURL+ManagementServiceSearchRolesProcedure,
			connect.WithSchema(managementServiceSearchRolesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addRoleInheritance: connect.NewClient[v1.AddRoleInheritanceRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceAddRoleInheritanceProcedure,
			connect.WithSchema(managementServiceAddRoleInheritanceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeRoleInheritance: connect.NewClient[v1.RemoveRoleInheritanceRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceRemoveRoleInheritanceProcedure,
			connect.WithSchema(managementServiceRemoveRoleInheritanceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getParentRoles: connect.NewClient[v1.GetParentRolesRequest, v1.GetParentRolesResponse](
			httpClient,
			baseURL+ManagementServiceGetParentRolesProcedure,
			connect.WithSchema(managementServiceGetParentRolesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChildRoles: connect.NewClient[v1.GetChildRolesRequest, v1.GetChildRolesResponse](
			httpClient,
			baseURL+ManagementServiceGetChildRolesProcedure,
			connect.WithSchema(managementServiceGetChildRolesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAllParentRoles: connect.NewClient[v1.GetAllParentRolesRequest, v1.GetAllParentRolesResponse](
			httpClient,
			baseURL+ManagementServiceGetAllParentRolesProcedure,
			connect.WithSchema(managementServiceGetAllParentRolesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAllChildRoles: connect.NewClient[v1.GetAllChildRolesRequest, v1.GetAllChildRolesResponse](
			httpClient,
			baseURL+ManagementServiceGetAllChildRolesProcedure,
			connect.WithSchema(managementServiceGetAllChildRolesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRoleGroup: connect.NewClient[v1.CreateRoleGroupRequest, v1.RoleGroup](
			httpClient,
			baseURL+ManagementServiceCreateRoleGroupProcedure,
			connect.WithSchema(managementServiceCreateRoleGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoleGroup: connect.NewClient[v1.GetRoleGroupRequest, v1.RoleGroup](
			httpClient,
			baseURL+ManagementServiceGetRoleGroupProcedure,
			connect.WithSchema(managementServiceGetRoleGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoleGroupByName: connect.NewClient[v1.GetRoleGroupByNameRequest, v1.RoleGroup](
			httpClient,
			baseURL+ManagementServiceGetRoleGroupByNameProcedure,
			connect.WithSchema(managementServiceGetRoleGroupByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRoleGroup: connect.NewClient[v1.UpdateRoleGroupRequest, v1.RoleGroup](
			httpClient,
			baseURL+ManagementServiceUpdateRoleGroupProcedure,
			connect.WithSchema(managementServiceUpdateRoleGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRoleGroup: connect.NewClient[v1.DeleteRoleGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceDeleteRoleGroupProcedure,
			connect.WithSchema(managementServiceDeleteRoleGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchRoleGroups: connect.NewClient[v1.SearchRoleGroupsRequest, v1.SearchRoleGroupsResponse](
			httpClient,
			baseURL+ManagementServiceSearchRoleGroupsProcedure,
			connect.WithSchema(managementServiceSearchRoleGroupsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addUserToRoleGroup: connect.NewClient[v1.AddUserToRoleGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceAddUserToRoleGroupProcedure,
			connect.WithSchema(managementServiceAddUserToRoleGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeUserFromRoleGroup: connect.NewClient[v1.RemoveUserFromRoleGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceRemoveUserFromRoleGroupProcedure,
			connect.WithSchema(managementServiceRemoveUserFromRoleGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoleGroupsForUser: connect.NewClient[v1.GetRoleGroupsForUserRequest, v1.GetRoleGroupsForUserResponse](
			httpClient,
			baseURL+ManagementServiceGetRoleGroupsForUserProcedure,
			connect.WithSchema(managementServiceGetRoleGroupsForUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUsersInRoleGroup: connect.NewClient[v1.GetUsersInRoleGroupRequest, v1.GetUsersInRoleGroupResponse](
			httpClient,
			baseURL+ManagementServiceGetUsersInRoleGroupProcedure,
			connect.WithSchema(managementServiceGetUsersInRoleGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assignRoleToUser: connect.NewClient[v1.AssignRoleToUserRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceAssignRoleToUserProcedure,
			connect.WithSchema(managementServiceAssignRoleToUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unassignRoleFromUser: connect.NewClient[v1.UnassignRoleFromUserRequest, emptypb.Empty](
			httpClient,
			baseURL+ManagementServiceUnassignRoleFromUserProcedure,
			connect.WithSchema(managementServiceUnassignRoleFromUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRolesForUser: connect.NewClient[v1.GetRolesForUserRequest, v1.GetRolesForUserResponse](
			httpClient,
			baseURL+ManagementServiceGetRolesForUserProcedure,
			connect.WithSchema(managementServiceGetRolesForUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPermissionsForRole: connect.NewClient[v1.GetPermissionsForRoleRequest, v1.GetPermissionsForRoleResponse](
			httpClient,
			baseURL+ManagementServiceGetPermissionsForRoleProcedure,
			connect.WithSchema(managementServiceGetPermissionsForRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	createUser              *connect.Client[v1.CreateUserRequest, v1.User]
	getUser                 *connect.Client[v1.GetUserRequest, v1.User]
	getUserByUsername       *connect.Client[v1.GetUserByUsernameRequest, v1.User]
	getUserByEmail          *connect.Client[v1.GetUserByEmailRequest, v1.User]
	updateUser              *connect.Client[v1.UpdateUserRequest, v1.User]
	deleteUser              *connect.Client[v1.DeleteUserRequest, emptypb.Empty]
	searchUsers             *connect.Client[v1.SearchUsersRequest, v1.SearchUsersResponse]
	changeUserPassword      *connect.Client[v1.ChangeUserPasswordRequest, emptypb.Empty]
	createRole              *connect.Client[v1.CreateRoleRequest, v1.Role]
	getRole                 *connect.Client[v1.GetRoleRequest, v1.Role]
	getRoleByName           *connect.Client[v1.GetRoleByNameRequest, v1.Role]
	updateRole              *connect.Client[v1.UpdateRoleRequest, v1.Role]
	deleteRole              *connect.Client[v1.DeleteRoleRequest, emptypb.Empty]
	searchRoles             *connect.Client[v1.SearchRolesRequest, v1.SearchRolesResponse]
	addRoleInheritance      *connect.Client[v1.AddRoleInheritanceRequest, emptypb.Empty]
	removeRoleInheritance   *connect.Client[v1.RemoveRoleInheritanceRequest, emptypb.Empty]
	getParentRoles          *connect.Client[v1.GetParentRolesRequest, v1.GetParentRolesResponse]
	getChildRoles           *connect.Client[v1.GetChildRolesRequest, v1.GetChildRolesResponse]
	getAllParentRoles       *connect.Client[v1.GetAllParentRolesRequest, v1.GetAllParentRolesResponse]
	getAllChildRoles        *connect.Client[v1.GetAllChildRolesRequest, v1.GetAllChildRolesResponse]
	createRoleGroup         *connect.Client[v1.CreateRoleGroupRequest, v1.RoleGroup]
	getRoleGroup            *connect.Client[v1.GetRoleGroupRequest, v1.RoleGroup]
	getRoleGroupByName      *connect.Client[v1.GetRoleGroupByNameRequest, v1.RoleGroup]
	updateRoleGroup         *connect.Client[v1.UpdateRoleGroupRequest, v1.RoleGroup]
	deleteRoleGroup         *connect.Client[v1.DeleteRoleGroupRequest, emptypb.Empty]
	searchRoleGroups        *connect.Client[v1.SearchRoleGroupsRequest, v1.SearchRoleGroupsResponse]
	addUserToRoleGroup      *connect.Client[v1.AddUserToRoleGroupRequest, emptypb.Empty]
	removeUserFromRoleGroup *connect.Client[v1.RemoveUserFromRoleGroupRequest, emptypb.Empty]
	getRoleGroupsForUser    *connect.Client[v1.GetRoleGroupsForUserRequest, v1.GetRoleGroupsForUserResponse]
	getUsersInRoleGroup     *connect.Client[v1.GetUsersInRoleGroupRequest, v1.GetUsersInRoleGroupResponse]
	assignRoleToUser        *connect.Client[v1.AssignRoleToUserRequest, emptypb.Empty]
	unassignRoleFromUser    *connect.Client[v1.UnassignRoleFromUserRequest, emptypb.Empty]
	getRolesForUser         *connect.Client[v1.GetRolesForUserRequest, v1.GetRolesForUserResponse]
	getPermissionsForRole   *connect.Client[v1.GetPermissionsForRoleRequest, v1.GetPermissionsForRoleResponse]
}

// CreateUser calls pilab.cloud.director.v1.ManagementService.CreateUser.
func (c *managementServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.User], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls pilab.cloud.director.v1.ManagementService.GetUser.
func (c *managementServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.User], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetUserByUsername calls pilab.cloud.director.v1.ManagementService.GetUserByUsername.
func (c *managementServiceClient) GetUserByUsername(ctx context.Context, req *connect.Request[v1.GetUserByUsernameRequest]) (*connect.Response[v1.User], error) {
	return c.getUserByUsername.CallUnary(ctx, req)
}

// GetUserByEmail calls pilab.cloud.director.v1.ManagementService.GetUserByEmail.
func (c *managementServiceClient) GetUserByEmail(ctx context.Context, req *connect.Request[v1.GetUserByEmailRequest]) (*connect.Response[v1.User], error) {
	return c.getUserByEmail.CallUnary(ctx, req)
}

// UpdateUser calls pilab.cloud.director.v1.ManagementService.UpdateUser.
func (c *managementServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.User], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls pilab.cloud.director.v1.ManagementService.DeleteUser.
func (c *managementServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// SearchUsers calls pilab.cloud.director.v1.ManagementService.SearchUsers.
func (c *managementServiceClient) SearchUsers(ctx context.Context, req *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error) {
	return c.searchUsers.CallUnary(ctx, req)
}

// ChangeUserPassword calls pilab.cloud.director.v1.ManagementService.ChangeUserPassword.
func (c *managementServiceClient) ChangeUserPassword(ctx context.Context, req *connect.Request[v1.ChangeUserPasswordRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.changeUserPassword.CallUnary(ctx, req)
}

// CreateRole calls pilab.cloud.director.v1.ManagementService.CreateRole.
func (c *managementServiceClient) CreateRole(ctx context.Context, req *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.Role], error) {
	return c.createRole.CallUnary(ctx, req)
}

// GetRole calls pilab.cloud.director.v1.ManagementService.GetRole.
func (c *managementServiceClient) GetRole(ctx context.Context, req *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.Role], error) {
	return c.getRole.CallUnary(ctx, req)
}

// GetRoleByName calls pilab.cloud.director.v1.ManagementService.GetRoleByName.
func (c *managementServiceClient) GetRoleByName(ctx context.Context, req *connect.Request[v1.GetRoleByNameRequest]) (*connect.Response[v1.Role], error) {
	return c.getRoleByName.CallUnary(ctx, req)
}

// UpdateRole calls pilab.cloud.director.v1.ManagementService.UpdateRole.
func (c *managementServiceClient) UpdateRole(ctx context.Context, req *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.Role], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls pilab.cloud.director.v1.ManagementService.DeleteRole.
func (c *managementServiceClient) DeleteRole(ctx context.Context, req *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// SearchRoles calls pilab.cloud.director.v1.ManagementService.SearchRoles.
func (c *managementServiceClient) SearchRoles(ctx context.Context, req *connect.Request[v1.SearchRolesRequest]) (*connect.Response[v1.SearchRolesResponse], error) {
	return c.searchRoles.CallUnary(ctx, req)
}

// AddRoleInheritance calls pilab.cloud.director.v1.ManagementService.AddRoleInheritance.
func (c *managementServiceClient) AddRoleInheritance(ctx context.Context, req *connect.Request[v1.AddRoleInheritanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addRoleInheritance.CallUnary(ctx, req)
}

// RemoveRoleInheritance calls pilab.cloud.director.v1.ManagementService.RemoveRoleInheritance.
func (c *managementServiceClient) RemoveRoleInheritance(ctx context.Context, req *connect.Request[v1.RemoveRoleInheritanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeRoleInheritance.CallUnary(ctx, req)
}

// GetParentRoles calls pilab.cloud.director.v1.ManagementService.GetParentRoles.
func (c *managementServiceClient) GetParentRoles(ctx context.Context, req *connect.Request[v1.GetParentRolesRequest]) (*connect.Response[v1.GetParentRolesResponse], error) {
	return c.getParentRoles.CallUnary(ctx, req)
}

// GetChildRoles calls pilab.cloud.director.v1.ManagementService.GetChildRoles.
func (c *managementServiceClient) GetChildRoles(ctx context.Context, req *connect.Request[v1.GetChildRolesRequest]) (*connect.Response[v1.GetChildRolesResponse], error) {
	return c.getChildRoles.CallUnary(ctx, req)
}

// GetAllParentRoles calls pilab.cloud.director.v1.ManagementService.GetAllParentRoles.
func (c *managementServiceClient) GetAllParentRoles(ctx context.Context, req *connect.Request[v1.GetAllParentRolesRequest]) (*connect.Response[v1.GetAllParentRolesResponse], error) {
	return c.getAllParentRoles.CallUnary(ctx, req)
}

// GetAllChildRoles calls pilab.cloud.director.v1.ManagementService.GetAllChildRoles.
func (c *managementServiceClient) GetAllChildRoles(ctx context.Context, req *connect.Request[v1.GetAllChildRolesRequest]) (*connect.Response[v1.GetAllChildRolesResponse], error) {
	return c.getAllChildRoles.CallUnary(ctx, req)
}

// CreateRoleGroup calls pilab.cloud.director.v1.ManagementService.CreateRoleGroup.
func (c *managementServiceClient) CreateRoleGroup(ctx context.Context, req *connect.Request[v1.CreateRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error) {
	return c.createRoleGroup.CallUnary(ctx, req)
}

// GetRoleGroup calls pilab.cloud.director.v1.ManagementService.GetRoleGroup.
func (c *managementServiceClient) GetRoleGroup(ctx context.Context, req *connect.Request[v1.GetRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error) {
	return c.getRoleGroup.CallUnary(ctx, req)
}

// GetRoleGroupByName calls pilab.cloud.director.v1.ManagementService.GetRoleGroupByName.
func (c *managementServiceClient) GetRoleGroupByName(ctx context.Context, req *connect.Request[v1.GetRoleGroupByNameRequest]) (*connect.Response[v1.RoleGroup], error) {
	return c.getRoleGroupByName.CallUnary(ctx, req)
}

// UpdateRoleGroup calls pilab.cloud.director.v1.ManagementService.UpdateRoleGroup.
func (c *managementServiceClient) UpdateRoleGroup(ctx context.Context, req *connect.Request[v1.UpdateRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error) {
	return c.updateRoleGroup.CallUnary(ctx, req)
}

// DeleteRoleGroup calls pilab.cloud.director.v1.ManagementService.DeleteRoleGroup.
func (c *managementServiceClient) DeleteRoleGroup(ctx context.Context, req *connect.Request[v1.DeleteRoleGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRoleGroup.CallUnary(ctx, req)
}

// SearchRoleGroups calls pilab.cloud.director.v1.ManagementService.SearchRoleGroups.
func (c *managementServiceClient) SearchRoleGroups(ctx context.Context, req *connect.Request[v1.SearchRoleGroupsRequest]) (*connect.Response[v1.SearchRoleGroupsResponse], error) {
	return c.searchRoleGroups.CallUnary(ctx, req)
}

// AddUserToRoleGroup calls pilab.cloud.director.v1.ManagementService.AddUserToRoleGroup.
func (c *managementServiceClient) AddUserToRoleGroup(ctx context.Context, req *connect.Request[v1.AddUserToRoleGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addUserToRoleGroup.CallUnary(ctx, req)
}

// RemoveUserFromRoleGroup calls pilab.cloud.director.v1.ManagementService.RemoveUserFromRoleGroup.
func (c *managementServiceClient) RemoveUserFromRoleGroup(ctx context.Context, req *connect.Request[v1.RemoveUserFromRoleGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeUserFromRoleGroup.CallUnary(ctx, req)
}

// GetRoleGroupsForUser calls pilab.cloud.director.v1.ManagementService.GetRoleGroupsForUser.
func (c *managementServiceClient) GetRoleGroupsForUser(ctx context.Context, req *connect.Request[v1.GetRoleGroupsForUserRequest]) (*connect.Response[v1.GetRoleGroupsForUserResponse], error) {
	return c.getRoleGroupsForUser.CallUnary(ctx, req)
}

// GetUsersInRoleGroup calls pilab.cloud.director.v1.ManagementService.GetUsersInRoleGroup.
func (c *managementServiceClient) GetUsersInRoleGroup(ctx context.Context, req *connect.Request[v1.GetUsersInRoleGroupRequest]) (*connect.Response[v1.GetUsersInRoleGroupResponse], error) {
	return c.getUsersInRoleGroup.CallUnary(ctx, req)
}

// AssignRoleToUser calls pilab.cloud.director.v1.ManagementService.AssignRoleToUser.
func (c *managementServiceClient) AssignRoleToUser(ctx context.Context, req *connect.Request[v1.AssignRoleToUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.assignRoleToUser.CallUnary(ctx, req)
}

// UnassignRoleFromUser calls pilab.cloud.director.v1.ManagementService.UnassignRoleFromUser.
func (c *managementServiceClient) UnassignRoleFromUser(ctx context.Context, req *connect.Request[v1.UnassignRoleFromUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.unassignRoleFromUser.CallUnary(ctx, req)
}

// GetRolesForUser calls pilab.cloud.director.v1.ManagementService.GetRolesForUser.
func (c *managementServiceClient) GetRolesForUser(ctx context.Context, req *connect.Request[v1.GetRolesForUserRequest]) (*connect.Response[v1.GetRolesForUserResponse], error) {
	return c.getRolesForUser.CallUnary(ctx, req)
}

// GetPermissionsForRole calls pilab.cloud.director.v1.ManagementService.GetPermissionsForRole.
func (c *managementServiceClient) GetPermissionsForRole(ctx context.Context, req *connect.Request[v1.GetPermissionsForRoleRequest]) (*connect.Response[v1.GetPermissionsForRoleResponse], error) {
	return c.getPermissionsForRole.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the pilab.cloud.director.v1.ManagementService
// service.
type ManagementServiceHandler interface {
	// User Management
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.User], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.User], error)
	GetUserByUsername(context.Context, *connect.Request[v1.GetUserByUsernameRequest]) (*connect.Response[v1.User], error)
	GetUserByEmail(context.Context, *connect.Request[v1.GetUserByEmailRequest]) (*connect.Response[v1.User], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.User], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error)
	SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error)
	ChangeUserPassword(context.Context, *connect.Request[v1.ChangeUserPasswordRequest]) (*connect.Response[emptypb.Empty], error)
	// Role Management
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.Role], error)
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.Role], error)
	GetRoleByName(context.Context, *connect.Request[v1.GetRoleByNameRequest]) (*connect.Response[v1.Role], error)
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.Role], error)
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[emptypb.Empty], error)
	SearchRoles(context.Context, *connect.Request[v1.SearchRolesRequest]) (*connect.Response[v1.SearchRolesResponse], error)
	// Role Inheritance
	AddRoleInheritance(context.Context, *connect.Request[v1.AddRoleInheritanceRequest]) (*connect.Response[emptypb.Empty], error)
	RemoveRoleInheritance(context.Context, *connect.Request[v1.RemoveRoleInheritanceRequest]) (*connect.Response[emptypb.Empty], error)
	GetParentRoles(context.Context, *connect.Request[v1.GetParentRolesRequest]) (*connect.Response[v1.GetParentRolesResponse], error)
	GetChildRoles(context.Context, *connect.Request[v1.GetChildRolesRequest]) (*connect.Response[v1.GetChildRolesResponse], error)
	GetAllParentRoles(context.Context, *connect.Request[v1.GetAllParentRolesRequest]) (*connect.Response[v1.GetAllParentRolesResponse], error)
	GetAllChildRoles(context.Context, *connect.Request[v1.GetAllChildRolesRequest]) (*connect.Response[v1.GetAllChildRolesResponse], error)
	// Role Group Management
	CreateRoleGroup(context.Context, *connect.Request[v1.CreateRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error)
	GetRoleGroup(context.Context, *connect.Request[v1.GetRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error)
	GetRoleGroupByName(context.Context, *connect.Request[v1.GetRoleGroupByNameRequest]) (*connect.Response[v1.RoleGroup], error)
	UpdateRoleGroup(context.Context, *connect.Request[v1.UpdateRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error)
	DeleteRoleGroup(context.Context, *connect.Request[v1.DeleteRoleGroupRequest]) (*connect.Response[emptypb.Empty], error)
	SearchRoleGroups(context.Context, *connect.Request[v1.SearchRoleGroupsRequest]) (*connect.Response[v1.SearchRoleGroupsResponse], error)
	// Role Group Membership
	AddUserToRoleGroup(context.Context, *connect.Request[v1.AddUserToRoleGroupRequest]) (*connect.Response[emptypb.Empty], error)
	RemoveUserFromRoleGroup(context.Context, *connect.Request[v1.RemoveUserFromRoleGroupRequest]) (*connect.Response[emptypb.Empty], error)
	GetRoleGroupsForUser(context.Context, *connect.Request[v1.GetRoleGroupsForUserRequest]) (*connect.Response[v1.GetRoleGroupsForUserResponse], error)
	GetUsersInRoleGroup(context.Context, *connect.Request[v1.GetUsersInRoleGroupRequest]) (*connect.Response[v1.GetUsersInRoleGroupResponse], error)
	// Assign/Unassign Roles to Users directly
	AssignRoleToUser(context.Context, *connect.Request[v1.AssignRoleToUserRequest]) (*connect.Response[emptypb.Empty], error)
	UnassignRoleFromUser(context.Context, *connect.Request[v1.UnassignRoleFromUserRequest]) (*connect.Response[emptypb.Empty], error)
	GetRolesForUser(context.Context, *connect.Request[v1.GetRolesForUserRequest]) (*connect.Response[v1.GetRolesForUserResponse], error)
	// Permissions
	GetPermissionsForRole(context.Context, *connect.Request[v1.GetPermissionsForRoleRequest]) (*connect.Response[v1.GetPermissionsForRoleResponse], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managementServiceCreateUserHandler := connect.NewUnaryHandler(
		ManagementServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(managementServiceCreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetUserHandler := connect.NewUnaryHandler(
		ManagementServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(managementServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetUserByUsernameHandler := connect.NewUnaryHandler(
		ManagementServiceGetUserByUsernameProcedure,
		svc.GetUserByUsername,
		connect.WithSchema(managementServiceGetUserByUsernameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetUserByEmailHandler := connect.NewUnaryHandler(
		ManagementServiceGetUserByEmailProcedure,
		svc.GetUserByEmail,
		connect.WithSchema(managementServiceGetUserByEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceUpdateUserHandler := connect.NewUnaryHandler(
		ManagementServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(managementServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceDeleteUserHandler := connect.NewUnaryHandler(
		ManagementServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(managementServiceDeleteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceSearchUsersHandler := connect.NewUnaryHandler(
		ManagementServiceSearchUsersProcedure,
		svc.SearchUsers,
		connect.WithSchema(managementServiceSearchUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceChangeUserPasswordHandler := connect.NewUnaryHandler(
		ManagementServiceChangeUserPasswordProcedure,
		svc.ChangeUserPassword,
		connect.WithSchema(managementServiceChangeUserPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceCreateRoleHandler := connect.NewUnaryHandler(
		ManagementServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(managementServiceCreateRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetRoleHandler := connect.NewUnaryHandler(
		ManagementServiceGetRoleProcedure,
		svc.GetRole,
		connect.WithSchema(managementServiceGetRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetRoleByNameHandler := connect.NewUnaryHandler(
		ManagementServiceGetRoleByNameProcedure,
		svc.GetRoleByName,
		connect.WithSchema(managementServiceGetRoleByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceUpdateRoleHandler := connect.NewUnaryHandler(
		ManagementServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(managementServiceUpdateRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceDeleteRoleHandler := connect.NewUnaryHandler(
		ManagementServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(managementServiceDeleteRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceSearchRolesHandler := connect.NewUnaryHandler(
		ManagementServiceSearchRolesProcedure,
		svc.SearchRoles,
		connect.WithSchema(managementServiceSearchRolesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceAddRoleInheritanceHandler := connect.NewUnaryHandler(
		ManagementServiceAddRoleInheritanceProcedure,
		svc.AddRoleInheritance,
		connect.WithSchema(managementServiceAddRoleInheritanceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceRemoveRoleInheritanceHandler := connect.NewUnaryHandler(
		ManagementServiceRemoveRoleInheritanceProcedure,
		svc.RemoveRoleInheritance,
		connect.WithSchema(managementServiceRemoveRoleInheritanceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetParentRolesHandler := connect.NewUnaryHandler(
		ManagementServiceGetParentRolesProcedure,
		svc.GetParentRoles,
		connect.WithSchema(managementServiceGetParentRolesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetChildRolesHandler := connect.NewUnaryHandler(
		ManagementServiceGetChildRolesProcedure,
		svc.GetChildRoles,
		connect.WithSchema(managementServiceGetChildRolesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetAllParentRolesHandler := connect.NewUnaryHandler(
		ManagementServiceGetAllParentRolesProcedure,
		svc.GetAllParentRoles,
		connect.WithSchema(managementServiceGetAllParentRolesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetAllChildRolesHandler := connect.NewUnaryHandler(
		ManagementServiceGetAllChildRolesProcedure,
		svc.GetAllChildRoles,
		connect.WithSchema(managementServiceGetAllChildRolesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceCreateRoleGroupHandler := connect.NewUnaryHandler(
		ManagementServiceCreateRoleGroupProcedure,
		svc.CreateRoleGroup,
		connect.WithSchema(managementServiceCreateRoleGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetRoleGroupHandler := connect.NewUnaryHandler(
		ManagementServiceGetRoleGroupProcedure,
		svc.GetRoleGroup,
		connect.WithSchema(managementServiceGetRoleGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetRoleGroupByNameHandler := connect.NewUnaryHandler(
		ManagementServiceGetRoleGroupByNameProcedure,
		svc.GetRoleGroupByName,
		connect.WithSchema(managementServiceGetRoleGroupByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceUpdateRoleGroupHandler := connect.NewUnaryHandler(
		ManagementServiceUpdateRoleGroupProcedure,
		svc.UpdateRoleGroup,
		connect.WithSchema(managementServiceUpdateRoleGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceDeleteRoleGroupHandler := connect.NewUnaryHandler(
		ManagementServiceDeleteRoleGroupProcedure,
		svc.DeleteRoleGroup,
		connect.WithSchema(managementServiceDeleteRoleGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceSearchRoleGroupsHandler := connect.NewUnaryHandler(
		ManagementServiceSearchRoleGroupsProcedure,
		svc.SearchRoleGroups,
		connect.WithSchema(managementServiceSearchRoleGroupsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceAddUserToRoleGroupHandler := connect.NewUnaryHandler(
		ManagementServiceAddUserToRoleGroupProcedure,
		svc.AddUserToRoleGroup,
		connect.WithSchema(managementServiceAddUserToRoleGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceRemoveUserFromRoleGroupHandler := connect.NewUnaryHandler(
		ManagementServiceRemoveUserFromRoleGroupProcedure,
		svc.RemoveUserFromRoleGroup,
		connect.WithSchema(managementServiceRemoveUserFromRoleGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetRoleGroupsForUserHandler := connect.NewUnaryHandler(
		ManagementServiceGetRoleGroupsForUserProcedure,
		svc.GetRoleGroupsForUser,
		connect.WithSchema(managementServiceGetRoleGroupsForUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetUsersInRoleGroupHandler := connect.NewUnaryHandler(
		ManagementServiceGetUsersInRoleGroupProcedure,
		svc.GetUsersInRoleGroup,
		connect.WithSchema(managementServiceGetUsersInRoleGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceAssignRoleToUserHandler := connect.NewUnaryHandler(
		ManagementServiceAssignRoleToUserProcedure,
		svc.AssignRoleToUser,
		connect.WithSchema(managementServiceAssignRoleToUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceUnassignRoleFromUserHandler := connect.NewUnaryHandler(
		ManagementServiceUnassignRoleFromUserProcedure,
		svc.UnassignRoleFromUser,
		connect.WithSchema(managementServiceUnassignRoleFromUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetRolesForUserHandler := connect.NewUnaryHandler(
		ManagementServiceGetRolesForUserProcedure,
		svc.GetRolesForUser,
		connect.WithSchema(managementServiceGetRolesForUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetPermissionsForRoleHandler := connect.NewUnaryHandler(
		ManagementServiceGetPermissionsForRoleProcedure,
		svc.GetPermissionsForRole,
		connect.WithSchema(managementServiceGetPermissionsForRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.director.v1.ManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementServiceCreateUserProcedure:
			managementServiceCreateUserHandler.ServeHTTP(w, r)
		case ManagementServiceGetUserProcedure:
			managementServiceGetUserHandler.ServeHTTP(w, r)
		case ManagementServiceGetUserByUsernameProcedure:
			managementServiceGetUserByUsernameHandler.ServeHTTP(w, r)
		case ManagementServiceGetUserByEmailProcedure:
			managementServiceGetUserByEmailHandler.ServeHTTP(w, r)
		case ManagementServiceUpdateUserProcedure:
			managementServiceUpdateUserHandler.ServeHTTP(w, r)
		case ManagementServiceDeleteUserProcedure:
			managementServiceDeleteUserHandler.ServeHTTP(w, r)
		case ManagementServiceSearchUsersProcedure:
			managementServiceSearchUsersHandler.ServeHTTP(w, r)
		case ManagementServiceChangeUserPasswordProcedure:
			managementServiceChangeUserPasswordHandler.ServeHTTP(w, r)
		case ManagementServiceCreateRoleProcedure:
			managementServiceCreateRoleHandler.ServeHTTP(w, r)
		case ManagementServiceGetRoleProcedure:
			managementServiceGetRoleHandler.ServeHTTP(w, r)
		case ManagementServiceGetRoleByNameProcedure:
			managementServiceGetRoleByNameHandler.ServeHTTP(w, r)
		case ManagementServiceUpdateRoleProcedure:
			managementServiceUpdateRoleHandler.ServeHTTP(w, r)
		case ManagementServiceDeleteRoleProcedure:
			managementServiceDeleteRoleHandler.ServeHTTP(w, r)
		case ManagementServiceSearchRolesProcedure:
			managementServiceSearchRolesHandler.ServeHTTP(w, r)
		case ManagementServiceAddRoleInheritanceProcedure:
			managementServiceAddRoleInheritanceHandler.ServeHTTP(w, r)
		case ManagementServiceRemoveRoleInheritanceProcedure:
			managementServiceRemoveRoleInheritanceHandler.ServeHTTP(w, r)
		case ManagementServiceGetParentRolesProcedure:
			managementServiceGetParentRolesHandler.ServeHTTP(w, r)
		case ManagementServiceGetChildRolesProcedure:
			managementServiceGetChildRolesHandler.ServeHTTP(w, r)
		case ManagementServiceGetAllParentRolesProcedure:
			managementServiceGetAllParentRolesHandler.ServeHTTP(w, r)
		case ManagementServiceGetAllChildRolesProcedure:
			managementServiceGetAllChildRolesHandler.ServeHTTP(w, r)
		case ManagementServiceCreateRoleGroupProcedure:
			managementServiceCreateRoleGroupHandler.ServeHTTP(w, r)
		case ManagementServiceGetRoleGroupProcedure:
			managementServiceGetRoleGroupHandler.ServeHTTP(w, r)
		case ManagementServiceGetRoleGroupByNameProcedure:
			managementServiceGetRoleGroupByNameHandler.ServeHTTP(w, r)
		case ManagementServiceUpdateRoleGroupProcedure:
			managementServiceUpdateRoleGroupHandler.ServeHTTP(w, r)
		case ManagementServiceDeleteRoleGroupProcedure:
			managementServiceDeleteRoleGroupHandler.ServeHTTP(w, r)
		case ManagementServiceSearchRoleGroupsProcedure:
			managementServiceSearchRoleGroupsHandler.ServeHTTP(w, r)
		case ManagementServiceAddUserToRoleGroupProcedure:
			managementServiceAddUserToRoleGroupHandler.ServeHTTP(w, r)
		case ManagementServiceRemoveUserFromRoleGroupProcedure:
			managementServiceRemoveUserFromRoleGroupHandler.ServeHTTP(w, r)
		case ManagementServiceGetRoleGroupsForUserProcedure:
			managementServiceGetRoleGroupsForUserHandler.ServeHTTP(w, r)
		case ManagementServiceGetUsersInRoleGroupProcedure:
			managementServiceGetUsersInRoleGroupHandler.ServeHTTP(w, r)
		case ManagementServiceAssignRoleToUserProcedure:
			managementServiceAssignRoleToUserHandler.ServeHTTP(w, r)
		case ManagementServiceUnassignRoleFromUserProcedure:
			managementServiceUnassignRoleFromUserHandler.ServeHTTP(w, r)
		case ManagementServiceGetRolesForUserProcedure:
			managementServiceGetRolesForUserHandler.ServeHTTP(w, r)
		case ManagementServiceGetPermissionsForRoleProcedure:
			managementServiceGetPermissionsForRoleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.CreateUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetUserByUsername(context.Context, *connect.Request[v1.GetUserByUsernameRequest]) (*connect.Response[v1.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetUserByUsername is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetUserByEmail(context.Context, *connect.Request[v1.GetUserByEmailRequest]) (*connect.Response[v1.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetUserByEmail is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.UpdateUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.DeleteUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) SearchUsers(context.Context, *connect.Request[v1.SearchUsersRequest]) (*connect.Response[v1.SearchUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.SearchUsers is not implemented"))
}

func (UnimplementedManagementServiceHandler) ChangeUserPassword(context.Context, *connect.Request[v1.ChangeUserPasswordRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.ChangeUserPassword is not implemented"))
}

func (UnimplementedManagementServiceHandler) CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.Role], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.CreateRole is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.Role], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetRole is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetRoleByName(context.Context, *connect.Request[v1.GetRoleByNameRequest]) (*connect.Response[v1.Role], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetRoleByName is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.Role], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.UpdateRole is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.DeleteRole is not implemented"))
}

func (UnimplementedManagementServiceHandler) SearchRoles(context.Context, *connect.Request[v1.SearchRolesRequest]) (*connect.Response[v1.SearchRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.SearchRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddRoleInheritance(context.Context, *connect.Request[v1.AddRoleInheritanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.AddRoleInheritance is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveRoleInheritance(context.Context, *connect.Request[v1.RemoveRoleInheritanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.RemoveRoleInheritance is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetParentRoles(context.Context, *connect.Request[v1.GetParentRolesRequest]) (*connect.Response[v1.GetParentRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetParentRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetChildRoles(context.Context, *connect.Request[v1.GetChildRolesRequest]) (*connect.Response[v1.GetChildRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetChildRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetAllParentRoles(context.Context, *connect.Request[v1.GetAllParentRolesRequest]) (*connect.Response[v1.GetAllParentRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetAllParentRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetAllChildRoles(context.Context, *connect.Request[v1.GetAllChildRolesRequest]) (*connect.Response[v1.GetAllChildRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetAllChildRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) CreateRoleGroup(context.Context, *connect.Request[v1.CreateRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.CreateRoleGroup is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetRoleGroup(context.Context, *connect.Request[v1.GetRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetRoleGroup is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetRoleGroupByName(context.Context, *connect.Request[v1.GetRoleGroupByNameRequest]) (*connect.Response[v1.RoleGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetRoleGroupByName is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateRoleGroup(context.Context, *connect.Request[v1.UpdateRoleGroupRequest]) (*connect.Response[v1.RoleGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.UpdateRoleGroup is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeleteRoleGroup(context.Context, *connect.Request[v1.DeleteRoleGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.DeleteRoleGroup is not implemented"))
}

func (UnimplementedManagementServiceHandler) SearchRoleGroups(context.Context, *connect.Request[v1.SearchRoleGroupsRequest]) (*connect.Response[v1.SearchRoleGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.SearchRoleGroups is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddUserToRoleGroup(context.Context, *connect.Request[v1.AddUserToRoleGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.AddUserToRoleGroup is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveUserFromRoleGroup(context.Context, *connect.Request[v1.RemoveUserFromRoleGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.RemoveUserFromRoleGroup is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetRoleGroupsForUser(context.Context, *connect.Request[v1.GetRoleGroupsForUserRequest]) (*connect.Response[v1.GetRoleGroupsForUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetRoleGroupsForUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetUsersInRoleGroup(context.Context, *connect.Request[v1.GetUsersInRoleGroupRequest]) (*connect.Response[v1.GetUsersInRoleGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetUsersInRoleGroup is not implemented"))
}

func (UnimplementedManagementServiceHandler) AssignRoleToUser(context.Context, *connect.Request[v1.AssignRoleToUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.AssignRoleToUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) UnassignRoleFromUser(context.Context, *connect.Request[v1.UnassignRoleFromUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.UnassignRoleFromUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetRolesForUser(context.Context, *connect.Request[v1.GetRolesForUserRequest]) (*connect.Response[v1.GetRolesForUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetRolesForUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetPermissionsForRole(context.Context, *connect.Request[v1.GetPermissionsForRoleRequest]) (*connect.Response[v1.GetPermissionsForRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.ManagementService.GetPermissionsForRole is not implemented"))
}
