// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/frontend/v1/host_service.proto

package frontendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/frontend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HostServiceName is the fully-qualified name of the HostService service.
	HostServiceName = "pilab.cloud.director.v1.HostService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HostServiceGetHostOverviewProcedure is the fully-qualified name of the HostService's
	// GetHostOverview RPC.
	HostServiceGetHostOverviewProcedure = "/pilab.cloud.director.v1.HostService/GetHostOverview"
	// HostServiceGetMonitoringDataProcedure is the fully-qualified name of the HostService's
	// GetMonitoringData RPC.
	HostServiceGetMonitoringDataProcedure = "/pilab.cloud.director.v1.HostService/GetMonitoringData"
	// HostServiceListHostVMsProcedure is the fully-qualified name of the HostService's ListHostVMs RPC.
	HostServiceListHostVMsProcedure = "/pilab.cloud.director.v1.HostService/ListHostVMs"
	// HostServiceGetHostPermissionsProcedure is the fully-qualified name of the HostService's
	// GetHostPermissions RPC.
	HostServiceGetHostPermissionsProcedure = "/pilab.cloud.director.v1.HostService/GetHostPermissions"
	// HostServiceListHostDatastoresProcedure is the fully-qualified name of the HostService's
	// ListHostDatastores RPC.
	HostServiceListHostDatastoresProcedure = "/pilab.cloud.director.v1.HostService/ListHostDatastores"
	// HostServiceMountDatastoreProcedure is the fully-qualified name of the HostService's
	// MountDatastore RPC.
	HostServiceMountDatastoreProcedure = "/pilab.cloud.director.v1.HostService/MountDatastore"
	// HostServiceUnmountDatastoreProcedure is the fully-qualified name of the HostService's
	// UnmountDatastore RPC.
	HostServiceUnmountDatastoreProcedure = "/pilab.cloud.director.v1.HostService/UnmountDatastore"
	// HostServiceGetHostSystemSettingsProcedure is the fully-qualified name of the HostService's
	// GetHostSystemSettings RPC.
	HostServiceGetHostSystemSettingsProcedure = "/pilab.cloud.director.v1.HostService/GetHostSystemSettings"
	// HostServiceUpdateNTPConfigProcedure is the fully-qualified name of the HostService's
	// UpdateNTPConfig RPC.
	HostServiceUpdateNTPConfigProcedure = "/pilab.cloud.director.v1.HostService/UpdateNTPConfig"
	// HostServiceUpdateTimezoneProcedure is the fully-qualified name of the HostService's
	// UpdateTimezone RPC.
	HostServiceUpdateTimezoneProcedure = "/pilab.cloud.director.v1.HostService/UpdateTimezone"
	// HostServiceUpdateDNSSettingsProcedure is the fully-qualified name of the HostService's
	// UpdateDNSSettings RPC.
	HostServiceUpdateDNSSettingsProcedure = "/pilab.cloud.director.v1.HostService/UpdateDNSSettings"
	// HostServiceUpdateRoutingSettingsProcedure is the fully-qualified name of the HostService's
	// UpdateRoutingSettings RPC.
	HostServiceUpdateRoutingSettingsProcedure = "/pilab.cloud.director.v1.HostService/UpdateRoutingSettings"
	// HostServiceGetMaintenanceModeStatusProcedure is the fully-qualified name of the HostService's
	// GetMaintenanceModeStatus RPC.
	HostServiceGetMaintenanceModeStatusProcedure = "/pilab.cloud.director.v1.HostService/GetMaintenanceModeStatus"
	// HostServiceEnterMaintenanceModeProcedure is the fully-qualified name of the HostService's
	// EnterMaintenanceMode RPC.
	HostServiceEnterMaintenanceModeProcedure = "/pilab.cloud.director.v1.HostService/EnterMaintenanceMode"
	// HostServiceExitMaintenanceModeProcedure is the fully-qualified name of the HostService's
	// ExitMaintenanceMode RPC.
	HostServiceExitMaintenanceModeProcedure = "/pilab.cloud.director.v1.HostService/ExitMaintenanceMode"
	// HostServiceListHostNetworkInterfacesProcedure is the fully-qualified name of the HostService's
	// ListHostNetworkInterfaces RPC.
	HostServiceListHostNetworkInterfacesProcedure = "/pilab.cloud.director.v1.HostService/ListHostNetworkInterfaces"
	// HostServiceEnableNetworkInterfaceProcedure is the fully-qualified name of the HostService's
	// EnableNetworkInterface RPC.
	HostServiceEnableNetworkInterfaceProcedure = "/pilab.cloud.director.v1.HostService/EnableNetworkInterface"
	// HostServiceDisableNetworkInterfaceProcedure is the fully-qualified name of the HostService's
	// DisableNetworkInterface RPC.
	HostServiceDisableNetworkInterfaceProcedure = "/pilab.cloud.director.v1.HostService/DisableNetworkInterface"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	hostServiceServiceDescriptor                         = v1.File_pilab_cloud_frontend_v1_host_service_proto.Services().ByName("HostService")
	hostServiceGetHostOverviewMethodDescriptor           = hostServiceServiceDescriptor.Methods().ByName("GetHostOverview")
	hostServiceGetMonitoringDataMethodDescriptor         = hostServiceServiceDescriptor.Methods().ByName("GetMonitoringData")
	hostServiceListHostVMsMethodDescriptor               = hostServiceServiceDescriptor.Methods().ByName("ListHostVMs")
	hostServiceGetHostPermissionsMethodDescriptor        = hostServiceServiceDescriptor.Methods().ByName("GetHostPermissions")
	hostServiceListHostDatastoresMethodDescriptor        = hostServiceServiceDescriptor.Methods().ByName("ListHostDatastores")
	hostServiceMountDatastoreMethodDescriptor            = hostServiceServiceDescriptor.Methods().ByName("MountDatastore")
	hostServiceUnmountDatastoreMethodDescriptor          = hostServiceServiceDescriptor.Methods().ByName("UnmountDatastore")
	hostServiceGetHostSystemSettingsMethodDescriptor     = hostServiceServiceDescriptor.Methods().ByName("GetHostSystemSettings")
	hostServiceUpdateNTPConfigMethodDescriptor           = hostServiceServiceDescriptor.Methods().ByName("UpdateNTPConfig")
	hostServiceUpdateTimezoneMethodDescriptor            = hostServiceServiceDescriptor.Methods().ByName("UpdateTimezone")
	hostServiceUpdateDNSSettingsMethodDescriptor         = hostServiceServiceDescriptor.Methods().ByName("UpdateDNSSettings")
	hostServiceUpdateRoutingSettingsMethodDescriptor     = hostServiceServiceDescriptor.Methods().ByName("UpdateRoutingSettings")
	hostServiceGetMaintenanceModeStatusMethodDescriptor  = hostServiceServiceDescriptor.Methods().ByName("GetMaintenanceModeStatus")
	hostServiceEnterMaintenanceModeMethodDescriptor      = hostServiceServiceDescriptor.Methods().ByName("EnterMaintenanceMode")
	hostServiceExitMaintenanceModeMethodDescriptor       = hostServiceServiceDescriptor.Methods().ByName("ExitMaintenanceMode")
	hostServiceListHostNetworkInterfacesMethodDescriptor = hostServiceServiceDescriptor.Methods().ByName("ListHostNetworkInterfaces")
	hostServiceEnableNetworkInterfaceMethodDescriptor    = hostServiceServiceDescriptor.Methods().ByName("EnableNetworkInterface")
	hostServiceDisableNetworkInterfaceMethodDescriptor   = hostServiceServiceDescriptor.Methods().ByName("DisableNetworkInterface")
)

// HostServiceClient is a client for the pilab.cloud.director.v1.HostService service.
type HostServiceClient interface {
	// Host Overview
	GetHostOverview(context.Context, *connect.Request[v1.GetHostOverviewRequest]) (*connect.Response[v1.HostOverview], error)
	// Monitoring
	GetMonitoringData(context.Context, *connect.Request[v1.GetMonitoringDataRequest]) (*connect.Response[v1.MonitoringDataResponse], error)
	// VMs
	ListHostVMs(context.Context, *connect.Request[v1.ListHostVMsRequest]) (*connect.Response[v1.HostVMsResponse], error)
	// Permissions
	GetHostPermissions(context.Context, *connect.Request[v1.GetHostPermissionsRequest]) (*connect.Response[v1.HostPermissionsResponse], error)
	// Storage/Datastores
	ListHostDatastores(context.Context, *connect.Request[v1.ListHostDatastoresRequest]) (*connect.Response[v1.HostDatastoresResponse], error)
	MountDatastore(context.Context, *connect.Request[v1.MountDatastoreRequest]) (*connect.Response[v1.MountDatastoreResponse], error)
	UnmountDatastore(context.Context, *connect.Request[v1.UnmountDatastoreRequest]) (*connect.Response[v1.UnmountDatastoreResponse], error)
	// System Settings
	GetHostSystemSettings(context.Context, *connect.Request[v1.GetHostSystemSettingsRequest]) (*connect.Response[v1.HostSystemSettingsResponse], error)
	UpdateNTPConfig(context.Context, *connect.Request[v1.UpdateNTPConfigRequest]) (*connect.Response[v1.UpdateNTPConfigResponse], error)
	UpdateTimezone(context.Context, *connect.Request[v1.UpdateTimezoneRequest]) (*connect.Response[v1.UpdateTimezoneResponse], error)
	UpdateDNSSettings(context.Context, *connect.Request[v1.UpdateDNSSettingsRequest]) (*connect.Response[v1.UpdateDNSSettingsResponse], error)
	UpdateRoutingSettings(context.Context, *connect.Request[v1.UpdateRoutingSettingsRequest]) (*connect.Response[v1.UpdateRoutingSettingsResponse], error)
	// Maintenance Mode
	GetMaintenanceModeStatus(context.Context, *connect.Request[v1.GetMaintenanceModeStatusRequest]) (*connect.Response[v1.MaintenanceModeStatusResponse], error)
	EnterMaintenanceMode(context.Context, *connect.Request[v1.EnterMaintenanceModeRequest]) (*connect.Response[v1.EnterMaintenanceModeResponse], error)
	ExitMaintenanceMode(context.Context, *connect.Request[v1.ExitMaintenanceModeRequest]) (*connect.Response[v1.ExitMaintenanceModeResponse], error)
	// Networking/Interfaces
	ListHostNetworkInterfaces(context.Context, *connect.Request[v1.ListHostNetworkInterfacesRequest]) (*connect.Response[v1.HostNetworkInterfacesResponse], error)
	EnableNetworkInterface(context.Context, *connect.Request[v1.EnableNetworkInterfaceRequest]) (*connect.Response[v1.EnableNetworkInterfaceResponse], error)
	DisableNetworkInterface(context.Context, *connect.Request[v1.DisableNetworkInterfaceRequest]) (*connect.Response[v1.DisableNetworkInterfaceResponse], error)
}

// NewHostServiceClient constructs a client for the pilab.cloud.director.v1.HostService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &hostServiceClient{
		getHostOverview: connect.NewClient[v1.GetHostOverviewRequest, v1.HostOverview](
			httpClient,
			baseURL+HostServiceGetHostOverviewProcedure,
			connect.WithSchema(hostServiceGetHostOverviewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMonitoringData: connect.NewClient[v1.GetMonitoringDataRequest, v1.MonitoringDataResponse](
			httpClient,
			baseURL+HostServiceGetMonitoringDataProcedure,
			connect.WithSchema(hostServiceGetMonitoringDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listHostVMs: connect.NewClient[v1.ListHostVMsRequest, v1.HostVMsResponse](
			httpClient,
			baseURL+HostServiceListHostVMsProcedure,
			connect.WithSchema(hostServiceListHostVMsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHostPermissions: connect.NewClient[v1.GetHostPermissionsRequest, v1.HostPermissionsResponse](
			httpClient,
			baseURL+HostServiceGetHostPermissionsProcedure,
			connect.WithSchema(hostServiceGetHostPermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listHostDatastores: connect.NewClient[v1.ListHostDatastoresRequest, v1.HostDatastoresResponse](
			httpClient,
			baseURL+HostServiceListHostDatastoresProcedure,
			connect.WithSchema(hostServiceListHostDatastoresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		mountDatastore: connect.NewClient[v1.MountDatastoreRequest, v1.MountDatastoreResponse](
			httpClient,
			baseURL+HostServiceMountDatastoreProcedure,
			connect.WithSchema(hostServiceMountDatastoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unmountDatastore: connect.NewClient[v1.UnmountDatastoreRequest, v1.UnmountDatastoreResponse](
			httpClient,
			baseURL+HostServiceUnmountDatastoreProcedure,
			connect.WithSchema(hostServiceUnmountDatastoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHostSystemSettings: connect.NewClient[v1.GetHostSystemSettingsRequest, v1.HostSystemSettingsResponse](
			httpClient,
			baseURL+HostServiceGetHostSystemSettingsProcedure,
			connect.WithSchema(hostServiceGetHostSystemSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNTPConfig: connect.NewClient[v1.UpdateNTPConfigRequest, v1.UpdateNTPConfigResponse](
			httpClient,
			baseURL+HostServiceUpdateNTPConfigProcedure,
			connect.WithSchema(hostServiceUpdateNTPConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTimezone: connect.NewClient[v1.UpdateTimezoneRequest, v1.UpdateTimezoneResponse](
			httpClient,
			baseURL+HostServiceUpdateTimezoneProcedure,
			connect.WithSchema(hostServiceUpdateTimezoneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateDNSSettings: connect.NewClient[v1.UpdateDNSSettingsRequest, v1.UpdateDNSSettingsResponse](
			httpClient,
			baseURL+HostServiceUpdateDNSSettingsProcedure,
			connect.WithSchema(hostServiceUpdateDNSSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRoutingSettings: connect.NewClient[v1.UpdateRoutingSettingsRequest, v1.UpdateRoutingSettingsResponse](
			httpClient,
			baseURL+HostServiceUpdateRoutingSettingsProcedure,
			connect.WithSchema(hostServiceUpdateRoutingSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMaintenanceModeStatus: connect.NewClient[v1.GetMaintenanceModeStatusRequest, v1.MaintenanceModeStatusResponse](
			httpClient,
			baseURL+HostServiceGetMaintenanceModeStatusProcedure,
			connect.WithSchema(hostServiceGetMaintenanceModeStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enterMaintenanceMode: connect.NewClient[v1.EnterMaintenanceModeRequest, v1.EnterMaintenanceModeResponse](
			httpClient,
			baseURL+HostServiceEnterMaintenanceModeProcedure,
			connect.WithSchema(hostServiceEnterMaintenanceModeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exitMaintenanceMode: connect.NewClient[v1.ExitMaintenanceModeRequest, v1.ExitMaintenanceModeResponse](
			httpClient,
			baseURL+HostServiceExitMaintenanceModeProcedure,
			connect.WithSchema(hostServiceExitMaintenanceModeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listHostNetworkInterfaces: connect.NewClient[v1.ListHostNetworkInterfacesRequest, v1.HostNetworkInterfacesResponse](
			httpClient,
			baseURL+HostServiceListHostNetworkInterfacesProcedure,
			connect.WithSchema(hostServiceListHostNetworkInterfacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableNetworkInterface: connect.NewClient[v1.EnableNetworkInterfaceRequest, v1.EnableNetworkInterfaceResponse](
			httpClient,
			baseURL+HostServiceEnableNetworkInterfaceProcedure,
			connect.WithSchema(hostServiceEnableNetworkInterfaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableNetworkInterface: connect.NewClient[v1.DisableNetworkInterfaceRequest, v1.DisableNetworkInterfaceResponse](
			httpClient,
			baseURL+HostServiceDisableNetworkInterfaceProcedure,
			connect.WithSchema(hostServiceDisableNetworkInterfaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// hostServiceClient implements HostServiceClient.
type hostServiceClient struct {
	getHostOverview           *connect.Client[v1.GetHostOverviewRequest, v1.HostOverview]
	getMonitoringData         *connect.Client[v1.GetMonitoringDataRequest, v1.MonitoringDataResponse]
	listHostVMs               *connect.Client[v1.ListHostVMsRequest, v1.HostVMsResponse]
	getHostPermissions        *connect.Client[v1.GetHostPermissionsRequest, v1.HostPermissionsResponse]
	listHostDatastores        *connect.Client[v1.ListHostDatastoresRequest, v1.HostDatastoresResponse]
	mountDatastore            *connect.Client[v1.MountDatastoreRequest, v1.MountDatastoreResponse]
	unmountDatastore          *connect.Client[v1.UnmountDatastoreRequest, v1.UnmountDatastoreResponse]
	getHostSystemSettings     *connect.Client[v1.GetHostSystemSettingsRequest, v1.HostSystemSettingsResponse]
	updateNTPConfig           *connect.Client[v1.UpdateNTPConfigRequest, v1.UpdateNTPConfigResponse]
	updateTimezone            *connect.Client[v1.UpdateTimezoneRequest, v1.UpdateTimezoneResponse]
	updateDNSSettings         *connect.Client[v1.UpdateDNSSettingsRequest, v1.UpdateDNSSettingsResponse]
	updateRoutingSettings     *connect.Client[v1.UpdateRoutingSettingsRequest, v1.UpdateRoutingSettingsResponse]
	getMaintenanceModeStatus  *connect.Client[v1.GetMaintenanceModeStatusRequest, v1.MaintenanceModeStatusResponse]
	enterMaintenanceMode      *connect.Client[v1.EnterMaintenanceModeRequest, v1.EnterMaintenanceModeResponse]
	exitMaintenanceMode       *connect.Client[v1.ExitMaintenanceModeRequest, v1.ExitMaintenanceModeResponse]
	listHostNetworkInterfaces *connect.Client[v1.ListHostNetworkInterfacesRequest, v1.HostNetworkInterfacesResponse]
	enableNetworkInterface    *connect.Client[v1.EnableNetworkInterfaceRequest, v1.EnableNetworkInterfaceResponse]
	disableNetworkInterface   *connect.Client[v1.DisableNetworkInterfaceRequest, v1.DisableNetworkInterfaceResponse]
}

// GetHostOverview calls pilab.cloud.director.v1.HostService.GetHostOverview.
func (c *hostServiceClient) GetHostOverview(ctx context.Context, req *connect.Request[v1.GetHostOverviewRequest]) (*connect.Response[v1.HostOverview], error) {
	return c.getHostOverview.CallUnary(ctx, req)
}

// GetMonitoringData calls pilab.cloud.director.v1.HostService.GetMonitoringData.
func (c *hostServiceClient) GetMonitoringData(ctx context.Context, req *connect.Request[v1.GetMonitoringDataRequest]) (*connect.Response[v1.MonitoringDataResponse], error) {
	return c.getMonitoringData.CallUnary(ctx, req)
}

// ListHostVMs calls pilab.cloud.director.v1.HostService.ListHostVMs.
func (c *hostServiceClient) ListHostVMs(ctx context.Context, req *connect.Request[v1.ListHostVMsRequest]) (*connect.Response[v1.HostVMsResponse], error) {
	return c.listHostVMs.CallUnary(ctx, req)
}

// GetHostPermissions calls pilab.cloud.director.v1.HostService.GetHostPermissions.
func (c *hostServiceClient) GetHostPermissions(ctx context.Context, req *connect.Request[v1.GetHostPermissionsRequest]) (*connect.Response[v1.HostPermissionsResponse], error) {
	return c.getHostPermissions.CallUnary(ctx, req)
}

// ListHostDatastores calls pilab.cloud.director.v1.HostService.ListHostDatastores.
func (c *hostServiceClient) ListHostDatastores(ctx context.Context, req *connect.Request[v1.ListHostDatastoresRequest]) (*connect.Response[v1.HostDatastoresResponse], error) {
	return c.listHostDatastores.CallUnary(ctx, req)
}

// MountDatastore calls pilab.cloud.director.v1.HostService.MountDatastore.
func (c *hostServiceClient) MountDatastore(ctx context.Context, req *connect.Request[v1.MountDatastoreRequest]) (*connect.Response[v1.MountDatastoreResponse], error) {
	return c.mountDatastore.CallUnary(ctx, req)
}

// UnmountDatastore calls pilab.cloud.director.v1.HostService.UnmountDatastore.
func (c *hostServiceClient) UnmountDatastore(ctx context.Context, req *connect.Request[v1.UnmountDatastoreRequest]) (*connect.Response[v1.UnmountDatastoreResponse], error) {
	return c.unmountDatastore.CallUnary(ctx, req)
}

// GetHostSystemSettings calls pilab.cloud.director.v1.HostService.GetHostSystemSettings.
func (c *hostServiceClient) GetHostSystemSettings(ctx context.Context, req *connect.Request[v1.GetHostSystemSettingsRequest]) (*connect.Response[v1.HostSystemSettingsResponse], error) {
	return c.getHostSystemSettings.CallUnary(ctx, req)
}

// UpdateNTPConfig calls pilab.cloud.director.v1.HostService.UpdateNTPConfig.
func (c *hostServiceClient) UpdateNTPConfig(ctx context.Context, req *connect.Request[v1.UpdateNTPConfigRequest]) (*connect.Response[v1.UpdateNTPConfigResponse], error) {
	return c.updateNTPConfig.CallUnary(ctx, req)
}

// UpdateTimezone calls pilab.cloud.director.v1.HostService.UpdateTimezone.
func (c *hostServiceClient) UpdateTimezone(ctx context.Context, req *connect.Request[v1.UpdateTimezoneRequest]) (*connect.Response[v1.UpdateTimezoneResponse], error) {
	return c.updateTimezone.CallUnary(ctx, req)
}

// UpdateDNSSettings calls pilab.cloud.director.v1.HostService.UpdateDNSSettings.
func (c *hostServiceClient) UpdateDNSSettings(ctx context.Context, req *connect.Request[v1.UpdateDNSSettingsRequest]) (*connect.Response[v1.UpdateDNSSettingsResponse], error) {
	return c.updateDNSSettings.CallUnary(ctx, req)
}

// UpdateRoutingSettings calls pilab.cloud.director.v1.HostService.UpdateRoutingSettings.
func (c *hostServiceClient) UpdateRoutingSettings(ctx context.Context, req *connect.Request[v1.UpdateRoutingSettingsRequest]) (*connect.Response[v1.UpdateRoutingSettingsResponse], error) {
	return c.updateRoutingSettings.CallUnary(ctx, req)
}

// GetMaintenanceModeStatus calls pilab.cloud.director.v1.HostService.GetMaintenanceModeStatus.
func (c *hostServiceClient) GetMaintenanceModeStatus(ctx context.Context, req *connect.Request[v1.GetMaintenanceModeStatusRequest]) (*connect.Response[v1.MaintenanceModeStatusResponse], error) {
	return c.getMaintenanceModeStatus.CallUnary(ctx, req)
}

// EnterMaintenanceMode calls pilab.cloud.director.v1.HostService.EnterMaintenanceMode.
func (c *hostServiceClient) EnterMaintenanceMode(ctx context.Context, req *connect.Request[v1.EnterMaintenanceModeRequest]) (*connect.Response[v1.EnterMaintenanceModeResponse], error) {
	return c.enterMaintenanceMode.CallUnary(ctx, req)
}

// ExitMaintenanceMode calls pilab.cloud.director.v1.HostService.ExitMaintenanceMode.
func (c *hostServiceClient) ExitMaintenanceMode(ctx context.Context, req *connect.Request[v1.ExitMaintenanceModeRequest]) (*connect.Response[v1.ExitMaintenanceModeResponse], error) {
	return c.exitMaintenanceMode.CallUnary(ctx, req)
}

// ListHostNetworkInterfaces calls pilab.cloud.director.v1.HostService.ListHostNetworkInterfaces.
func (c *hostServiceClient) ListHostNetworkInterfaces(ctx context.Context, req *connect.Request[v1.ListHostNetworkInterfacesRequest]) (*connect.Response[v1.HostNetworkInterfacesResponse], error) {
	return c.listHostNetworkInterfaces.CallUnary(ctx, req)
}

// EnableNetworkInterface calls pilab.cloud.director.v1.HostService.EnableNetworkInterface.
func (c *hostServiceClient) EnableNetworkInterface(ctx context.Context, req *connect.Request[v1.EnableNetworkInterfaceRequest]) (*connect.Response[v1.EnableNetworkInterfaceResponse], error) {
	return c.enableNetworkInterface.CallUnary(ctx, req)
}

// DisableNetworkInterface calls pilab.cloud.director.v1.HostService.DisableNetworkInterface.
func (c *hostServiceClient) DisableNetworkInterface(ctx context.Context, req *connect.Request[v1.DisableNetworkInterfaceRequest]) (*connect.Response[v1.DisableNetworkInterfaceResponse], error) {
	return c.disableNetworkInterface.CallUnary(ctx, req)
}

// HostServiceHandler is an implementation of the pilab.cloud.director.v1.HostService service.
type HostServiceHandler interface {
	// Host Overview
	GetHostOverview(context.Context, *connect.Request[v1.GetHostOverviewRequest]) (*connect.Response[v1.HostOverview], error)
	// Monitoring
	GetMonitoringData(context.Context, *connect.Request[v1.GetMonitoringDataRequest]) (*connect.Response[v1.MonitoringDataResponse], error)
	// VMs
	ListHostVMs(context.Context, *connect.Request[v1.ListHostVMsRequest]) (*connect.Response[v1.HostVMsResponse], error)
	// Permissions
	GetHostPermissions(context.Context, *connect.Request[v1.GetHostPermissionsRequest]) (*connect.Response[v1.HostPermissionsResponse], error)
	// Storage/Datastores
	ListHostDatastores(context.Context, *connect.Request[v1.ListHostDatastoresRequest]) (*connect.Response[v1.HostDatastoresResponse], error)
	MountDatastore(context.Context, *connect.Request[v1.MountDatastoreRequest]) (*connect.Response[v1.MountDatastoreResponse], error)
	UnmountDatastore(context.Context, *connect.Request[v1.UnmountDatastoreRequest]) (*connect.Response[v1.UnmountDatastoreResponse], error)
	// System Settings
	GetHostSystemSettings(context.Context, *connect.Request[v1.GetHostSystemSettingsRequest]) (*connect.Response[v1.HostSystemSettingsResponse], error)
	UpdateNTPConfig(context.Context, *connect.Request[v1.UpdateNTPConfigRequest]) (*connect.Response[v1.UpdateNTPConfigResponse], error)
	UpdateTimezone(context.Context, *connect.Request[v1.UpdateTimezoneRequest]) (*connect.Response[v1.UpdateTimezoneResponse], error)
	UpdateDNSSettings(context.Context, *connect.Request[v1.UpdateDNSSettingsRequest]) (*connect.Response[v1.UpdateDNSSettingsResponse], error)
	UpdateRoutingSettings(context.Context, *connect.Request[v1.UpdateRoutingSettingsRequest]) (*connect.Response[v1.UpdateRoutingSettingsResponse], error)
	// Maintenance Mode
	GetMaintenanceModeStatus(context.Context, *connect.Request[v1.GetMaintenanceModeStatusRequest]) (*connect.Response[v1.MaintenanceModeStatusResponse], error)
	EnterMaintenanceMode(context.Context, *connect.Request[v1.EnterMaintenanceModeRequest]) (*connect.Response[v1.EnterMaintenanceModeResponse], error)
	ExitMaintenanceMode(context.Context, *connect.Request[v1.ExitMaintenanceModeRequest]) (*connect.Response[v1.ExitMaintenanceModeResponse], error)
	// Networking/Interfaces
	ListHostNetworkInterfaces(context.Context, *connect.Request[v1.ListHostNetworkInterfacesRequest]) (*connect.Response[v1.HostNetworkInterfacesResponse], error)
	EnableNetworkInterface(context.Context, *connect.Request[v1.EnableNetworkInterfaceRequest]) (*connect.Response[v1.EnableNetworkInterfaceResponse], error)
	DisableNetworkInterface(context.Context, *connect.Request[v1.DisableNetworkInterfaceRequest]) (*connect.Response[v1.DisableNetworkInterfaceResponse], error)
}

// NewHostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHostServiceHandler(svc HostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hostServiceGetHostOverviewHandler := connect.NewUnaryHandler(
		HostServiceGetHostOverviewProcedure,
		svc.GetHostOverview,
		connect.WithSchema(hostServiceGetHostOverviewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceGetMonitoringDataHandler := connect.NewUnaryHandler(
		HostServiceGetMonitoringDataProcedure,
		svc.GetMonitoringData,
		connect.WithSchema(hostServiceGetMonitoringDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceListHostVMsHandler := connect.NewUnaryHandler(
		HostServiceListHostVMsProcedure,
		svc.ListHostVMs,
		connect.WithSchema(hostServiceListHostVMsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceGetHostPermissionsHandler := connect.NewUnaryHandler(
		HostServiceGetHostPermissionsProcedure,
		svc.GetHostPermissions,
		connect.WithSchema(hostServiceGetHostPermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceListHostDatastoresHandler := connect.NewUnaryHandler(
		HostServiceListHostDatastoresProcedure,
		svc.ListHostDatastores,
		connect.WithSchema(hostServiceListHostDatastoresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceMountDatastoreHandler := connect.NewUnaryHandler(
		HostServiceMountDatastoreProcedure,
		svc.MountDatastore,
		connect.WithSchema(hostServiceMountDatastoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceUnmountDatastoreHandler := connect.NewUnaryHandler(
		HostServiceUnmountDatastoreProcedure,
		svc.UnmountDatastore,
		connect.WithSchema(hostServiceUnmountDatastoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceGetHostSystemSettingsHandler := connect.NewUnaryHandler(
		HostServiceGetHostSystemSettingsProcedure,
		svc.GetHostSystemSettings,
		connect.WithSchema(hostServiceGetHostSystemSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceUpdateNTPConfigHandler := connect.NewUnaryHandler(
		HostServiceUpdateNTPConfigProcedure,
		svc.UpdateNTPConfig,
		connect.WithSchema(hostServiceUpdateNTPConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceUpdateTimezoneHandler := connect.NewUnaryHandler(
		HostServiceUpdateTimezoneProcedure,
		svc.UpdateTimezone,
		connect.WithSchema(hostServiceUpdateTimezoneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceUpdateDNSSettingsHandler := connect.NewUnaryHandler(
		HostServiceUpdateDNSSettingsProcedure,
		svc.UpdateDNSSettings,
		connect.WithSchema(hostServiceUpdateDNSSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceUpdateRoutingSettingsHandler := connect.NewUnaryHandler(
		HostServiceUpdateRoutingSettingsProcedure,
		svc.UpdateRoutingSettings,
		connect.WithSchema(hostServiceUpdateRoutingSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceGetMaintenanceModeStatusHandler := connect.NewUnaryHandler(
		HostServiceGetMaintenanceModeStatusProcedure,
		svc.GetMaintenanceModeStatus,
		connect.WithSchema(hostServiceGetMaintenanceModeStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceEnterMaintenanceModeHandler := connect.NewUnaryHandler(
		HostServiceEnterMaintenanceModeProcedure,
		svc.EnterMaintenanceMode,
		connect.WithSchema(hostServiceEnterMaintenanceModeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceExitMaintenanceModeHandler := connect.NewUnaryHandler(
		HostServiceExitMaintenanceModeProcedure,
		svc.ExitMaintenanceMode,
		connect.WithSchema(hostServiceExitMaintenanceModeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceListHostNetworkInterfacesHandler := connect.NewUnaryHandler(
		HostServiceListHostNetworkInterfacesProcedure,
		svc.ListHostNetworkInterfaces,
		connect.WithSchema(hostServiceListHostNetworkInterfacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceEnableNetworkInterfaceHandler := connect.NewUnaryHandler(
		HostServiceEnableNetworkInterfaceProcedure,
		svc.EnableNetworkInterface,
		connect.WithSchema(hostServiceEnableNetworkInterfaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceDisableNetworkInterfaceHandler := connect.NewUnaryHandler(
		HostServiceDisableNetworkInterfaceProcedure,
		svc.DisableNetworkInterface,
		connect.WithSchema(hostServiceDisableNetworkInterfaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.director.v1.HostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HostServiceGetHostOverviewProcedure:
			hostServiceGetHostOverviewHandler.ServeHTTP(w, r)
		case HostServiceGetMonitoringDataProcedure:
			hostServiceGetMonitoringDataHandler.ServeHTTP(w, r)
		case HostServiceListHostVMsProcedure:
			hostServiceListHostVMsHandler.ServeHTTP(w, r)
		case HostServiceGetHostPermissionsProcedure:
			hostServiceGetHostPermissionsHandler.ServeHTTP(w, r)
		case HostServiceListHostDatastoresProcedure:
			hostServiceListHostDatastoresHandler.ServeHTTP(w, r)
		case HostServiceMountDatastoreProcedure:
			hostServiceMountDatastoreHandler.ServeHTTP(w, r)
		case HostServiceUnmountDatastoreProcedure:
			hostServiceUnmountDatastoreHandler.ServeHTTP(w, r)
		case HostServiceGetHostSystemSettingsProcedure:
			hostServiceGetHostSystemSettingsHandler.ServeHTTP(w, r)
		case HostServiceUpdateNTPConfigProcedure:
			hostServiceUpdateNTPConfigHandler.ServeHTTP(w, r)
		case HostServiceUpdateTimezoneProcedure:
			hostServiceUpdateTimezoneHandler.ServeHTTP(w, r)
		case HostServiceUpdateDNSSettingsProcedure:
			hostServiceUpdateDNSSettingsHandler.ServeHTTP(w, r)
		case HostServiceUpdateRoutingSettingsProcedure:
			hostServiceUpdateRoutingSettingsHandler.ServeHTTP(w, r)
		case HostServiceGetMaintenanceModeStatusProcedure:
			hostServiceGetMaintenanceModeStatusHandler.ServeHTTP(w, r)
		case HostServiceEnterMaintenanceModeProcedure:
			hostServiceEnterMaintenanceModeHandler.ServeHTTP(w, r)
		case HostServiceExitMaintenanceModeProcedure:
			hostServiceExitMaintenanceModeHandler.ServeHTTP(w, r)
		case HostServiceListHostNetworkInterfacesProcedure:
			hostServiceListHostNetworkInterfacesHandler.ServeHTTP(w, r)
		case HostServiceEnableNetworkInterfaceProcedure:
			hostServiceEnableNetworkInterfaceHandler.ServeHTTP(w, r)
		case HostServiceDisableNetworkInterfaceProcedure:
			hostServiceDisableNetworkInterfaceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHostServiceHandler struct{}

func (UnimplementedHostServiceHandler) GetHostOverview(context.Context, *connect.Request[v1.GetHostOverviewRequest]) (*connect.Response[v1.HostOverview], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.GetHostOverview is not implemented"))
}

func (UnimplementedHostServiceHandler) GetMonitoringData(context.Context, *connect.Request[v1.GetMonitoringDataRequest]) (*connect.Response[v1.MonitoringDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.GetMonitoringData is not implemented"))
}

func (UnimplementedHostServiceHandler) ListHostVMs(context.Context, *connect.Request[v1.ListHostVMsRequest]) (*connect.Response[v1.HostVMsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.ListHostVMs is not implemented"))
}

func (UnimplementedHostServiceHandler) GetHostPermissions(context.Context, *connect.Request[v1.GetHostPermissionsRequest]) (*connect.Response[v1.HostPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.GetHostPermissions is not implemented"))
}

func (UnimplementedHostServiceHandler) ListHostDatastores(context.Context, *connect.Request[v1.ListHostDatastoresRequest]) (*connect.Response[v1.HostDatastoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.ListHostDatastores is not implemented"))
}

func (UnimplementedHostServiceHandler) MountDatastore(context.Context, *connect.Request[v1.MountDatastoreRequest]) (*connect.Response[v1.MountDatastoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.MountDatastore is not implemented"))
}

func (UnimplementedHostServiceHandler) UnmountDatastore(context.Context, *connect.Request[v1.UnmountDatastoreRequest]) (*connect.Response[v1.UnmountDatastoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.UnmountDatastore is not implemented"))
}

func (UnimplementedHostServiceHandler) GetHostSystemSettings(context.Context, *connect.Request[v1.GetHostSystemSettingsRequest]) (*connect.Response[v1.HostSystemSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.GetHostSystemSettings is not implemented"))
}

func (UnimplementedHostServiceHandler) UpdateNTPConfig(context.Context, *connect.Request[v1.UpdateNTPConfigRequest]) (*connect.Response[v1.UpdateNTPConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.UpdateNTPConfig is not implemented"))
}

func (UnimplementedHostServiceHandler) UpdateTimezone(context.Context, *connect.Request[v1.UpdateTimezoneRequest]) (*connect.Response[v1.UpdateTimezoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.UpdateTimezone is not implemented"))
}

func (UnimplementedHostServiceHandler) UpdateDNSSettings(context.Context, *connect.Request[v1.UpdateDNSSettingsRequest]) (*connect.Response[v1.UpdateDNSSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.UpdateDNSSettings is not implemented"))
}

func (UnimplementedHostServiceHandler) UpdateRoutingSettings(context.Context, *connect.Request[v1.UpdateRoutingSettingsRequest]) (*connect.Response[v1.UpdateRoutingSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.UpdateRoutingSettings is not implemented"))
}

func (UnimplementedHostServiceHandler) GetMaintenanceModeStatus(context.Context, *connect.Request[v1.GetMaintenanceModeStatusRequest]) (*connect.Response[v1.MaintenanceModeStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.GetMaintenanceModeStatus is not implemented"))
}

func (UnimplementedHostServiceHandler) EnterMaintenanceMode(context.Context, *connect.Request[v1.EnterMaintenanceModeRequest]) (*connect.Response[v1.EnterMaintenanceModeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.EnterMaintenanceMode is not implemented"))
}

func (UnimplementedHostServiceHandler) ExitMaintenanceMode(context.Context, *connect.Request[v1.ExitMaintenanceModeRequest]) (*connect.Response[v1.ExitMaintenanceModeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.ExitMaintenanceMode is not implemented"))
}

func (UnimplementedHostServiceHandler) ListHostNetworkInterfaces(context.Context, *connect.Request[v1.ListHostNetworkInterfacesRequest]) (*connect.Response[v1.HostNetworkInterfacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.ListHostNetworkInterfaces is not implemented"))
}

func (UnimplementedHostServiceHandler) EnableNetworkInterface(context.Context, *connect.Request[v1.EnableNetworkInterfaceRequest]) (*connect.Response[v1.EnableNetworkInterfaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.EnableNetworkInterface is not implemented"))
}

func (UnimplementedHostServiceHandler) DisableNetworkInterface(context.Context, *connect.Request[v1.DisableNetworkInterfaceRequest]) (*connect.Response[v1.DisableNetworkInterfaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.HostService.DisableNetworkInterface is not implemented"))
}
