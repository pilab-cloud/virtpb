// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/frontend/v1/host_service.proto

package frontendv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HostService_GetHostOverview_FullMethodName           = "/pilab.cloud.director.v1.HostService/GetHostOverview"
	HostService_GetMonitoringData_FullMethodName         = "/pilab.cloud.director.v1.HostService/GetMonitoringData"
	HostService_ListHostVMs_FullMethodName               = "/pilab.cloud.director.v1.HostService/ListHostVMs"
	HostService_GetHostPermissions_FullMethodName        = "/pilab.cloud.director.v1.HostService/GetHostPermissions"
	HostService_ListHostDatastores_FullMethodName        = "/pilab.cloud.director.v1.HostService/ListHostDatastores"
	HostService_MountDatastore_FullMethodName            = "/pilab.cloud.director.v1.HostService/MountDatastore"
	HostService_UnmountDatastore_FullMethodName          = "/pilab.cloud.director.v1.HostService/UnmountDatastore"
	HostService_GetHostSystemSettings_FullMethodName     = "/pilab.cloud.director.v1.HostService/GetHostSystemSettings"
	HostService_UpdateNTPConfig_FullMethodName           = "/pilab.cloud.director.v1.HostService/UpdateNTPConfig"
	HostService_UpdateTimezone_FullMethodName            = "/pilab.cloud.director.v1.HostService/UpdateTimezone"
	HostService_UpdateDNSSettings_FullMethodName         = "/pilab.cloud.director.v1.HostService/UpdateDNSSettings"
	HostService_UpdateRoutingSettings_FullMethodName     = "/pilab.cloud.director.v1.HostService/UpdateRoutingSettings"
	HostService_GetMaintenanceModeStatus_FullMethodName  = "/pilab.cloud.director.v1.HostService/GetMaintenanceModeStatus"
	HostService_EnterMaintenanceMode_FullMethodName      = "/pilab.cloud.director.v1.HostService/EnterMaintenanceMode"
	HostService_ExitMaintenanceMode_FullMethodName       = "/pilab.cloud.director.v1.HostService/ExitMaintenanceMode"
	HostService_ListHostNetworkInterfaces_FullMethodName = "/pilab.cloud.director.v1.HostService/ListHostNetworkInterfaces"
	HostService_EnableNetworkInterface_FullMethodName    = "/pilab.cloud.director.v1.HostService/EnableNetworkInterface"
	HostService_DisableNetworkInterface_FullMethodName   = "/pilab.cloud.director.v1.HostService/DisableNetworkInterface"
)

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostServiceClient interface {
	// Host Overview
	GetHostOverview(ctx context.Context, in *GetHostOverviewRequest, opts ...grpc.CallOption) (*HostOverview, error)
	// Monitoring
	GetMonitoringData(ctx context.Context, in *GetMonitoringDataRequest, opts ...grpc.CallOption) (*MonitoringDataResponse, error)
	// VMs
	ListHostVMs(ctx context.Context, in *ListHostVMsRequest, opts ...grpc.CallOption) (*HostVMsResponse, error)
	// Permissions
	GetHostPermissions(ctx context.Context, in *GetHostPermissionsRequest, opts ...grpc.CallOption) (*HostPermissionsResponse, error)
	// Storage/Datastores
	ListHostDatastores(ctx context.Context, in *ListHostDatastoresRequest, opts ...grpc.CallOption) (*HostDatastoresResponse, error)
	MountDatastore(ctx context.Context, in *MountDatastoreRequest, opts ...grpc.CallOption) (*MountDatastoreResponse, error)
	UnmountDatastore(ctx context.Context, in *UnmountDatastoreRequest, opts ...grpc.CallOption) (*UnmountDatastoreResponse, error)
	// System Settings
	GetHostSystemSettings(ctx context.Context, in *GetHostSystemSettingsRequest, opts ...grpc.CallOption) (*HostSystemSettingsResponse, error)
	UpdateNTPConfig(ctx context.Context, in *UpdateNTPConfigRequest, opts ...grpc.CallOption) (*UpdateNTPConfigResponse, error)
	UpdateTimezone(ctx context.Context, in *UpdateTimezoneRequest, opts ...grpc.CallOption) (*UpdateTimezoneResponse, error)
	UpdateDNSSettings(ctx context.Context, in *UpdateDNSSettingsRequest, opts ...grpc.CallOption) (*UpdateDNSSettingsResponse, error)
	UpdateRoutingSettings(ctx context.Context, in *UpdateRoutingSettingsRequest, opts ...grpc.CallOption) (*UpdateRoutingSettingsResponse, error)
	// Maintenance Mode
	GetMaintenanceModeStatus(ctx context.Context, in *GetMaintenanceModeStatusRequest, opts ...grpc.CallOption) (*MaintenanceModeStatusResponse, error)
	EnterMaintenanceMode(ctx context.Context, in *EnterMaintenanceModeRequest, opts ...grpc.CallOption) (*EnterMaintenanceModeResponse, error)
	ExitMaintenanceMode(ctx context.Context, in *ExitMaintenanceModeRequest, opts ...grpc.CallOption) (*ExitMaintenanceModeResponse, error)
	// Networking/Interfaces
	ListHostNetworkInterfaces(ctx context.Context, in *ListHostNetworkInterfacesRequest, opts ...grpc.CallOption) (*HostNetworkInterfacesResponse, error)
	EnableNetworkInterface(ctx context.Context, in *EnableNetworkInterfaceRequest, opts ...grpc.CallOption) (*EnableNetworkInterfaceResponse, error)
	DisableNetworkInterface(ctx context.Context, in *DisableNetworkInterfaceRequest, opts ...grpc.CallOption) (*DisableNetworkInterfaceResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) GetHostOverview(ctx context.Context, in *GetHostOverviewRequest, opts ...grpc.CallOption) (*HostOverview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostOverview)
	err := c.cc.Invoke(ctx, HostService_GetHostOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetMonitoringData(ctx context.Context, in *GetMonitoringDataRequest, opts ...grpc.CallOption) (*MonitoringDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitoringDataResponse)
	err := c.cc.Invoke(ctx, HostService_GetMonitoringData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ListHostVMs(ctx context.Context, in *ListHostVMsRequest, opts ...grpc.CallOption) (*HostVMsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostVMsResponse)
	err := c.cc.Invoke(ctx, HostService_ListHostVMs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetHostPermissions(ctx context.Context, in *GetHostPermissionsRequest, opts ...grpc.CallOption) (*HostPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostPermissionsResponse)
	err := c.cc.Invoke(ctx, HostService_GetHostPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ListHostDatastores(ctx context.Context, in *ListHostDatastoresRequest, opts ...grpc.CallOption) (*HostDatastoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostDatastoresResponse)
	err := c.cc.Invoke(ctx, HostService_ListHostDatastores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) MountDatastore(ctx context.Context, in *MountDatastoreRequest, opts ...grpc.CallOption) (*MountDatastoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountDatastoreResponse)
	err := c.cc.Invoke(ctx, HostService_MountDatastore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) UnmountDatastore(ctx context.Context, in *UnmountDatastoreRequest, opts ...grpc.CallOption) (*UnmountDatastoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmountDatastoreResponse)
	err := c.cc.Invoke(ctx, HostService_UnmountDatastore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetHostSystemSettings(ctx context.Context, in *GetHostSystemSettingsRequest, opts ...grpc.CallOption) (*HostSystemSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostSystemSettingsResponse)
	err := c.cc.Invoke(ctx, HostService_GetHostSystemSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) UpdateNTPConfig(ctx context.Context, in *UpdateNTPConfigRequest, opts ...grpc.CallOption) (*UpdateNTPConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNTPConfigResponse)
	err := c.cc.Invoke(ctx, HostService_UpdateNTPConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) UpdateTimezone(ctx context.Context, in *UpdateTimezoneRequest, opts ...grpc.CallOption) (*UpdateTimezoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTimezoneResponse)
	err := c.cc.Invoke(ctx, HostService_UpdateTimezone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) UpdateDNSSettings(ctx context.Context, in *UpdateDNSSettingsRequest, opts ...grpc.CallOption) (*UpdateDNSSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDNSSettingsResponse)
	err := c.cc.Invoke(ctx, HostService_UpdateDNSSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) UpdateRoutingSettings(ctx context.Context, in *UpdateRoutingSettingsRequest, opts ...grpc.CallOption) (*UpdateRoutingSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoutingSettingsResponse)
	err := c.cc.Invoke(ctx, HostService_UpdateRoutingSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetMaintenanceModeStatus(ctx context.Context, in *GetMaintenanceModeStatusRequest, opts ...grpc.CallOption) (*MaintenanceModeStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaintenanceModeStatusResponse)
	err := c.cc.Invoke(ctx, HostService_GetMaintenanceModeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) EnterMaintenanceMode(ctx context.Context, in *EnterMaintenanceModeRequest, opts ...grpc.CallOption) (*EnterMaintenanceModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnterMaintenanceModeResponse)
	err := c.cc.Invoke(ctx, HostService_EnterMaintenanceMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ExitMaintenanceMode(ctx context.Context, in *ExitMaintenanceModeRequest, opts ...grpc.CallOption) (*ExitMaintenanceModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitMaintenanceModeResponse)
	err := c.cc.Invoke(ctx, HostService_ExitMaintenanceMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ListHostNetworkInterfaces(ctx context.Context, in *ListHostNetworkInterfacesRequest, opts ...grpc.CallOption) (*HostNetworkInterfacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostNetworkInterfacesResponse)
	err := c.cc.Invoke(ctx, HostService_ListHostNetworkInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) EnableNetworkInterface(ctx context.Context, in *EnableNetworkInterfaceRequest, opts ...grpc.CallOption) (*EnableNetworkInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, HostService_EnableNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) DisableNetworkInterface(ctx context.Context, in *DisableNetworkInterfaceRequest, opts ...grpc.CallOption) (*DisableNetworkInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, HostService_DisableNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations must embed UnimplementedHostServiceServer
// for forward compatibility.
type HostServiceServer interface {
	// Host Overview
	GetHostOverview(context.Context, *GetHostOverviewRequest) (*HostOverview, error)
	// Monitoring
	GetMonitoringData(context.Context, *GetMonitoringDataRequest) (*MonitoringDataResponse, error)
	// VMs
	ListHostVMs(context.Context, *ListHostVMsRequest) (*HostVMsResponse, error)
	// Permissions
	GetHostPermissions(context.Context, *GetHostPermissionsRequest) (*HostPermissionsResponse, error)
	// Storage/Datastores
	ListHostDatastores(context.Context, *ListHostDatastoresRequest) (*HostDatastoresResponse, error)
	MountDatastore(context.Context, *MountDatastoreRequest) (*MountDatastoreResponse, error)
	UnmountDatastore(context.Context, *UnmountDatastoreRequest) (*UnmountDatastoreResponse, error)
	// System Settings
	GetHostSystemSettings(context.Context, *GetHostSystemSettingsRequest) (*HostSystemSettingsResponse, error)
	UpdateNTPConfig(context.Context, *UpdateNTPConfigRequest) (*UpdateNTPConfigResponse, error)
	UpdateTimezone(context.Context, *UpdateTimezoneRequest) (*UpdateTimezoneResponse, error)
	UpdateDNSSettings(context.Context, *UpdateDNSSettingsRequest) (*UpdateDNSSettingsResponse, error)
	UpdateRoutingSettings(context.Context, *UpdateRoutingSettingsRequest) (*UpdateRoutingSettingsResponse, error)
	// Maintenance Mode
	GetMaintenanceModeStatus(context.Context, *GetMaintenanceModeStatusRequest) (*MaintenanceModeStatusResponse, error)
	EnterMaintenanceMode(context.Context, *EnterMaintenanceModeRequest) (*EnterMaintenanceModeResponse, error)
	ExitMaintenanceMode(context.Context, *ExitMaintenanceModeRequest) (*ExitMaintenanceModeResponse, error)
	// Networking/Interfaces
	ListHostNetworkInterfaces(context.Context, *ListHostNetworkInterfacesRequest) (*HostNetworkInterfacesResponse, error)
	EnableNetworkInterface(context.Context, *EnableNetworkInterfaceRequest) (*EnableNetworkInterfaceResponse, error)
	DisableNetworkInterface(context.Context, *DisableNetworkInterfaceRequest) (*DisableNetworkInterfaceResponse, error)
	mustEmbedUnimplementedHostServiceServer()
}

// UnimplementedHostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostServiceServer struct{}

func (UnimplementedHostServiceServer) GetHostOverview(context.Context, *GetHostOverviewRequest) (*HostOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostOverview not implemented")
}
func (UnimplementedHostServiceServer) GetMonitoringData(context.Context, *GetMonitoringDataRequest) (*MonitoringDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringData not implemented")
}
func (UnimplementedHostServiceServer) ListHostVMs(context.Context, *ListHostVMsRequest) (*HostVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostVMs not implemented")
}
func (UnimplementedHostServiceServer) GetHostPermissions(context.Context, *GetHostPermissionsRequest) (*HostPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostPermissions not implemented")
}
func (UnimplementedHostServiceServer) ListHostDatastores(context.Context, *ListHostDatastoresRequest) (*HostDatastoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostDatastores not implemented")
}
func (UnimplementedHostServiceServer) MountDatastore(context.Context, *MountDatastoreRequest) (*MountDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountDatastore not implemented")
}
func (UnimplementedHostServiceServer) UnmountDatastore(context.Context, *UnmountDatastoreRequest) (*UnmountDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountDatastore not implemented")
}
func (UnimplementedHostServiceServer) GetHostSystemSettings(context.Context, *GetHostSystemSettingsRequest) (*HostSystemSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostSystemSettings not implemented")
}
func (UnimplementedHostServiceServer) UpdateNTPConfig(context.Context, *UpdateNTPConfigRequest) (*UpdateNTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNTPConfig not implemented")
}
func (UnimplementedHostServiceServer) UpdateTimezone(context.Context, *UpdateTimezoneRequest) (*UpdateTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimezone not implemented")
}
func (UnimplementedHostServiceServer) UpdateDNSSettings(context.Context, *UpdateDNSSettingsRequest) (*UpdateDNSSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDNSSettings not implemented")
}
func (UnimplementedHostServiceServer) UpdateRoutingSettings(context.Context, *UpdateRoutingSettingsRequest) (*UpdateRoutingSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutingSettings not implemented")
}
func (UnimplementedHostServiceServer) GetMaintenanceModeStatus(context.Context, *GetMaintenanceModeStatusRequest) (*MaintenanceModeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaintenanceModeStatus not implemented")
}
func (UnimplementedHostServiceServer) EnterMaintenanceMode(context.Context, *EnterMaintenanceModeRequest) (*EnterMaintenanceModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterMaintenanceMode not implemented")
}
func (UnimplementedHostServiceServer) ExitMaintenanceMode(context.Context, *ExitMaintenanceModeRequest) (*ExitMaintenanceModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitMaintenanceMode not implemented")
}
func (UnimplementedHostServiceServer) ListHostNetworkInterfaces(context.Context, *ListHostNetworkInterfacesRequest) (*HostNetworkInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostNetworkInterfaces not implemented")
}
func (UnimplementedHostServiceServer) EnableNetworkInterface(context.Context, *EnableNetworkInterfaceRequest) (*EnableNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableNetworkInterface not implemented")
}
func (UnimplementedHostServiceServer) DisableNetworkInterface(context.Context, *DisableNetworkInterfaceRequest) (*DisableNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableNetworkInterface not implemented")
}
func (UnimplementedHostServiceServer) mustEmbedUnimplementedHostServiceServer() {}
func (UnimplementedHostServiceServer) testEmbeddedByValue()                     {}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	// If the following call pancis, it indicates UnimplementedHostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_GetHostOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetHostOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostOverview(ctx, req.(*GetHostOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetMonitoringData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitoringDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetMonitoringData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetMonitoringData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetMonitoringData(ctx, req.(*GetMonitoringDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ListHostVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ListHostVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_ListHostVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ListHostVMs(ctx, req.(*ListHostVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetHostPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetHostPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostPermissions(ctx, req.(*GetHostPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ListHostDatastores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostDatastoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ListHostDatastores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_ListHostDatastores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ListHostDatastores(ctx, req.(*ListHostDatastoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_MountDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).MountDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_MountDatastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).MountDatastore(ctx, req.(*MountDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_UnmountDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UnmountDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_UnmountDatastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UnmountDatastore(ctx, req.(*UnmountDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetHostSystemSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostSystemSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostSystemSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetHostSystemSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostSystemSettings(ctx, req.(*GetHostSystemSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_UpdateNTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UpdateNTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_UpdateNTPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UpdateNTPConfig(ctx, req.(*UpdateNTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_UpdateTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UpdateTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_UpdateTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UpdateTimezone(ctx, req.(*UpdateTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_UpdateDNSSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDNSSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UpdateDNSSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_UpdateDNSSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UpdateDNSSettings(ctx, req.(*UpdateDNSSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_UpdateRoutingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutingSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UpdateRoutingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_UpdateRoutingSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UpdateRoutingSettings(ctx, req.(*UpdateRoutingSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetMaintenanceModeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaintenanceModeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetMaintenanceModeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetMaintenanceModeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetMaintenanceModeStatus(ctx, req.(*GetMaintenanceModeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_EnterMaintenanceMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterMaintenanceModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).EnterMaintenanceMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_EnterMaintenanceMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).EnterMaintenanceMode(ctx, req.(*EnterMaintenanceModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ExitMaintenanceMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitMaintenanceModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ExitMaintenanceMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_ExitMaintenanceMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ExitMaintenanceMode(ctx, req.(*ExitMaintenanceModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ListHostNetworkInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostNetworkInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ListHostNetworkInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_ListHostNetworkInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ListHostNetworkInterfaces(ctx, req.(*ListHostNetworkInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_EnableNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).EnableNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_EnableNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).EnableNetworkInterface(ctx, req.(*EnableNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_DisableNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).DisableNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_DisableNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).DisableNetworkInterface(ctx, req.(*DisableNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.cloud.director.v1.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostOverview",
			Handler:    _HostService_GetHostOverview_Handler,
		},
		{
			MethodName: "GetMonitoringData",
			Handler:    _HostService_GetMonitoringData_Handler,
		},
		{
			MethodName: "ListHostVMs",
			Handler:    _HostService_ListHostVMs_Handler,
		},
		{
			MethodName: "GetHostPermissions",
			Handler:    _HostService_GetHostPermissions_Handler,
		},
		{
			MethodName: "ListHostDatastores",
			Handler:    _HostService_ListHostDatastores_Handler,
		},
		{
			MethodName: "MountDatastore",
			Handler:    _HostService_MountDatastore_Handler,
		},
		{
			MethodName: "UnmountDatastore",
			Handler:    _HostService_UnmountDatastore_Handler,
		},
		{
			MethodName: "GetHostSystemSettings",
			Handler:    _HostService_GetHostSystemSettings_Handler,
		},
		{
			MethodName: "UpdateNTPConfig",
			Handler:    _HostService_UpdateNTPConfig_Handler,
		},
		{
			MethodName: "UpdateTimezone",
			Handler:    _HostService_UpdateTimezone_Handler,
		},
		{
			MethodName: "UpdateDNSSettings",
			Handler:    _HostService_UpdateDNSSettings_Handler,
		},
		{
			MethodName: "UpdateRoutingSettings",
			Handler:    _HostService_UpdateRoutingSettings_Handler,
		},
		{
			MethodName: "GetMaintenanceModeStatus",
			Handler:    _HostService_GetMaintenanceModeStatus_Handler,
		},
		{
			MethodName: "EnterMaintenanceMode",
			Handler:    _HostService_EnterMaintenanceMode_Handler,
		},
		{
			MethodName: "ExitMaintenanceMode",
			Handler:    _HostService_ExitMaintenanceMode_Handler,
		},
		{
			MethodName: "ListHostNetworkInterfaces",
			Handler:    _HostService_ListHostNetworkInterfaces_Handler,
		},
		{
			MethodName: "EnableNetworkInterface",
			Handler:    _HostService_EnableNetworkInterface_Handler,
		},
		{
			MethodName: "DisableNetworkInterface",
			Handler:    _HostService_DisableNetworkInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pilab/cloud/frontend/v1/host_service.proto",
}
