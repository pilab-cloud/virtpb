// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: pilab/cloud/agent/v1/storageservice.proto

package agentv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Volume Messages
type Volume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PoolName      string                 `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	SizeGb        uint64                 `protobuf:"varint,3,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Format        string                 `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"` // e.g., "qcow2", "raw"
	Path          string                 `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`     // Add other relevant volume details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{0}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *Volume) GetSizeGb() uint64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *Volume) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Volume) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type VolumeCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PoolName      string                 `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	SizeGb        uint64                 `protobuf:"varint,3,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Format        string                 `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	BackingStore  *string                `protobuf:"bytes,5,opt,name=backing_store,json=backingStore,proto3,oneof" json:"backing_store,omitempty"` // For linked clones
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeCreateRequest) Reset() {
	*x = VolumeCreateRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCreateRequest) ProtoMessage() {}

func (x *VolumeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCreateRequest.ProtoReflect.Descriptor instead.
func (*VolumeCreateRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{1}
}

func (x *VolumeCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeCreateRequest) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *VolumeCreateRequest) GetSizeGb() uint64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *VolumeCreateRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VolumeCreateRequest) GetBackingStore() string {
	if x != nil && x.BackingStore != nil {
		return *x.BackingStore
	}
	return ""
}

type VolumeCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Volume        *Volume                `protobuf:"bytes,3,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeCreateResponse) Reset() {
	*x = VolumeCreateResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCreateResponse) ProtoMessage() {}

func (x *VolumeCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCreateResponse.ProtoReflect.Descriptor instead.
func (*VolumeCreateResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{2}
}

func (x *VolumeCreateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VolumeCreateResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *VolumeCreateResponse) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type VolumeDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pool          string                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Force         *bool                  `protobuf:"varint,3,opt,name=force,proto3,oneof" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeDeleteRequest) Reset() {
	*x = VolumeDeleteRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDeleteRequest) ProtoMessage() {}

func (x *VolumeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDeleteRequest.ProtoReflect.Descriptor instead.
func (*VolumeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{3}
}

func (x *VolumeDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeDeleteRequest) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *VolumeDeleteRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type VolumeDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeDeleteResponse) Reset() {
	*x = VolumeDeleteResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDeleteResponse) ProtoMessage() {}

func (x *VolumeDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDeleteResponse.ProtoReflect.Descriptor instead.
func (*VolumeDeleteResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{4}
}

func (x *VolumeDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VolumeDeleteResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type VolumeResizeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pool          string                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Size          uint64                 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"` // Size in GB.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeResizeRequest) Reset() {
	*x = VolumeResizeRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeResizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeResizeRequest) ProtoMessage() {}

func (x *VolumeResizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeResizeRequest.ProtoReflect.Descriptor instead.
func (*VolumeResizeRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{5}
}

func (x *VolumeResizeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeResizeRequest) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *VolumeResizeRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type VolumeResizeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeResizeResponse) Reset() {
	*x = VolumeResizeResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeResizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeResizeResponse) ProtoMessage() {}

func (x *VolumeResizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeResizeResponse.ProtoReflect.Descriptor instead.
func (*VolumeResizeResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeResizeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VolumeResizeResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type VolumeListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PoolName      *string                `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3,oneof" json:"pool_name,omitempty"` // List volumes in a specific pool
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeListRequest) Reset() {
	*x = VolumeListRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeListRequest) ProtoMessage() {}

func (x *VolumeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeListRequest.ProtoReflect.Descriptor instead.
func (*VolumeListRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{7}
}

func (x *VolumeListRequest) GetPoolName() string {
	if x != nil && x.PoolName != nil {
		return *x.PoolName
	}
	return ""
}

type VolumeListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volumes       []*Volume              `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeListResponse) Reset() {
	*x = VolumeListResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeListResponse) ProtoMessage() {}

func (x *VolumeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeListResponse.ProtoReflect.Descriptor instead.
func (*VolumeListResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{8}
}

func (x *VolumeListResponse) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type VolumeGetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PoolName      string                 `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeGetRequest) Reset() {
	*x = VolumeGetRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGetRequest) ProtoMessage() {}

func (x *VolumeGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGetRequest.ProtoReflect.Descriptor instead.
func (*VolumeGetRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{9}
}

func (x *VolumeGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeGetRequest) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

type VolumeGetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volume        *Volume                `protobuf:"bytes,1,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeGetResponse) Reset() {
	*x = VolumeGetResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGetResponse) ProtoMessage() {}

func (x *VolumeGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGetResponse.ProtoReflect.Descriptor instead.
func (*VolumeGetResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{10}
}

func (x *VolumeGetResponse) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *VolumeGetResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type VolumeCloneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceName    string                 `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	SourcePool    string                 `protobuf:"bytes,2,opt,name=source_pool,json=sourcePool,proto3" json:"source_pool,omitempty"`
	NewName       string                 `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	NewPool       string                 `protobuf:"bytes,4,opt,name=new_pool,json=newPool,proto3" json:"new_pool,omitempty"`
	Shallow       *bool                  `protobuf:"varint,5,opt,name=shallow,proto3,oneof" json:"shallow,omitempty"` // For linked clones
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeCloneRequest) Reset() {
	*x = VolumeCloneRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCloneRequest) ProtoMessage() {}

func (x *VolumeCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCloneRequest.ProtoReflect.Descriptor instead.
func (*VolumeCloneRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{11}
}

func (x *VolumeCloneRequest) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *VolumeCloneRequest) GetSourcePool() string {
	if x != nil {
		return x.SourcePool
	}
	return ""
}

func (x *VolumeCloneRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *VolumeCloneRequest) GetNewPool() string {
	if x != nil {
		return x.NewPool
	}
	return ""
}

func (x *VolumeCloneRequest) GetShallow() bool {
	if x != nil && x.Shallow != nil {
		return *x.Shallow
	}
	return false
}

type VolumeCloneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Volume        *Volume                `protobuf:"bytes,3,opt,name=volume,proto3,oneof" json:"volume,omitempty"` // Details of the new volume
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeCloneResponse) Reset() {
	*x = VolumeCloneResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCloneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCloneResponse) ProtoMessage() {}

func (x *VolumeCloneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCloneResponse.ProtoReflect.Descriptor instead.
func (*VolumeCloneResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{12}
}

func (x *VolumeCloneResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VolumeCloneResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *VolumeCloneResponse) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type VolumeSnapshotCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeName    string                 `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	PoolName      string                 `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	SnapshotName  string                 `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotCreateRequest) Reset() {
	*x = VolumeSnapshotCreateRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotCreateRequest) ProtoMessage() {}

func (x *VolumeSnapshotCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotCreateRequest.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotCreateRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{13}
}

func (x *VolumeSnapshotCreateRequest) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *VolumeSnapshotCreateRequest) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *VolumeSnapshotCreateRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

type VolumeSnapshotCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotCreateResponse) Reset() {
	*x = VolumeSnapshotCreateResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotCreateResponse) ProtoMessage() {}

func (x *VolumeSnapshotCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotCreateResponse.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotCreateResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{14}
}

func (x *VolumeSnapshotCreateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VolumeSnapshotCreateResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type VolumeSnapshotRevertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeName    string                 `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	PoolName      string                 `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	SnapshotName  string                 `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotRevertRequest) Reset() {
	*x = VolumeSnapshotRevertRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotRevertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotRevertRequest) ProtoMessage() {}

func (x *VolumeSnapshotRevertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotRevertRequest.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotRevertRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{15}
}

func (x *VolumeSnapshotRevertRequest) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *VolumeSnapshotRevertRequest) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *VolumeSnapshotRevertRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

type VolumeSnapshotRevertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotRevertResponse) Reset() {
	*x = VolumeSnapshotRevertResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotRevertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotRevertResponse) ProtoMessage() {}

func (x *VolumeSnapshotRevertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotRevertResponse.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotRevertResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{16}
}

func (x *VolumeSnapshotRevertResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VolumeSnapshotRevertResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type VolumeSnapshotDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeName    string                 `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	PoolName      string                 `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	SnapshotName  string                 `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotDeleteRequest) Reset() {
	*x = VolumeSnapshotDeleteRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotDeleteRequest) ProtoMessage() {}

func (x *VolumeSnapshotDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotDeleteRequest.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{17}
}

func (x *VolumeSnapshotDeleteRequest) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *VolumeSnapshotDeleteRequest) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *VolumeSnapshotDeleteRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

type VolumeSnapshotDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotDeleteResponse) Reset() {
	*x = VolumeSnapshotDeleteResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotDeleteResponse) ProtoMessage() {}

func (x *VolumeSnapshotDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotDeleteResponse.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotDeleteResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{18}
}

func (x *VolumeSnapshotDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VolumeSnapshotDeleteResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

// Storage Pool Messages
type StoragePool struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type            string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // e.g., "dir", "lvm"
	Path            string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	CapacityBytes   uint64                 `protobuf:"varint,4,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`
	AllocationBytes uint64                 `protobuf:"varint,5,opt,name=allocation_bytes,json=allocationBytes,proto3" json:"allocation_bytes,omitempty"`
	AvailableBytes  uint64                 `protobuf:"varint,6,opt,name=available_bytes,json=availableBytes,proto3" json:"available_bytes,omitempty"` // Add other pool details
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StoragePool) Reset() {
	*x = StoragePool{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePool) ProtoMessage() {}

func (x *StoragePool) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePool.ProtoReflect.Descriptor instead.
func (*StoragePool) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{19}
}

func (x *StoragePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoragePool) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StoragePool) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StoragePool) GetCapacityBytes() uint64 {
	if x != nil {
		return x.CapacityBytes
	}
	return 0
}

func (x *StoragePool) GetAllocationBytes() uint64 {
	if x != nil {
		return x.AllocationBytes
	}
	return 0
}

func (x *StoragePool) GetAvailableBytes() uint64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

type StoragePoolCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"` // Add other pool configuration options
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoragePoolCreateRequest) Reset() {
	*x = StoragePoolCreateRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePoolCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolCreateRequest) ProtoMessage() {}

func (x *StoragePoolCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolCreateRequest.ProtoReflect.Descriptor instead.
func (*StoragePoolCreateRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{20}
}

func (x *StoragePoolCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoragePoolCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StoragePoolCreateRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type StoragePoolCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Pool          *StoragePool           `protobuf:"bytes,3,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoragePoolCreateResponse) Reset() {
	*x = StoragePoolCreateResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePoolCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolCreateResponse) ProtoMessage() {}

func (x *StoragePoolCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolCreateResponse.ProtoReflect.Descriptor instead.
func (*StoragePoolCreateResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{21}
}

func (x *StoragePoolCreateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StoragePoolCreateResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StoragePoolCreateResponse) GetPool() *StoragePool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type StoragePoolDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoragePoolDeleteRequest) Reset() {
	*x = StoragePoolDeleteRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePoolDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolDeleteRequest) ProtoMessage() {}

func (x *StoragePoolDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolDeleteRequest.ProtoReflect.Descriptor instead.
func (*StoragePoolDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{22}
}

func (x *StoragePoolDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StoragePoolDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoragePoolDeleteResponse) Reset() {
	*x = StoragePoolDeleteResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePoolDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolDeleteResponse) ProtoMessage() {}

func (x *StoragePoolDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolDeleteResponse.ProtoReflect.Descriptor instead.
func (*StoragePoolDeleteResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{23}
}

func (x *StoragePoolDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StoragePoolDeleteResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type StoragePoolListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoragePoolListRequest) Reset() {
	*x = StoragePoolListRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePoolListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolListRequest) ProtoMessage() {}

func (x *StoragePoolListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolListRequest.ProtoReflect.Descriptor instead.
func (*StoragePoolListRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{24}
}

type StoragePoolListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pools         []*StoragePool         `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoragePoolListResponse) Reset() {
	*x = StoragePoolListResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePoolListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolListResponse) ProtoMessage() {}

func (x *StoragePoolListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolListResponse.ProtoReflect.Descriptor instead.
func (*StoragePoolListResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{25}
}

func (x *StoragePoolListResponse) GetPools() []*StoragePool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type StoragePoolGetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoragePoolGetRequest) Reset() {
	*x = StoragePoolGetRequest{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePoolGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolGetRequest) ProtoMessage() {}

func (x *StoragePoolGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolGetRequest.ProtoReflect.Descriptor instead.
func (*StoragePoolGetRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{26}
}

func (x *StoragePoolGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StoragePoolGetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pool          *StoragePool           `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	Error         *ErrorResponse         `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoragePoolGetResponse) Reset() {
	*x = StoragePoolGetResponse{}
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePoolGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolGetResponse) ProtoMessage() {}

func (x *StoragePoolGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolGetResponse.ProtoReflect.Descriptor instead.
func (*StoragePoolGetResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP(), []int{27}
}

func (x *StoragePoolGetResponse) GetPool() *StoragePool {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *StoragePoolGetResponse) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_pilab_cloud_agent_v1_storageservice_proto protoreflect.FileDescriptor

var file_pilab_cloud_agent_v1_storageservice_proto_rawDesc = string([]byte{
	0x0a, 0x29, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x1a, 0x21, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a,
	0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47,
	0x62, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xb3, 0x01,
	0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x43, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01,
	0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0xbf, 0x01,
	0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x01, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x1b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x80, 0x01, 0x0a, 0x1b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x56,
	0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xc4, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48,
	0x01, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x2e, 0x0a,
	0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a,
	0x19, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x18,
	0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x2b, 0x0a, 0x15,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x32, 0xae, 0x0b, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d,
	0x0a, 0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a,
	0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x14,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x6f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x68, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x70, 0x62,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pilab_cloud_agent_v1_storageservice_proto_rawDescOnce sync.Once
	file_pilab_cloud_agent_v1_storageservice_proto_rawDescData []byte
)

func file_pilab_cloud_agent_v1_storageservice_proto_rawDescGZIP() []byte {
	file_pilab_cloud_agent_v1_storageservice_proto_rawDescOnce.Do(func() {
		file_pilab_cloud_agent_v1_storageservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pilab_cloud_agent_v1_storageservice_proto_rawDesc), len(file_pilab_cloud_agent_v1_storageservice_proto_rawDesc)))
	})
	return file_pilab_cloud_agent_v1_storageservice_proto_rawDescData
}

var file_pilab_cloud_agent_v1_storageservice_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_pilab_cloud_agent_v1_storageservice_proto_goTypes = []any{
	(*Volume)(nil),                       // 0: pilab.cloud.agent.v1.Volume
	(*VolumeCreateRequest)(nil),          // 1: pilab.cloud.agent.v1.VolumeCreateRequest
	(*VolumeCreateResponse)(nil),         // 2: pilab.cloud.agent.v1.VolumeCreateResponse
	(*VolumeDeleteRequest)(nil),          // 3: pilab.cloud.agent.v1.VolumeDeleteRequest
	(*VolumeDeleteResponse)(nil),         // 4: pilab.cloud.agent.v1.VolumeDeleteResponse
	(*VolumeResizeRequest)(nil),          // 5: pilab.cloud.agent.v1.VolumeResizeRequest
	(*VolumeResizeResponse)(nil),         // 6: pilab.cloud.agent.v1.VolumeResizeResponse
	(*VolumeListRequest)(nil),            // 7: pilab.cloud.agent.v1.VolumeListRequest
	(*VolumeListResponse)(nil),           // 8: pilab.cloud.agent.v1.VolumeListResponse
	(*VolumeGetRequest)(nil),             // 9: pilab.cloud.agent.v1.VolumeGetRequest
	(*VolumeGetResponse)(nil),            // 10: pilab.cloud.agent.v1.VolumeGetResponse
	(*VolumeCloneRequest)(nil),           // 11: pilab.cloud.agent.v1.VolumeCloneRequest
	(*VolumeCloneResponse)(nil),          // 12: pilab.cloud.agent.v1.VolumeCloneResponse
	(*VolumeSnapshotCreateRequest)(nil),  // 13: pilab.cloud.agent.v1.VolumeSnapshotCreateRequest
	(*VolumeSnapshotCreateResponse)(nil), // 14: pilab.cloud.agent.v1.VolumeSnapshotCreateResponse
	(*VolumeSnapshotRevertRequest)(nil),  // 15: pilab.cloud.agent.v1.VolumeSnapshotRevertRequest
	(*VolumeSnapshotRevertResponse)(nil), // 16: pilab.cloud.agent.v1.VolumeSnapshotRevertResponse
	(*VolumeSnapshotDeleteRequest)(nil),  // 17: pilab.cloud.agent.v1.VolumeSnapshotDeleteRequest
	(*VolumeSnapshotDeleteResponse)(nil), // 18: pilab.cloud.agent.v1.VolumeSnapshotDeleteResponse
	(*StoragePool)(nil),                  // 19: pilab.cloud.agent.v1.StoragePool
	(*StoragePoolCreateRequest)(nil),     // 20: pilab.cloud.agent.v1.StoragePoolCreateRequest
	(*StoragePoolCreateResponse)(nil),    // 21: pilab.cloud.agent.v1.StoragePoolCreateResponse
	(*StoragePoolDeleteRequest)(nil),     // 22: pilab.cloud.agent.v1.StoragePoolDeleteRequest
	(*StoragePoolDeleteResponse)(nil),    // 23: pilab.cloud.agent.v1.StoragePoolDeleteResponse
	(*StoragePoolListRequest)(nil),       // 24: pilab.cloud.agent.v1.StoragePoolListRequest
	(*StoragePoolListResponse)(nil),      // 25: pilab.cloud.agent.v1.StoragePoolListResponse
	(*StoragePoolGetRequest)(nil),        // 26: pilab.cloud.agent.v1.StoragePoolGetRequest
	(*StoragePoolGetResponse)(nil),       // 27: pilab.cloud.agent.v1.StoragePoolGetResponse
	(*ErrorResponse)(nil),                // 28: pilab.cloud.agent.v1.ErrorResponse
}
var file_pilab_cloud_agent_v1_storageservice_proto_depIdxs = []int32{
	28, // 0: pilab.cloud.agent.v1.VolumeCreateResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	0,  // 1: pilab.cloud.agent.v1.VolumeCreateResponse.volume:type_name -> pilab.cloud.agent.v1.Volume
	28, // 2: pilab.cloud.agent.v1.VolumeDeleteResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	28, // 3: pilab.cloud.agent.v1.VolumeResizeResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	0,  // 4: pilab.cloud.agent.v1.VolumeListResponse.volumes:type_name -> pilab.cloud.agent.v1.Volume
	0,  // 5: pilab.cloud.agent.v1.VolumeGetResponse.volume:type_name -> pilab.cloud.agent.v1.Volume
	28, // 6: pilab.cloud.agent.v1.VolumeGetResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	28, // 7: pilab.cloud.agent.v1.VolumeCloneResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	0,  // 8: pilab.cloud.agent.v1.VolumeCloneResponse.volume:type_name -> pilab.cloud.agent.v1.Volume
	28, // 9: pilab.cloud.agent.v1.VolumeSnapshotCreateResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	28, // 10: pilab.cloud.agent.v1.VolumeSnapshotRevertResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	28, // 11: pilab.cloud.agent.v1.VolumeSnapshotDeleteResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	28, // 12: pilab.cloud.agent.v1.StoragePoolCreateResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	19, // 13: pilab.cloud.agent.v1.StoragePoolCreateResponse.pool:type_name -> pilab.cloud.agent.v1.StoragePool
	28, // 14: pilab.cloud.agent.v1.StoragePoolDeleteResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	19, // 15: pilab.cloud.agent.v1.StoragePoolListResponse.pools:type_name -> pilab.cloud.agent.v1.StoragePool
	19, // 16: pilab.cloud.agent.v1.StoragePoolGetResponse.pool:type_name -> pilab.cloud.agent.v1.StoragePool
	28, // 17: pilab.cloud.agent.v1.StoragePoolGetResponse.error:type_name -> pilab.cloud.agent.v1.ErrorResponse
	1,  // 18: pilab.cloud.agent.v1.StorageService.VolumeCreate:input_type -> pilab.cloud.agent.v1.VolumeCreateRequest
	3,  // 19: pilab.cloud.agent.v1.StorageService.VolumeDelete:input_type -> pilab.cloud.agent.v1.VolumeDeleteRequest
	5,  // 20: pilab.cloud.agent.v1.StorageService.VolumeResize:input_type -> pilab.cloud.agent.v1.VolumeResizeRequest
	7,  // 21: pilab.cloud.agent.v1.StorageService.VolumeList:input_type -> pilab.cloud.agent.v1.VolumeListRequest
	9,  // 22: pilab.cloud.agent.v1.StorageService.VolumeGet:input_type -> pilab.cloud.agent.v1.VolumeGetRequest
	11, // 23: pilab.cloud.agent.v1.StorageService.VolumeClone:input_type -> pilab.cloud.agent.v1.VolumeCloneRequest
	13, // 24: pilab.cloud.agent.v1.StorageService.VolumeSnapshotCreate:input_type -> pilab.cloud.agent.v1.VolumeSnapshotCreateRequest
	15, // 25: pilab.cloud.agent.v1.StorageService.VolumeSnapshotRevert:input_type -> pilab.cloud.agent.v1.VolumeSnapshotRevertRequest
	17, // 26: pilab.cloud.agent.v1.StorageService.VolumeSnapshotDelete:input_type -> pilab.cloud.agent.v1.VolumeSnapshotDeleteRequest
	20, // 27: pilab.cloud.agent.v1.StorageService.StoragePoolCreate:input_type -> pilab.cloud.agent.v1.StoragePoolCreateRequest
	22, // 28: pilab.cloud.agent.v1.StorageService.StoragePoolDelete:input_type -> pilab.cloud.agent.v1.StoragePoolDeleteRequest
	24, // 29: pilab.cloud.agent.v1.StorageService.StoragePoolList:input_type -> pilab.cloud.agent.v1.StoragePoolListRequest
	26, // 30: pilab.cloud.agent.v1.StorageService.StoragePoolGet:input_type -> pilab.cloud.agent.v1.StoragePoolGetRequest
	2,  // 31: pilab.cloud.agent.v1.StorageService.VolumeCreate:output_type -> pilab.cloud.agent.v1.VolumeCreateResponse
	4,  // 32: pilab.cloud.agent.v1.StorageService.VolumeDelete:output_type -> pilab.cloud.agent.v1.VolumeDeleteResponse
	6,  // 33: pilab.cloud.agent.v1.StorageService.VolumeResize:output_type -> pilab.cloud.agent.v1.VolumeResizeResponse
	8,  // 34: pilab.cloud.agent.v1.StorageService.VolumeList:output_type -> pilab.cloud.agent.v1.VolumeListResponse
	10, // 35: pilab.cloud.agent.v1.StorageService.VolumeGet:output_type -> pilab.cloud.agent.v1.VolumeGetResponse
	12, // 36: pilab.cloud.agent.v1.StorageService.VolumeClone:output_type -> pilab.cloud.agent.v1.VolumeCloneResponse
	14, // 37: pilab.cloud.agent.v1.StorageService.VolumeSnapshotCreate:output_type -> pilab.cloud.agent.v1.VolumeSnapshotCreateResponse
	16, // 38: pilab.cloud.agent.v1.StorageService.VolumeSnapshotRevert:output_type -> pilab.cloud.agent.v1.VolumeSnapshotRevertResponse
	18, // 39: pilab.cloud.agent.v1.StorageService.VolumeSnapshotDelete:output_type -> pilab.cloud.agent.v1.VolumeSnapshotDeleteResponse
	21, // 40: pilab.cloud.agent.v1.StorageService.StoragePoolCreate:output_type -> pilab.cloud.agent.v1.StoragePoolCreateResponse
	23, // 41: pilab.cloud.agent.v1.StorageService.StoragePoolDelete:output_type -> pilab.cloud.agent.v1.StoragePoolDeleteResponse
	25, // 42: pilab.cloud.agent.v1.StorageService.StoragePoolList:output_type -> pilab.cloud.agent.v1.StoragePoolListResponse
	27, // 43: pilab.cloud.agent.v1.StorageService.StoragePoolGet:output_type -> pilab.cloud.agent.v1.StoragePoolGetResponse
	31, // [31:44] is the sub-list for method output_type
	18, // [18:31] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_pilab_cloud_agent_v1_storageservice_proto_init() }
func file_pilab_cloud_agent_v1_storageservice_proto_init() {
	if File_pilab_cloud_agent_v1_storageservice_proto != nil {
		return
	}
	file_pilab_cloud_agent_v1_stream_proto_init()
	file_pilab_cloud_agent_v1_agentservice_proto_init()
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[1].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[2].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[3].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[4].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[6].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[7].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[10].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[11].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[12].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[14].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[16].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[18].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[21].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[23].OneofWrappers = []any{}
	file_pilab_cloud_agent_v1_storageservice_proto_msgTypes[27].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pilab_cloud_agent_v1_storageservice_proto_rawDesc), len(file_pilab_cloud_agent_v1_storageservice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilab_cloud_agent_v1_storageservice_proto_goTypes,
		DependencyIndexes: file_pilab_cloud_agent_v1_storageservice_proto_depIdxs,
		MessageInfos:      file_pilab_cloud_agent_v1_storageservice_proto_msgTypes,
	}.Build()
	File_pilab_cloud_agent_v1_storageservice_proto = out.File
	file_pilab_cloud_agent_v1_storageservice_proto_goTypes = nil
	file_pilab_cloud_agent_v1_storageservice_proto_depIdxs = nil
}
