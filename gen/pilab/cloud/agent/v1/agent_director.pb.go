// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: pilab/cloud/agent/v1/agent_director.proto

package agentv1

import (
	_ "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/vmmanager/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VMState int32

const (
	VMState_NOSTATE   VMState = 0
	VMState_RUNNING   VMState = 1
	VMState_BLOCKED   VMState = 2
	VMState_PAUSED    VMState = 3
	VMState_SHUTDOWN  VMState = 4
	VMState_SHUTOFF   VMState = 5
	VMState_CRASHED   VMState = 6
	VMState_SUSPENDED VMState = 7
)

// Enum value maps for VMState.
var (
	VMState_name = map[int32]string{
		0: "NOSTATE",
		1: "RUNNING",
		2: "BLOCKED",
		3: "PAUSED",
		4: "SHUTDOWN",
		5: "SHUTOFF",
		6: "CRASHED",
		7: "SUSPENDED",
	}
	VMState_value = map[string]int32{
		"NOSTATE":   0,
		"RUNNING":   1,
		"BLOCKED":   2,
		"PAUSED":    3,
		"SHUTDOWN":  4,
		"SHUTOFF":   5,
		"CRASHED":   6,
		"SUSPENDED": 7,
	}
)

func (x VMState) Enum() *VMState {
	p := new(VMState)
	*p = x
	return p
}

func (x VMState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VMState) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[0].Descriptor()
}

func (VMState) Type() protoreflect.EnumType {
	return &file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[0]
}

func (x VMState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VMState.Descriptor instead.
func (VMState) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{0}
}

type HypervisorStatus_HealthStatus int32

const (
	HypervisorStatus_OK      HypervisorStatus_HealthStatus = 0
	HypervisorStatus_WARNING HypervisorStatus_HealthStatus = 1
	HypervisorStatus_ERROR   HypervisorStatus_HealthStatus = 2
)

// Enum value maps for HypervisorStatus_HealthStatus.
var (
	HypervisorStatus_HealthStatus_name = map[int32]string{
		0: "OK",
		1: "WARNING",
		2: "ERROR",
	}
	HypervisorStatus_HealthStatus_value = map[string]int32{
		"OK":      0,
		"WARNING": 1,
		"ERROR":   2,
	}
)

func (x HypervisorStatus_HealthStatus) Enum() *HypervisorStatus_HealthStatus {
	p := new(HypervisorStatus_HealthStatus)
	*p = x
	return p
}

func (x HypervisorStatus_HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HypervisorStatus_HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[1].Descriptor()
}

func (HypervisorStatus_HealthStatus) Type() protoreflect.EnumType {
	return &file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[1]
}

func (x HypervisorStatus_HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HypervisorStatus_HealthStatus.Descriptor instead.
func (HypervisorStatus_HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{6, 0}
}

type Event_Severity int32

const (
	Event_INFO    Event_Severity = 0
	Event_WARNING Event_Severity = 1
	Event_ERROR   Event_Severity = 2
)

// Enum value maps for Event_Severity.
var (
	Event_Severity_name = map[int32]string{
		0: "INFO",
		1: "WARNING",
		2: "ERROR",
	}
	Event_Severity_value = map[string]int32{
		"INFO":    0,
		"WARNING": 1,
		"ERROR":   2,
	}
)

func (x Event_Severity) Enum() *Event_Severity {
	p := new(Event_Severity)
	*p = x
	return p
}

func (x Event_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[2].Descriptor()
}

func (Event_Severity) Type() protoreflect.EnumType {
	return &file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[2]
}

func (x Event_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Severity.Descriptor instead.
func (Event_Severity) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{10, 0}
}

type LogRequest_LogLevel int32

const (
	LogRequest_DEBUG   LogRequest_LogLevel = 0
	LogRequest_INFO    LogRequest_LogLevel = 1
	LogRequest_WARNING LogRequest_LogLevel = 2
	LogRequest_ERROR   LogRequest_LogLevel = 3
)

// Enum value maps for LogRequest_LogLevel.
var (
	LogRequest_LogLevel_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "WARNING",
		3: "ERROR",
	}
	LogRequest_LogLevel_value = map[string]int32{
		"DEBUG":   0,
		"INFO":    1,
		"WARNING": 2,
		"ERROR":   3,
	}
)

func (x LogRequest_LogLevel) Enum() *LogRequest_LogLevel {
	p := new(LogRequest_LogLevel)
	*p = x
	return p
}

func (x LogRequest_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogRequest_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[3].Descriptor()
}

func (LogRequest_LogLevel) Type() protoreflect.EnumType {
	return &file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[3]
}

func (x LogRequest_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogRequest_LogLevel.Descriptor instead.
func (LogRequest_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{11, 0}
}

type TaskProgress_TaskStatus int32

const (
	TaskProgress_PENDING   TaskProgress_TaskStatus = 0
	TaskProgress_RUNNING   TaskProgress_TaskStatus = 1
	TaskProgress_COMPLETED TaskProgress_TaskStatus = 2
	TaskProgress_FAILED    TaskProgress_TaskStatus = 3
)

// Enum value maps for TaskProgress_TaskStatus.
var (
	TaskProgress_TaskStatus_name = map[int32]string{
		0: "PENDING",
		1: "RUNNING",
		2: "COMPLETED",
		3: "FAILED",
	}
	TaskProgress_TaskStatus_value = map[string]int32{
		"PENDING":   0,
		"RUNNING":   1,
		"COMPLETED": 2,
		"FAILED":    3,
	}
)

func (x TaskProgress_TaskStatus) Enum() *TaskProgress_TaskStatus {
	p := new(TaskProgress_TaskStatus)
	*p = x
	return p
}

func (x TaskProgress_TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskProgress_TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[4].Descriptor()
}

func (TaskProgress_TaskStatus) Type() protoreflect.EnumType {
	return &file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[4]
}

func (x TaskProgress_TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskProgress_TaskStatus.Descriptor instead.
func (TaskProgress_TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{13, 0}
}

type WorkflowState_StepState int32

const (
	WorkflowState_PENDING   WorkflowState_StepState = 0
	WorkflowState_RUNNING   WorkflowState_StepState = 1
	WorkflowState_SUCCEEDED WorkflowState_StepState = 2
	WorkflowState_FAILED    WorkflowState_StepState = 3
)

// Enum value maps for WorkflowState_StepState.
var (
	WorkflowState_StepState_name = map[int32]string{
		0: "PENDING",
		1: "RUNNING",
		2: "SUCCEEDED",
		3: "FAILED",
	}
	WorkflowState_StepState_value = map[string]int32{
		"PENDING":   0,
		"RUNNING":   1,
		"SUCCEEDED": 2,
		"FAILED":    3,
	}
)

func (x WorkflowState_StepState) Enum() *WorkflowState_StepState {
	p := new(WorkflowState_StepState)
	*p = x
	return p
}

func (x WorkflowState_StepState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowState_StepState) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[5].Descriptor()
}

func (WorkflowState_StepState) Type() protoreflect.EnumType {
	return &file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[5]
}

func (x WorkflowState_StepState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowState_StepState.Descriptor instead.
func (WorkflowState_StepState) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{14, 0}
}

type AgentUpdateStatus_UpdateStatus int32

const (
	AgentUpdateStatus_UNKNOWN     AgentUpdateStatus_UpdateStatus = 0
	AgentUpdateStatus_DOWNLOADING AgentUpdateStatus_UpdateStatus = 1
	AgentUpdateStatus_INSTALLING  AgentUpdateStatus_UpdateStatus = 2
	AgentUpdateStatus_SUCCESSFUL  AgentUpdateStatus_UpdateStatus = 3
	AgentUpdateStatus_FAILED      AgentUpdateStatus_UpdateStatus = 4
)

// Enum value maps for AgentUpdateStatus_UpdateStatus.
var (
	AgentUpdateStatus_UpdateStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "DOWNLOADING",
		2: "INSTALLING",
		3: "SUCCESSFUL",
		4: "FAILED",
	}
	AgentUpdateStatus_UpdateStatus_value = map[string]int32{
		"UNKNOWN":     0,
		"DOWNLOADING": 1,
		"INSTALLING":  2,
		"SUCCESSFUL":  3,
		"FAILED":      4,
	}
)

func (x AgentUpdateStatus_UpdateStatus) Enum() *AgentUpdateStatus_UpdateStatus {
	p := new(AgentUpdateStatus_UpdateStatus)
	*p = x
	return p
}

func (x AgentUpdateStatus_UpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentUpdateStatus_UpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[6].Descriptor()
}

func (AgentUpdateStatus_UpdateStatus) Type() protoreflect.EnumType {
	return &file_pilab_cloud_agent_v1_agent_director_proto_enumTypes[6]
}

func (x AgentUpdateStatus_UpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentUpdateStatus_UpdateStatus.Descriptor instead.
func (AgentUpdateStatus_UpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{15, 0}
}

// --- Status and Health Messages ---
type HardwareStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceUuid    string                 `protobuf:"bytes,1,opt,name=device_uuid,json=deviceUuid,proto3" json:"device_uuid,omitempty"`
	VmUuid        string                 `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`                   //(optional)
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                 // "attached", "detached", etc.
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` //(optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HardwareStatusUpdate) Reset() {
	*x = HardwareStatusUpdate{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardwareStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareStatusUpdate) ProtoMessage() {}

func (x *HardwareStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareStatusUpdate.ProtoReflect.Descriptor instead.
func (*HardwareStatusUpdate) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{0}
}

func (x *HardwareStatusUpdate) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *HardwareStatusUpdate) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *HardwareStatusUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HardwareStatusUpdate) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DiskStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DiskUuid      string                 `protobuf:"bytes,1,opt,name=disk_uuid,json=diskUuid,proto3" json:"disk_uuid,omitempty"`
	VmUuid        string                 `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`                   //(optional)
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                 // "active", "failed", etc.
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` //(optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskStatusUpdate) Reset() {
	*x = DiskStatusUpdate{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskStatusUpdate) ProtoMessage() {}

func (x *DiskStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskStatusUpdate.ProtoReflect.Descriptor instead.
func (*DiskStatusUpdate) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{1}
}

func (x *DiskStatusUpdate) GetDiskUuid() string {
	if x != nil {
		return x.DiskUuid
	}
	return ""
}

func (x *DiskStatusUpdate) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *DiskStatusUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DiskStatusUpdate) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type NetworkInterfaceStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterfaceUuid string                 `protobuf:"bytes,1,opt,name=interface_uuid,json=interfaceUuid,proto3" json:"interface_uuid,omitempty"`
	VmUuid        string                 `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                 // "connected", "disconnected"
	MacAddress    string                 `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`       //(optional)
	ErrorMessage  string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` //(optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInterfaceStatusUpdate) Reset() {
	*x = NetworkInterfaceStatusUpdate{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterfaceStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaceStatusUpdate) ProtoMessage() {}

func (x *NetworkInterfaceStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaceStatusUpdate.ProtoReflect.Descriptor instead.
func (*NetworkInterfaceStatusUpdate) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkInterfaceStatusUpdate) GetInterfaceUuid() string {
	if x != nil {
		return x.InterfaceUuid
	}
	return ""
}

func (x *NetworkInterfaceStatusUpdate) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *NetworkInterfaceStatusUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetworkInterfaceStatusUpdate) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterfaceStatusUpdate) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type VMStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmUuid        string                 `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	State         VMState                `protobuf:"varint,2,opt,name=state,proto3,enum=agent_director.VMState" json:"state,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` //(optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VMStatusUpdate) Reset() {
	*x = VMStatusUpdate{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMStatusUpdate) ProtoMessage() {}

func (x *VMStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMStatusUpdate.ProtoReflect.Descriptor instead.
func (*VMStatusUpdate) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{3}
}

func (x *VMStatusUpdate) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *VMStatusUpdate) GetState() VMState {
	if x != nil {
		return x.State
	}
	return VMState_NOSTATE
}

func (x *VMStatusUpdate) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentVersion  string                 `protobuf:"bytes,2,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{4}
}

func (x *HeartbeatRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *HeartbeatRequest) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

type HeartbeatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Can include configuration updates, commands, or other instructions for the agent.
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{5}
}

func (x *HeartbeatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HypervisorStatus struct {
	state             protoimpl.MessageState        `protogen:"open.v1"`
	CpuUsage          float32                       `protobuf:"fixed32,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryTotalMb     int64                         `protobuf:"varint,2,opt,name=memory_total_mb,json=memoryTotalMb,proto3" json:"memory_total_mb,omitempty"`
	MemoryUsedMb      int64                         `protobuf:"varint,3,opt,name=memory_used_mb,json=memoryUsedMb,proto3" json:"memory_used_mb,omitempty"`
	StorageTotalMb    int64                         `protobuf:"varint,4,opt,name=storage_total_mb,json=storageTotalMb,proto3" json:"storage_total_mb,omitempty"`
	StorageUsedMb     int64                         `protobuf:"varint,5,opt,name=storage_used_mb,json=storageUsedMb,proto3" json:"storage_used_mb,omitempty"`
	NetworkInterfaces []*NetworkInterfaceStatus     `protobuf:"bytes,6,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	HealthStatus      HypervisorStatus_HealthStatus `protobuf:"varint,7,opt,name=health_status,json=healthStatus,proto3,enum=agent_director.HypervisorStatus_HealthStatus" json:"health_status,omitempty"`
	HealthDetails     string                        `protobuf:"bytes,8,opt,name=health_details,json=healthDetails,proto3" json:"health_details,omitempty"`
	RunningVms        int32                         `protobuf:"varint,9,opt,name=running_vms,json=runningVms,proto3" json:"running_vms,omitempty"`
	StoppedVms        int32                         `protobuf:"varint,10,opt,name=stopped_vms,json=stoppedVms,proto3" json:"stopped_vms,omitempty"`
	HypervisorVersion string                        `protobuf:"bytes,11,opt,name=hypervisor_version,json=hypervisorVersion,proto3" json:"hypervisor_version,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HypervisorStatus) Reset() {
	*x = HypervisorStatus{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HypervisorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypervisorStatus) ProtoMessage() {}

func (x *HypervisorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypervisorStatus.ProtoReflect.Descriptor instead.
func (*HypervisorStatus) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{6}
}

func (x *HypervisorStatus) GetCpuUsage() float32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *HypervisorStatus) GetMemoryTotalMb() int64 {
	if x != nil {
		return x.MemoryTotalMb
	}
	return 0
}

func (x *HypervisorStatus) GetMemoryUsedMb() int64 {
	if x != nil {
		return x.MemoryUsedMb
	}
	return 0
}

func (x *HypervisorStatus) GetStorageTotalMb() int64 {
	if x != nil {
		return x.StorageTotalMb
	}
	return 0
}

func (x *HypervisorStatus) GetStorageUsedMb() int64 {
	if x != nil {
		return x.StorageUsedMb
	}
	return 0
}

func (x *HypervisorStatus) GetNetworkInterfaces() []*NetworkInterfaceStatus {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *HypervisorStatus) GetHealthStatus() HypervisorStatus_HealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return HypervisorStatus_OK
}

func (x *HypervisorStatus) GetHealthDetails() string {
	if x != nil {
		return x.HealthDetails
	}
	return ""
}

func (x *HypervisorStatus) GetRunningVms() int32 {
	if x != nil {
		return x.RunningVms
	}
	return 0
}

func (x *HypervisorStatus) GetStoppedVms() int32 {
	if x != nil {
		return x.StoppedVms
	}
	return 0
}

func (x *HypervisorStatus) GetHypervisorVersion() string {
	if x != nil {
		return x.HypervisorVersion
	}
	return ""
}

type NetworkInterfaceStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Up            bool                   `protobuf:"varint,2,opt,name=up,proto3" json:"up,omitempty"`
	BandwidthMbps float32                `protobuf:"fixed32,3,opt,name=bandwidth_mbps,json=bandwidthMbps,proto3" json:"bandwidth_mbps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInterfaceStatus) Reset() {
	*x = NetworkInterfaceStatus{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterfaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaceStatus) ProtoMessage() {}

func (x *NetworkInterfaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaceStatus.ProtoReflect.Descriptor instead.
func (*NetworkInterfaceStatus) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkInterfaceStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterfaceStatus) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

func (x *NetworkInterfaceStatus) GetBandwidthMbps() float32 {
	if x != nil {
		return x.BandwidthMbps
	}
	return 0
}

type VMMetrics struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	VmUuid             string                      `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	CpuUsages          []*VMMetrics_CPUUsage       `protobuf:"bytes,2,rep,name=cpu_usages,json=cpuUsages,proto3" json:"cpu_usages,omitempty"`
	MemoryUsagePercent float32                     `protobuf:"fixed32,3,opt,name=memory_usage_percent,json=memoryUsagePercent,proto3" json:"memory_usage_percent,omitempty"`
	MemoryUsageMb      int64                       `protobuf:"varint,4,opt,name=memory_usage_mb,json=memoryUsageMb,proto3" json:"memory_usage_mb,omitempty"`
	DiskIo             *VMMetrics_DiskIOMetrics    `protobuf:"bytes,5,opt,name=disk_io,json=diskIo,proto3" json:"disk_io,omitempty"`
	NetworkIo          *VMMetrics_NetworkIOMetrics `protobuf:"bytes,6,opt,name=network_io,json=networkIo,proto3" json:"network_io,omitempty"`
	Timestamp          *timestamppb.Timestamp      `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *VMMetrics) Reset() {
	*x = VMMetrics{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMMetrics) ProtoMessage() {}

func (x *VMMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMMetrics.ProtoReflect.Descriptor instead.
func (*VMMetrics) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{8}
}

func (x *VMMetrics) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *VMMetrics) GetCpuUsages() []*VMMetrics_CPUUsage {
	if x != nil {
		return x.CpuUsages
	}
	return nil
}

func (x *VMMetrics) GetMemoryUsagePercent() float32 {
	if x != nil {
		return x.MemoryUsagePercent
	}
	return 0
}

func (x *VMMetrics) GetMemoryUsageMb() int64 {
	if x != nil {
		return x.MemoryUsageMb
	}
	return 0
}

func (x *VMMetrics) GetDiskIo() *VMMetrics_DiskIOMetrics {
	if x != nil {
		return x.DiskIo
	}
	return nil
}

func (x *VMMetrics) GetNetworkIo() *VMMetrics_NetworkIOMetrics {
	if x != nil {
		return x.NetworkIo
	}
	return nil
}

func (x *VMMetrics) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type HypervisorResourceUsage struct {
	state           protoimpl.MessageState                    `protogen:"open.v1"`
	CpuUsagePercent float32                                   `protobuf:"fixed32,1,opt,name=cpu_usage_percent,json=cpuUsagePercent,proto3" json:"cpu_usage_percent,omitempty"`
	MemoryUsageMb   int64                                     `protobuf:"varint,2,opt,name=memory_usage_mb,json=memoryUsageMb,proto3" json:"memory_usage_mb,omitempty"`
	DiskUsageMb     int64                                     `protobuf:"varint,3,opt,name=disk_usage_mb,json=diskUsageMb,proto3" json:"disk_usage_mb,omitempty"`
	NetworkIo       *HypervisorResourceUsage_NetworkIOMetrics `protobuf:"bytes,4,opt,name=network_io,json=networkIo,proto3" json:"network_io,omitempty"`
	Timestamp       *timestamppb.Timestamp                    `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HypervisorResourceUsage) Reset() {
	*x = HypervisorResourceUsage{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HypervisorResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypervisorResourceUsage) ProtoMessage() {}

func (x *HypervisorResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypervisorResourceUsage.ProtoReflect.Descriptor instead.
func (*HypervisorResourceUsage) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{9}
}

func (x *HypervisorResourceUsage) GetCpuUsagePercent() float32 {
	if x != nil {
		return x.CpuUsagePercent
	}
	return 0
}

func (x *HypervisorResourceUsage) GetMemoryUsageMb() int64 {
	if x != nil {
		return x.MemoryUsageMb
	}
	return 0
}

func (x *HypervisorResourceUsage) GetDiskUsageMb() int64 {
	if x != nil {
		return x.DiskUsageMb
	}
	return 0
}

func (x *HypervisorResourceUsage) GetNetworkIo() *HypervisorResourceUsage_NetworkIOMetrics {
	if x != nil {
		return x.NetworkIo
	}
	return nil
}

func (x *HypervisorResourceUsage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	VmUuid        string                 `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"` // Optional, if the event is related to a VM
	Severity      Event_Severity         `protobuf:"varint,3,opt,name=severity,proto3,enum=agent_director.Event_Severity" json:"severity,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Details       map[string]string      `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Optional structured details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{10}
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *Event) GetSeverity() Event_Severity {
	if x != nil {
		return x.Severity
	}
	return Event_INFO
}

func (x *Event) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Event) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

type LogRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"` // "hypervisor" or vm_uuid
	LogLevel      LogRequest_LogLevel    `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3,enum=agent_director.LogRequest_LogLevel" json:"log_level,omitempty"`
	Filter        string                 `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"` // Optional regex filter
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{11}
}

func (x *LogRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LogRequest) GetLogLevel() LogRequest_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LogRequest_DEBUG
}

func (x *LogRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type LogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{12}
}

func (x *LogResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogResponse) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LogResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TaskProgress struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	TaskId          string                  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status          TaskProgress_TaskStatus `protobuf:"varint,2,opt,name=status,proto3,enum=agent_director.TaskProgress_TaskStatus" json:"status,omitempty"`
	ProgressPercent float32                 `protobuf:"fixed32,3,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"` // Optional
	Output          string                  `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`                                            // Optional output or error messages
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskProgress) Reset() {
	*x = TaskProgress{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgress) ProtoMessage() {}

func (x *TaskProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgress.ProtoReflect.Descriptor instead.
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{13}
}

func (x *TaskProgress) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskProgress) GetStatus() TaskProgress_TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskProgress_PENDING
}

func (x *TaskProgress) GetProgressPercent() float32 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *TaskProgress) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type WorkflowState struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	WorkflowId    string                  `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	StepId        string                  `protobuf:"bytes,2,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	State         WorkflowState_StepState `protobuf:"varint,3,opt,name=state,proto3,enum=agent_director.WorkflowState_StepState" json:"state,omitempty"`
	OutputData    map[string]string       `protobuf:"bytes,4,rep,name=output_data,json=outputData,proto3" json:"output_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Output data from the step
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowState) Reset() {
	*x = WorkflowState{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowState) ProtoMessage() {}

func (x *WorkflowState) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowState.ProtoReflect.Descriptor instead.
func (*WorkflowState) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{14}
}

func (x *WorkflowState) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowState) GetStepId() string {
	if x != nil {
		return x.StepId
	}
	return ""
}

func (x *WorkflowState) GetState() WorkflowState_StepState {
	if x != nil {
		return x.State
	}
	return WorkflowState_PENDING
}

func (x *WorkflowState) GetOutputData() map[string]string {
	if x != nil {
		return x.OutputData
	}
	return nil
}

type AgentUpdateStatus struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Status        AgentUpdateStatus_UpdateStatus `protobuf:"varint,1,opt,name=status,proto3,enum=agent_director.AgentUpdateStatus_UpdateStatus" json:"status,omitempty"`
	Message       string                         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Optional details or error message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentUpdateStatus) Reset() {
	*x = AgentUpdateStatus{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentUpdateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUpdateStatus) ProtoMessage() {}

func (x *AgentUpdateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUpdateStatus.ProtoReflect.Descriptor instead.
func (*AgentUpdateStatus) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{15}
}

func (x *AgentUpdateStatus) GetStatus() AgentUpdateStatus_UpdateStatus {
	if x != nil {
		return x.Status
	}
	return AgentUpdateStatus_UNKNOWN
}

func (x *AgentUpdateStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AgentConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigData    string                 `protobuf:"bytes,1,opt,name=config_data,json=configData,proto3" json:"config_data,omitempty"` // Serialized configuration data (e.g., JSON, YAML)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentConfiguration) Reset() {
	*x = AgentConfiguration{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfiguration) ProtoMessage() {}

func (x *AgentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfiguration.ProtoReflect.Descriptor instead.
func (*AgentConfiguration) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{16}
}

func (x *AgentConfiguration) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

type VMMetrics_CPUUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VcpuId        uint32                 `protobuf:"varint,1,opt,name=vcpu_id,json=vcpuId,proto3" json:"vcpu_id,omitempty"`
	UsagePercent  float32                `protobuf:"fixed32,2,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VMMetrics_CPUUsage) Reset() {
	*x = VMMetrics_CPUUsage{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMMetrics_CPUUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMMetrics_CPUUsage) ProtoMessage() {}

func (x *VMMetrics_CPUUsage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMMetrics_CPUUsage.ProtoReflect.Descriptor instead.
func (*VMMetrics_CPUUsage) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{8, 0}
}

func (x *VMMetrics_CPUUsage) GetVcpuId() uint32 {
	if x != nil {
		return x.VcpuId
	}
	return 0
}

func (x *VMMetrics_CPUUsage) GetUsagePercent() float32 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

type VMMetrics_DiskIOMetrics struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ReadBytesPerSecond  int64                  `protobuf:"varint,1,opt,name=read_bytes_per_second,json=readBytesPerSecond,proto3" json:"read_bytes_per_second,omitempty"`
	WriteBytesPerSecond int64                  `protobuf:"varint,2,opt,name=write_bytes_per_second,json=writeBytesPerSecond,proto3" json:"write_bytes_per_second,omitempty"`
	ReadIops            int64                  `protobuf:"varint,3,opt,name=read_iops,json=readIops,proto3" json:"read_iops,omitempty"`
	WriteIops           int64                  `protobuf:"varint,4,opt,name=write_iops,json=writeIops,proto3" json:"write_iops,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VMMetrics_DiskIOMetrics) Reset() {
	*x = VMMetrics_DiskIOMetrics{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMMetrics_DiskIOMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMMetrics_DiskIOMetrics) ProtoMessage() {}

func (x *VMMetrics_DiskIOMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMMetrics_DiskIOMetrics.ProtoReflect.Descriptor instead.
func (*VMMetrics_DiskIOMetrics) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{8, 1}
}

func (x *VMMetrics_DiskIOMetrics) GetReadBytesPerSecond() int64 {
	if x != nil {
		return x.ReadBytesPerSecond
	}
	return 0
}

func (x *VMMetrics_DiskIOMetrics) GetWriteBytesPerSecond() int64 {
	if x != nil {
		return x.WriteBytesPerSecond
	}
	return 0
}

func (x *VMMetrics_DiskIOMetrics) GetReadIops() int64 {
	if x != nil {
		return x.ReadIops
	}
	return 0
}

func (x *VMMetrics_DiskIOMetrics) GetWriteIops() int64 {
	if x != nil {
		return x.WriteIops
	}
	return 0
}

type VMMetrics_NetworkIOMetrics struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ReceiveBytesPerSecond  int64                  `protobuf:"varint,1,opt,name=receive_bytes_per_second,json=receiveBytesPerSecond,proto3" json:"receive_bytes_per_second,omitempty"`
	TransmitBytesPerSecond int64                  `protobuf:"varint,2,opt,name=transmit_bytes_per_second,json=transmitBytesPerSecond,proto3" json:"transmit_bytes_per_second,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *VMMetrics_NetworkIOMetrics) Reset() {
	*x = VMMetrics_NetworkIOMetrics{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMMetrics_NetworkIOMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMMetrics_NetworkIOMetrics) ProtoMessage() {}

func (x *VMMetrics_NetworkIOMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMMetrics_NetworkIOMetrics.ProtoReflect.Descriptor instead.
func (*VMMetrics_NetworkIOMetrics) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{8, 2}
}

func (x *VMMetrics_NetworkIOMetrics) GetReceiveBytesPerSecond() int64 {
	if x != nil {
		return x.ReceiveBytesPerSecond
	}
	return 0
}

func (x *VMMetrics_NetworkIOMetrics) GetTransmitBytesPerSecond() int64 {
	if x != nil {
		return x.TransmitBytesPerSecond
	}
	return 0
}

type HypervisorResourceUsage_NetworkIOMetrics struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ReceiveBytesPerSecond  int64                  `protobuf:"varint,1,opt,name=receive_bytes_per_second,json=receiveBytesPerSecond,proto3" json:"receive_bytes_per_second,omitempty"`
	TransmitBytesPerSecond int64                  `protobuf:"varint,2,opt,name=transmit_bytes_per_second,json=transmitBytesPerSecond,proto3" json:"transmit_bytes_per_second,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HypervisorResourceUsage_NetworkIOMetrics) Reset() {
	*x = HypervisorResourceUsage_NetworkIOMetrics{}
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HypervisorResourceUsage_NetworkIOMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypervisorResourceUsage_NetworkIOMetrics) ProtoMessage() {}

func (x *HypervisorResourceUsage_NetworkIOMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v1_agent_director_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypervisorResourceUsage_NetworkIOMetrics.ProtoReflect.Descriptor instead.
func (*HypervisorResourceUsage_NetworkIOMetrics) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP(), []int{9, 0}
}

func (x *HypervisorResourceUsage_NetworkIOMetrics) GetReceiveBytesPerSecond() int64 {
	if x != nil {
		return x.ReceiveBytesPerSecond
	}
	return 0
}

func (x *HypervisorResourceUsage_NetworkIOMetrics) GetTransmitBytesPerSecond() int64 {
	if x != nil {
		return x.TransmitBytesPerSecond
	}
	return 0
}

var File_pilab_cloud_agent_v1_agent_director_proto protoreflect.FileDescriptor

var file_pilab_cloud_agent_v1_agent_director_proto_rawDesc = string([]byte{
	0x0a, 0x29, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1c,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x0e, 0x56, 0x4d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a,
	0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc2, 0x04, 0x0a,
	0x10, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x62, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x62, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x62,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x62, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x62, 0x12, 0x55,
	0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6d, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x6d,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x76, 0x6d, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x56,
	0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x2e, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x22, 0x63, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x4d, 0x62, 0x70, 0x73, 0x22, 0x91, 0x06, 0x0a, 0x09, 0x56, 0x4d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0a, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x50, 0x55,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x62, 0x12, 0x40, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x4d, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6f, 0x12, 0x49, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x4f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0x48, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x63, 0x70, 0x75, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0xb3, 0x01, 0x0a, 0x0d,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65,
	0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6f,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6f,
	0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70,
	0x73, 0x1a, 0x86, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x4f, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xad, 0x03, 0x0a, 0x17, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x62, 0x12, 0x57,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x4f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0x86, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x4f, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xb7, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22,
	0x79, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x0c, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x41, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xd9, 0x02, 0x0a, 0x0d,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x09, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x58, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0x35, 0x0a, 0x12, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x2a, 0x73, 0x0a, 0x07, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x48, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x41,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x07, 0x32, 0xb0, 0x09, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58,
	0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x1c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x19, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56,
	0x4d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1d, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x6f, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x68, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x69,
	0x72, 0x74, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pilab_cloud_agent_v1_agent_director_proto_rawDescOnce sync.Once
	file_pilab_cloud_agent_v1_agent_director_proto_rawDescData []byte
)

func file_pilab_cloud_agent_v1_agent_director_proto_rawDescGZIP() []byte {
	file_pilab_cloud_agent_v1_agent_director_proto_rawDescOnce.Do(func() {
		file_pilab_cloud_agent_v1_agent_director_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pilab_cloud_agent_v1_agent_director_proto_rawDesc), len(file_pilab_cloud_agent_v1_agent_director_proto_rawDesc)))
	})
	return file_pilab_cloud_agent_v1_agent_director_proto_rawDescData
}

var file_pilab_cloud_agent_v1_agent_director_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_pilab_cloud_agent_v1_agent_director_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_pilab_cloud_agent_v1_agent_director_proto_goTypes = []any{
	(VMState)(0),                                     // 0: agent_director.VMState
	(HypervisorStatus_HealthStatus)(0),               // 1: agent_director.HypervisorStatus.HealthStatus
	(Event_Severity)(0),                              // 2: agent_director.Event.Severity
	(LogRequest_LogLevel)(0),                         // 3: agent_director.LogRequest.LogLevel
	(TaskProgress_TaskStatus)(0),                     // 4: agent_director.TaskProgress.TaskStatus
	(WorkflowState_StepState)(0),                     // 5: agent_director.WorkflowState.StepState
	(AgentUpdateStatus_UpdateStatus)(0),              // 6: agent_director.AgentUpdateStatus.UpdateStatus
	(*HardwareStatusUpdate)(nil),                     // 7: agent_director.HardwareStatusUpdate
	(*DiskStatusUpdate)(nil),                         // 8: agent_director.DiskStatusUpdate
	(*NetworkInterfaceStatusUpdate)(nil),             // 9: agent_director.NetworkInterfaceStatusUpdate
	(*VMStatusUpdate)(nil),                           // 10: agent_director.VMStatusUpdate
	(*HeartbeatRequest)(nil),                         // 11: agent_director.HeartbeatRequest
	(*HeartbeatResponse)(nil),                        // 12: agent_director.HeartbeatResponse
	(*HypervisorStatus)(nil),                         // 13: agent_director.HypervisorStatus
	(*NetworkInterfaceStatus)(nil),                   // 14: agent_director.NetworkInterfaceStatus
	(*VMMetrics)(nil),                                // 15: agent_director.VMMetrics
	(*HypervisorResourceUsage)(nil),                  // 16: agent_director.HypervisorResourceUsage
	(*Event)(nil),                                    // 17: agent_director.Event
	(*LogRequest)(nil),                               // 18: agent_director.LogRequest
	(*LogResponse)(nil),                              // 19: agent_director.LogResponse
	(*TaskProgress)(nil),                             // 20: agent_director.TaskProgress
	(*WorkflowState)(nil),                            // 21: agent_director.WorkflowState
	(*AgentUpdateStatus)(nil),                        // 22: agent_director.AgentUpdateStatus
	(*AgentConfiguration)(nil),                       // 23: agent_director.AgentConfiguration
	(*VMMetrics_CPUUsage)(nil),                       // 24: agent_director.VMMetrics.CPUUsage
	(*VMMetrics_DiskIOMetrics)(nil),                  // 25: agent_director.VMMetrics.DiskIOMetrics
	(*VMMetrics_NetworkIOMetrics)(nil),               // 26: agent_director.VMMetrics.NetworkIOMetrics
	(*HypervisorResourceUsage_NetworkIOMetrics)(nil), // 27: agent_director.HypervisorResourceUsage.NetworkIOMetrics
	nil,                           // 28: agent_director.Event.DetailsEntry
	nil,                           // 29: agent_director.WorkflowState.OutputDataEntry
	(*timestamppb.Timestamp)(nil), // 30: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 31: google.protobuf.Empty
}
var file_pilab_cloud_agent_v1_agent_director_proto_depIdxs = []int32{
	0,  // 0: agent_director.VMStatusUpdate.state:type_name -> agent_director.VMState
	14, // 1: agent_director.HypervisorStatus.network_interfaces:type_name -> agent_director.NetworkInterfaceStatus
	1,  // 2: agent_director.HypervisorStatus.health_status:type_name -> agent_director.HypervisorStatus.HealthStatus
	24, // 3: agent_director.VMMetrics.cpu_usages:type_name -> agent_director.VMMetrics.CPUUsage
	25, // 4: agent_director.VMMetrics.disk_io:type_name -> agent_director.VMMetrics.DiskIOMetrics
	26, // 5: agent_director.VMMetrics.network_io:type_name -> agent_director.VMMetrics.NetworkIOMetrics
	30, // 6: agent_director.VMMetrics.timestamp:type_name -> google.protobuf.Timestamp
	27, // 7: agent_director.HypervisorResourceUsage.network_io:type_name -> agent_director.HypervisorResourceUsage.NetworkIOMetrics
	30, // 8: agent_director.HypervisorResourceUsage.timestamp:type_name -> google.protobuf.Timestamp
	30, // 9: agent_director.Event.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 10: agent_director.Event.severity:type_name -> agent_director.Event.Severity
	28, // 11: agent_director.Event.details:type_name -> agent_director.Event.DetailsEntry
	3,  // 12: agent_director.LogRequest.log_level:type_name -> agent_director.LogRequest.LogLevel
	30, // 13: agent_director.LogResponse.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 14: agent_director.TaskProgress.status:type_name -> agent_director.TaskProgress.TaskStatus
	5,  // 15: agent_director.WorkflowState.state:type_name -> agent_director.WorkflowState.StepState
	29, // 16: agent_director.WorkflowState.output_data:type_name -> agent_director.WorkflowState.OutputDataEntry
	6,  // 17: agent_director.AgentUpdateStatus.status:type_name -> agent_director.AgentUpdateStatus.UpdateStatus
	11, // 18: agent_director.AgentDirectorService.ReportHeartbeat:input_type -> agent_director.HeartbeatRequest
	13, // 19: agent_director.AgentDirectorService.ReportHypervisorStatus:input_type -> agent_director.HypervisorStatus
	10, // 20: agent_director.AgentDirectorService.ReportVMStatus:input_type -> agent_director.VMStatusUpdate
	8,  // 21: agent_director.AgentDirectorService.ReportDiskStatus:input_type -> agent_director.DiskStatusUpdate
	9,  // 22: agent_director.AgentDirectorService.ReportNetworkInterfaceStatus:input_type -> agent_director.NetworkInterfaceStatusUpdate
	7,  // 23: agent_director.AgentDirectorService.ReportHardwareStatus:input_type -> agent_director.HardwareStatusUpdate
	15, // 24: agent_director.AgentDirectorService.ReportVMMetrics:input_type -> agent_director.VMMetrics
	16, // 25: agent_director.AgentDirectorService.ReportHypervisorResourceUsage:input_type -> agent_director.HypervisorResourceUsage
	17, // 26: agent_director.AgentDirectorService.ReportEvent:input_type -> agent_director.Event
	18, // 27: agent_director.AgentDirectorService.StreamLogs:input_type -> agent_director.LogRequest
	20, // 28: agent_director.AgentDirectorService.ReportTaskProgress:input_type -> agent_director.TaskProgress
	21, // 29: agent_director.AgentDirectorService.ReportWorkflowState:input_type -> agent_director.WorkflowState
	22, // 30: agent_director.AgentDirectorService.ReportAgentUpdateStatus:input_type -> agent_director.AgentUpdateStatus
	23, // 31: agent_director.AgentDirectorService.AcknowledgeAgentConfiguration:input_type -> agent_director.AgentConfiguration
	12, // 32: agent_director.AgentDirectorService.ReportHeartbeat:output_type -> agent_director.HeartbeatResponse
	31, // 33: agent_director.AgentDirectorService.ReportHypervisorStatus:output_type -> google.protobuf.Empty
	31, // 34: agent_director.AgentDirectorService.ReportVMStatus:output_type -> google.protobuf.Empty
	31, // 35: agent_director.AgentDirectorService.ReportDiskStatus:output_type -> google.protobuf.Empty
	31, // 36: agent_director.AgentDirectorService.ReportNetworkInterfaceStatus:output_type -> google.protobuf.Empty
	31, // 37: agent_director.AgentDirectorService.ReportHardwareStatus:output_type -> google.protobuf.Empty
	31, // 38: agent_director.AgentDirectorService.ReportVMMetrics:output_type -> google.protobuf.Empty
	31, // 39: agent_director.AgentDirectorService.ReportHypervisorResourceUsage:output_type -> google.protobuf.Empty
	31, // 40: agent_director.AgentDirectorService.ReportEvent:output_type -> google.protobuf.Empty
	19, // 41: agent_director.AgentDirectorService.StreamLogs:output_type -> agent_director.LogResponse
	31, // 42: agent_director.AgentDirectorService.ReportTaskProgress:output_type -> google.protobuf.Empty
	31, // 43: agent_director.AgentDirectorService.ReportWorkflowState:output_type -> google.protobuf.Empty
	31, // 44: agent_director.AgentDirectorService.ReportAgentUpdateStatus:output_type -> google.protobuf.Empty
	31, // 45: agent_director.AgentDirectorService.AcknowledgeAgentConfiguration:output_type -> google.protobuf.Empty
	32, // [32:46] is the sub-list for method output_type
	18, // [18:32] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_pilab_cloud_agent_v1_agent_director_proto_init() }
func file_pilab_cloud_agent_v1_agent_director_proto_init() {
	if File_pilab_cloud_agent_v1_agent_director_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pilab_cloud_agent_v1_agent_director_proto_rawDesc), len(file_pilab_cloud_agent_v1_agent_director_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilab_cloud_agent_v1_agent_director_proto_goTypes,
		DependencyIndexes: file_pilab_cloud_agent_v1_agent_director_proto_depIdxs,
		EnumInfos:         file_pilab_cloud_agent_v1_agent_director_proto_enumTypes,
		MessageInfos:      file_pilab_cloud_agent_v1_agent_director_proto_msgTypes,
	}.Build()
	File_pilab_cloud_agent_v1_agent_director_proto = out.File
	file_pilab_cloud_agent_v1_agent_director_proto_goTypes = nil
	file_pilab_cloud_agent_v1_agent_director_proto_depIdxs = nil
}
