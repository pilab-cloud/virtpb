// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/agent/v1/storageservice.proto

package agentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageService_VolumeCreate_FullMethodName         = "/pilab.cloud.agent.v1.StorageService/VolumeCreate"
	StorageService_VolumeDelete_FullMethodName         = "/pilab.cloud.agent.v1.StorageService/VolumeDelete"
	StorageService_VolumeResize_FullMethodName         = "/pilab.cloud.agent.v1.StorageService/VolumeResize"
	StorageService_VolumeList_FullMethodName           = "/pilab.cloud.agent.v1.StorageService/VolumeList"
	StorageService_VolumeGet_FullMethodName            = "/pilab.cloud.agent.v1.StorageService/VolumeGet"
	StorageService_VolumeClone_FullMethodName          = "/pilab.cloud.agent.v1.StorageService/VolumeClone"
	StorageService_VolumeSnapshotCreate_FullMethodName = "/pilab.cloud.agent.v1.StorageService/VolumeSnapshotCreate"
	StorageService_VolumeSnapshotRevert_FullMethodName = "/pilab.cloud.agent.v1.StorageService/VolumeSnapshotRevert"
	StorageService_VolumeSnapshotDelete_FullMethodName = "/pilab.cloud.agent.v1.StorageService/VolumeSnapshotDelete"
	StorageService_StoragePoolCreate_FullMethodName    = "/pilab.cloud.agent.v1.StorageService/StoragePoolCreate"
	StorageService_StoragePoolDelete_FullMethodName    = "/pilab.cloud.agent.v1.StorageService/StoragePoolDelete"
	StorageService_StoragePoolList_FullMethodName      = "/pilab.cloud.agent.v1.StorageService/StoragePoolList"
	StorageService_StoragePoolGet_FullMethodName       = "/pilab.cloud.agent.v1.StorageService/StoragePoolGet"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	// Volume Management
	VolumeCreate(ctx context.Context, in *VolumeCreateRequest, opts ...grpc.CallOption) (*VolumeCreateResponse, error)
	VolumeDelete(ctx context.Context, in *VolumeDeleteRequest, opts ...grpc.CallOption) (*VolumeDeleteResponse, error)
	VolumeResize(ctx context.Context, in *VolumeResizeRequest, opts ...grpc.CallOption) (*VolumeResizeResponse, error)
	VolumeList(ctx context.Context, in *VolumeListRequest, opts ...grpc.CallOption) (*VolumeListResponse, error)
	VolumeGet(ctx context.Context, in *VolumeGetRequest, opts ...grpc.CallOption) (*VolumeGetResponse, error)
	VolumeClone(ctx context.Context, in *VolumeCloneRequest, opts ...grpc.CallOption) (*VolumeCloneResponse, error)
	VolumeSnapshotCreate(ctx context.Context, in *VolumeSnapshotCreateRequest, opts ...grpc.CallOption) (*VolumeSnapshotCreateResponse, error)
	VolumeSnapshotRevert(ctx context.Context, in *VolumeSnapshotRevertRequest, opts ...grpc.CallOption) (*VolumeSnapshotRevertResponse, error)
	VolumeSnapshotDelete(ctx context.Context, in *VolumeSnapshotDeleteRequest, opts ...grpc.CallOption) (*VolumeSnapshotDeleteResponse, error)
	// Storage Pool Management
	StoragePoolCreate(ctx context.Context, in *StoragePoolCreateRequest, opts ...grpc.CallOption) (*StoragePoolCreateResponse, error)
	StoragePoolDelete(ctx context.Context, in *StoragePoolDeleteRequest, opts ...grpc.CallOption) (*StoragePoolDeleteResponse, error)
	StoragePoolList(ctx context.Context, in *StoragePoolListRequest, opts ...grpc.CallOption) (*StoragePoolListResponse, error)
	StoragePoolGet(ctx context.Context, in *StoragePoolGetRequest, opts ...grpc.CallOption) (*StoragePoolGetResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) VolumeCreate(ctx context.Context, in *VolumeCreateRequest, opts ...grpc.CallOption) (*VolumeCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeCreateResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) VolumeDelete(ctx context.Context, in *VolumeDeleteRequest, opts ...grpc.CallOption) (*VolumeDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeDeleteResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) VolumeResize(ctx context.Context, in *VolumeResizeRequest, opts ...grpc.CallOption) (*VolumeResizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeResizeResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeResize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) VolumeList(ctx context.Context, in *VolumeListRequest, opts ...grpc.CallOption) (*VolumeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeListResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) VolumeGet(ctx context.Context, in *VolumeGetRequest, opts ...grpc.CallOption) (*VolumeGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeGetResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) VolumeClone(ctx context.Context, in *VolumeCloneRequest, opts ...grpc.CallOption) (*VolumeCloneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeCloneResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeClone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) VolumeSnapshotCreate(ctx context.Context, in *VolumeSnapshotCreateRequest, opts ...grpc.CallOption) (*VolumeSnapshotCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeSnapshotCreateResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeSnapshotCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) VolumeSnapshotRevert(ctx context.Context, in *VolumeSnapshotRevertRequest, opts ...grpc.CallOption) (*VolumeSnapshotRevertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeSnapshotRevertResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeSnapshotRevert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) VolumeSnapshotDelete(ctx context.Context, in *VolumeSnapshotDeleteRequest, opts ...grpc.CallOption) (*VolumeSnapshotDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeSnapshotDeleteResponse)
	err := c.cc.Invoke(ctx, StorageService_VolumeSnapshotDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) StoragePoolCreate(ctx context.Context, in *StoragePoolCreateRequest, opts ...grpc.CallOption) (*StoragePoolCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoragePoolCreateResponse)
	err := c.cc.Invoke(ctx, StorageService_StoragePoolCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) StoragePoolDelete(ctx context.Context, in *StoragePoolDeleteRequest, opts ...grpc.CallOption) (*StoragePoolDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoragePoolDeleteResponse)
	err := c.cc.Invoke(ctx, StorageService_StoragePoolDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) StoragePoolList(ctx context.Context, in *StoragePoolListRequest, opts ...grpc.CallOption) (*StoragePoolListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoragePoolListResponse)
	err := c.cc.Invoke(ctx, StorageService_StoragePoolList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) StoragePoolGet(ctx context.Context, in *StoragePoolGetRequest, opts ...grpc.CallOption) (*StoragePoolGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoragePoolGetResponse)
	err := c.cc.Invoke(ctx, StorageService_StoragePoolGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility.
type StorageServiceServer interface {
	// Volume Management
	VolumeCreate(context.Context, *VolumeCreateRequest) (*VolumeCreateResponse, error)
	VolumeDelete(context.Context, *VolumeDeleteRequest) (*VolumeDeleteResponse, error)
	VolumeResize(context.Context, *VolumeResizeRequest) (*VolumeResizeResponse, error)
	VolumeList(context.Context, *VolumeListRequest) (*VolumeListResponse, error)
	VolumeGet(context.Context, *VolumeGetRequest) (*VolumeGetResponse, error)
	VolumeClone(context.Context, *VolumeCloneRequest) (*VolumeCloneResponse, error)
	VolumeSnapshotCreate(context.Context, *VolumeSnapshotCreateRequest) (*VolumeSnapshotCreateResponse, error)
	VolumeSnapshotRevert(context.Context, *VolumeSnapshotRevertRequest) (*VolumeSnapshotRevertResponse, error)
	VolumeSnapshotDelete(context.Context, *VolumeSnapshotDeleteRequest) (*VolumeSnapshotDeleteResponse, error)
	// Storage Pool Management
	StoragePoolCreate(context.Context, *StoragePoolCreateRequest) (*StoragePoolCreateResponse, error)
	StoragePoolDelete(context.Context, *StoragePoolDeleteRequest) (*StoragePoolDeleteResponse, error)
	StoragePoolList(context.Context, *StoragePoolListRequest) (*StoragePoolListResponse, error)
	StoragePoolGet(context.Context, *StoragePoolGetRequest) (*StoragePoolGetResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageServiceServer struct{}

func (UnimplementedStorageServiceServer) VolumeCreate(context.Context, *VolumeCreateRequest) (*VolumeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeCreate not implemented")
}
func (UnimplementedStorageServiceServer) VolumeDelete(context.Context, *VolumeDeleteRequest) (*VolumeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeDelete not implemented")
}
func (UnimplementedStorageServiceServer) VolumeResize(context.Context, *VolumeResizeRequest) (*VolumeResizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeResize not implemented")
}
func (UnimplementedStorageServiceServer) VolumeList(context.Context, *VolumeListRequest) (*VolumeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeList not implemented")
}
func (UnimplementedStorageServiceServer) VolumeGet(context.Context, *VolumeGetRequest) (*VolumeGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeGet not implemented")
}
func (UnimplementedStorageServiceServer) VolumeClone(context.Context, *VolumeCloneRequest) (*VolumeCloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeClone not implemented")
}
func (UnimplementedStorageServiceServer) VolumeSnapshotCreate(context.Context, *VolumeSnapshotCreateRequest) (*VolumeSnapshotCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeSnapshotCreate not implemented")
}
func (UnimplementedStorageServiceServer) VolumeSnapshotRevert(context.Context, *VolumeSnapshotRevertRequest) (*VolumeSnapshotRevertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeSnapshotRevert not implemented")
}
func (UnimplementedStorageServiceServer) VolumeSnapshotDelete(context.Context, *VolumeSnapshotDeleteRequest) (*VolumeSnapshotDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeSnapshotDelete not implemented")
}
func (UnimplementedStorageServiceServer) StoragePoolCreate(context.Context, *StoragePoolCreateRequest) (*StoragePoolCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoragePoolCreate not implemented")
}
func (UnimplementedStorageServiceServer) StoragePoolDelete(context.Context, *StoragePoolDeleteRequest) (*StoragePoolDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoragePoolDelete not implemented")
}
func (UnimplementedStorageServiceServer) StoragePoolList(context.Context, *StoragePoolListRequest) (*StoragePoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoragePoolList not implemented")
}
func (UnimplementedStorageServiceServer) StoragePoolGet(context.Context, *StoragePoolGetRequest) (*StoragePoolGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoragePoolGet not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}
func (UnimplementedStorageServiceServer) testEmbeddedByValue()                        {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeCreate(ctx, req.(*VolumeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeDelete(ctx, req.(*VolumeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_VolumeResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeResize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeResize(ctx, req.(*VolumeResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeList(ctx, req.(*VolumeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_VolumeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeGet(ctx, req.(*VolumeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_VolumeClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeClone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeClone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeClone(ctx, req.(*VolumeCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_VolumeSnapshotCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSnapshotCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeSnapshotCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeSnapshotCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeSnapshotCreate(ctx, req.(*VolumeSnapshotCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_VolumeSnapshotRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSnapshotRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeSnapshotRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeSnapshotRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeSnapshotRevert(ctx, req.(*VolumeSnapshotRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_VolumeSnapshotDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSnapshotDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).VolumeSnapshotDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_VolumeSnapshotDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).VolumeSnapshotDelete(ctx, req.(*VolumeSnapshotDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_StoragePoolCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragePoolCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).StoragePoolCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_StoragePoolCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).StoragePoolCreate(ctx, req.(*StoragePoolCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_StoragePoolDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragePoolDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).StoragePoolDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_StoragePoolDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).StoragePoolDelete(ctx, req.(*StoragePoolDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_StoragePoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragePoolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).StoragePoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_StoragePoolList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).StoragePoolList(ctx, req.(*StoragePoolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_StoragePoolGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragePoolGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).StoragePoolGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_StoragePoolGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).StoragePoolGet(ctx, req.(*StoragePoolGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.cloud.agent.v1.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeCreate",
			Handler:    _StorageService_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _StorageService_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeResize",
			Handler:    _StorageService_VolumeResize_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _StorageService_VolumeList_Handler,
		},
		{
			MethodName: "VolumeGet",
			Handler:    _StorageService_VolumeGet_Handler,
		},
		{
			MethodName: "VolumeClone",
			Handler:    _StorageService_VolumeClone_Handler,
		},
		{
			MethodName: "VolumeSnapshotCreate",
			Handler:    _StorageService_VolumeSnapshotCreate_Handler,
		},
		{
			MethodName: "VolumeSnapshotRevert",
			Handler:    _StorageService_VolumeSnapshotRevert_Handler,
		},
		{
			MethodName: "VolumeSnapshotDelete",
			Handler:    _StorageService_VolumeSnapshotDelete_Handler,
		},
		{
			MethodName: "StoragePoolCreate",
			Handler:    _StorageService_StoragePoolCreate_Handler,
		},
		{
			MethodName: "StoragePoolDelete",
			Handler:    _StorageService_StoragePoolDelete_Handler,
		},
		{
			MethodName: "StoragePoolList",
			Handler:    _StorageService_StoragePoolList_Handler,
		},
		{
			MethodName: "StoragePoolGet",
			Handler:    _StorageService_StoragePoolGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pilab/cloud/agent/v1/storageservice.proto",
}
