// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/agent/v1/storageservice.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "pilab.cloud.agent.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServiceVolumeCreateProcedure is the fully-qualified name of the StorageService's
	// VolumeCreate RPC.
	StorageServiceVolumeCreateProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeCreate"
	// StorageServiceVolumeDeleteProcedure is the fully-qualified name of the StorageService's
	// VolumeDelete RPC.
	StorageServiceVolumeDeleteProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeDelete"
	// StorageServiceVolumeResizeProcedure is the fully-qualified name of the StorageService's
	// VolumeResize RPC.
	StorageServiceVolumeResizeProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeResize"
	// StorageServiceVolumeListProcedure is the fully-qualified name of the StorageService's VolumeList
	// RPC.
	StorageServiceVolumeListProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeList"
	// StorageServiceVolumeGetProcedure is the fully-qualified name of the StorageService's VolumeGet
	// RPC.
	StorageServiceVolumeGetProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeGet"
	// StorageServiceVolumeCloneProcedure is the fully-qualified name of the StorageService's
	// VolumeClone RPC.
	StorageServiceVolumeCloneProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeClone"
	// StorageServiceVolumeSnapshotCreateProcedure is the fully-qualified name of the StorageService's
	// VolumeSnapshotCreate RPC.
	StorageServiceVolumeSnapshotCreateProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeSnapshotCreate"
	// StorageServiceVolumeSnapshotRevertProcedure is the fully-qualified name of the StorageService's
	// VolumeSnapshotRevert RPC.
	StorageServiceVolumeSnapshotRevertProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeSnapshotRevert"
	// StorageServiceVolumeSnapshotDeleteProcedure is the fully-qualified name of the StorageService's
	// VolumeSnapshotDelete RPC.
	StorageServiceVolumeSnapshotDeleteProcedure = "/pilab.cloud.agent.v1.StorageService/VolumeSnapshotDelete"
	// StorageServiceStoragePoolCreateProcedure is the fully-qualified name of the StorageService's
	// StoragePoolCreate RPC.
	StorageServiceStoragePoolCreateProcedure = "/pilab.cloud.agent.v1.StorageService/StoragePoolCreate"
	// StorageServiceStoragePoolDeleteProcedure is the fully-qualified name of the StorageService's
	// StoragePoolDelete RPC.
	StorageServiceStoragePoolDeleteProcedure = "/pilab.cloud.agent.v1.StorageService/StoragePoolDelete"
	// StorageServiceStoragePoolListProcedure is the fully-qualified name of the StorageService's
	// StoragePoolList RPC.
	StorageServiceStoragePoolListProcedure = "/pilab.cloud.agent.v1.StorageService/StoragePoolList"
	// StorageServiceStoragePoolGetProcedure is the fully-qualified name of the StorageService's
	// StoragePoolGet RPC.
	StorageServiceStoragePoolGetProcedure = "/pilab.cloud.agent.v1.StorageService/StoragePoolGet"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storageServiceServiceDescriptor                    = v1.File_pilab_cloud_agent_v1_storageservice_proto.Services().ByName("StorageService")
	storageServiceVolumeCreateMethodDescriptor         = storageServiceServiceDescriptor.Methods().ByName("VolumeCreate")
	storageServiceVolumeDeleteMethodDescriptor         = storageServiceServiceDescriptor.Methods().ByName("VolumeDelete")
	storageServiceVolumeResizeMethodDescriptor         = storageServiceServiceDescriptor.Methods().ByName("VolumeResize")
	storageServiceVolumeListMethodDescriptor           = storageServiceServiceDescriptor.Methods().ByName("VolumeList")
	storageServiceVolumeGetMethodDescriptor            = storageServiceServiceDescriptor.Methods().ByName("VolumeGet")
	storageServiceVolumeCloneMethodDescriptor          = storageServiceServiceDescriptor.Methods().ByName("VolumeClone")
	storageServiceVolumeSnapshotCreateMethodDescriptor = storageServiceServiceDescriptor.Methods().ByName("VolumeSnapshotCreate")
	storageServiceVolumeSnapshotRevertMethodDescriptor = storageServiceServiceDescriptor.Methods().ByName("VolumeSnapshotRevert")
	storageServiceVolumeSnapshotDeleteMethodDescriptor = storageServiceServiceDescriptor.Methods().ByName("VolumeSnapshotDelete")
	storageServiceStoragePoolCreateMethodDescriptor    = storageServiceServiceDescriptor.Methods().ByName("StoragePoolCreate")
	storageServiceStoragePoolDeleteMethodDescriptor    = storageServiceServiceDescriptor.Methods().ByName("StoragePoolDelete")
	storageServiceStoragePoolListMethodDescriptor      = storageServiceServiceDescriptor.Methods().ByName("StoragePoolList")
	storageServiceStoragePoolGetMethodDescriptor       = storageServiceServiceDescriptor.Methods().ByName("StoragePoolGet")
)

// StorageServiceClient is a client for the pilab.cloud.agent.v1.StorageService service.
type StorageServiceClient interface {
	// Volume Management
	VolumeCreate(context.Context, *connect.Request[v1.VolumeCreateRequest]) (*connect.Response[v1.VolumeCreateResponse], error)
	VolumeDelete(context.Context, *connect.Request[v1.VolumeDeleteRequest]) (*connect.Response[v1.VolumeDeleteResponse], error)
	VolumeResize(context.Context, *connect.Request[v1.VolumeResizeRequest]) (*connect.Response[v1.VolumeResizeResponse], error)
	VolumeList(context.Context, *connect.Request[v1.VolumeListRequest]) (*connect.Response[v1.VolumeListResponse], error)
	VolumeGet(context.Context, *connect.Request[v1.VolumeGetRequest]) (*connect.Response[v1.VolumeGetResponse], error)
	VolumeClone(context.Context, *connect.Request[v1.VolumeCloneRequest]) (*connect.Response[v1.VolumeCloneResponse], error)
	VolumeSnapshotCreate(context.Context, *connect.Request[v1.VolumeSnapshotCreateRequest]) (*connect.Response[v1.VolumeSnapshotCreateResponse], error)
	VolumeSnapshotRevert(context.Context, *connect.Request[v1.VolumeSnapshotRevertRequest]) (*connect.Response[v1.VolumeSnapshotRevertResponse], error)
	VolumeSnapshotDelete(context.Context, *connect.Request[v1.VolumeSnapshotDeleteRequest]) (*connect.Response[v1.VolumeSnapshotDeleteResponse], error)
	// Storage Pool Management
	StoragePoolCreate(context.Context, *connect.Request[v1.StoragePoolCreateRequest]) (*connect.Response[v1.StoragePoolCreateResponse], error)
	StoragePoolDelete(context.Context, *connect.Request[v1.StoragePoolDeleteRequest]) (*connect.Response[v1.StoragePoolDeleteResponse], error)
	StoragePoolList(context.Context, *connect.Request[v1.StoragePoolListRequest]) (*connect.Response[v1.StoragePoolListResponse], error)
	StoragePoolGet(context.Context, *connect.Request[v1.StoragePoolGetRequest]) (*connect.Response[v1.StoragePoolGetResponse], error)
}

// NewStorageServiceClient constructs a client for the pilab.cloud.agent.v1.StorageService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storageServiceClient{
		volumeCreate: connect.NewClient[v1.VolumeCreateRequest, v1.VolumeCreateResponse](
			httpClient,
			baseURL+StorageServiceVolumeCreateProcedure,
			connect.WithSchema(storageServiceVolumeCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		volumeDelete: connect.NewClient[v1.VolumeDeleteRequest, v1.VolumeDeleteResponse](
			httpClient,
			baseURL+StorageServiceVolumeDeleteProcedure,
			connect.WithSchema(storageServiceVolumeDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		volumeResize: connect.NewClient[v1.VolumeResizeRequest, v1.VolumeResizeResponse](
			httpClient,
			baseURL+StorageServiceVolumeResizeProcedure,
			connect.WithSchema(storageServiceVolumeResizeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		volumeList: connect.NewClient[v1.VolumeListRequest, v1.VolumeListResponse](
			httpClient,
			baseURL+StorageServiceVolumeListProcedure,
			connect.WithSchema(storageServiceVolumeListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		volumeGet: connect.NewClient[v1.VolumeGetRequest, v1.VolumeGetResponse](
			httpClient,
			baseURL+StorageServiceVolumeGetProcedure,
			connect.WithSchema(storageServiceVolumeGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		volumeClone: connect.NewClient[v1.VolumeCloneRequest, v1.VolumeCloneResponse](
			httpClient,
			baseURL+StorageServiceVolumeCloneProcedure,
			connect.WithSchema(storageServiceVolumeCloneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		volumeSnapshotCreate: connect.NewClient[v1.VolumeSnapshotCreateRequest, v1.VolumeSnapshotCreateResponse](
			httpClient,
			baseURL+StorageServiceVolumeSnapshotCreateProcedure,
			connect.WithSchema(storageServiceVolumeSnapshotCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		volumeSnapshotRevert: connect.NewClient[v1.VolumeSnapshotRevertRequest, v1.VolumeSnapshotRevertResponse](
			httpClient,
			baseURL+StorageServiceVolumeSnapshotRevertProcedure,
			connect.WithSchema(storageServiceVolumeSnapshotRevertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		volumeSnapshotDelete: connect.NewClient[v1.VolumeSnapshotDeleteRequest, v1.VolumeSnapshotDeleteResponse](
			httpClient,
			baseURL+StorageServiceVolumeSnapshotDeleteProcedure,
			connect.WithSchema(storageServiceVolumeSnapshotDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		storagePoolCreate: connect.NewClient[v1.StoragePoolCreateRequest, v1.StoragePoolCreateResponse](
			httpClient,
			baseURL+StorageServiceStoragePoolCreateProcedure,
			connect.WithSchema(storageServiceStoragePoolCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		storagePoolDelete: connect.NewClient[v1.StoragePoolDeleteRequest, v1.StoragePoolDeleteResponse](
			httpClient,
			baseURL+StorageServiceStoragePoolDeleteProcedure,
			connect.WithSchema(storageServiceStoragePoolDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		storagePoolList: connect.NewClient[v1.StoragePoolListRequest, v1.StoragePoolListResponse](
			httpClient,
			baseURL+StorageServiceStoragePoolListProcedure,
			connect.WithSchema(storageServiceStoragePoolListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		storagePoolGet: connect.NewClient[v1.StoragePoolGetRequest, v1.StoragePoolGetResponse](
			httpClient,
			baseURL+StorageServiceStoragePoolGetProcedure,
			connect.WithSchema(storageServiceStoragePoolGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	volumeCreate         *connect.Client[v1.VolumeCreateRequest, v1.VolumeCreateResponse]
	volumeDelete         *connect.Client[v1.VolumeDeleteRequest, v1.VolumeDeleteResponse]
	volumeResize         *connect.Client[v1.VolumeResizeRequest, v1.VolumeResizeResponse]
	volumeList           *connect.Client[v1.VolumeListRequest, v1.VolumeListResponse]
	volumeGet            *connect.Client[v1.VolumeGetRequest, v1.VolumeGetResponse]
	volumeClone          *connect.Client[v1.VolumeCloneRequest, v1.VolumeCloneResponse]
	volumeSnapshotCreate *connect.Client[v1.VolumeSnapshotCreateRequest, v1.VolumeSnapshotCreateResponse]
	volumeSnapshotRevert *connect.Client[v1.VolumeSnapshotRevertRequest, v1.VolumeSnapshotRevertResponse]
	volumeSnapshotDelete *connect.Client[v1.VolumeSnapshotDeleteRequest, v1.VolumeSnapshotDeleteResponse]
	storagePoolCreate    *connect.Client[v1.StoragePoolCreateRequest, v1.StoragePoolCreateResponse]
	storagePoolDelete    *connect.Client[v1.StoragePoolDeleteRequest, v1.StoragePoolDeleteResponse]
	storagePoolList      *connect.Client[v1.StoragePoolListRequest, v1.StoragePoolListResponse]
	storagePoolGet       *connect.Client[v1.StoragePoolGetRequest, v1.StoragePoolGetResponse]
}

// VolumeCreate calls pilab.cloud.agent.v1.StorageService.VolumeCreate.
func (c *storageServiceClient) VolumeCreate(ctx context.Context, req *connect.Request[v1.VolumeCreateRequest]) (*connect.Response[v1.VolumeCreateResponse], error) {
	return c.volumeCreate.CallUnary(ctx, req)
}

// VolumeDelete calls pilab.cloud.agent.v1.StorageService.VolumeDelete.
func (c *storageServiceClient) VolumeDelete(ctx context.Context, req *connect.Request[v1.VolumeDeleteRequest]) (*connect.Response[v1.VolumeDeleteResponse], error) {
	return c.volumeDelete.CallUnary(ctx, req)
}

// VolumeResize calls pilab.cloud.agent.v1.StorageService.VolumeResize.
func (c *storageServiceClient) VolumeResize(ctx context.Context, req *connect.Request[v1.VolumeResizeRequest]) (*connect.Response[v1.VolumeResizeResponse], error) {
	return c.volumeResize.CallUnary(ctx, req)
}

// VolumeList calls pilab.cloud.agent.v1.StorageService.VolumeList.
func (c *storageServiceClient) VolumeList(ctx context.Context, req *connect.Request[v1.VolumeListRequest]) (*connect.Response[v1.VolumeListResponse], error) {
	return c.volumeList.CallUnary(ctx, req)
}

// VolumeGet calls pilab.cloud.agent.v1.StorageService.VolumeGet.
func (c *storageServiceClient) VolumeGet(ctx context.Context, req *connect.Request[v1.VolumeGetRequest]) (*connect.Response[v1.VolumeGetResponse], error) {
	return c.volumeGet.CallUnary(ctx, req)
}

// VolumeClone calls pilab.cloud.agent.v1.StorageService.VolumeClone.
func (c *storageServiceClient) VolumeClone(ctx context.Context, req *connect.Request[v1.VolumeCloneRequest]) (*connect.Response[v1.VolumeCloneResponse], error) {
	return c.volumeClone.CallUnary(ctx, req)
}

// VolumeSnapshotCreate calls pilab.cloud.agent.v1.StorageService.VolumeSnapshotCreate.
func (c *storageServiceClient) VolumeSnapshotCreate(ctx context.Context, req *connect.Request[v1.VolumeSnapshotCreateRequest]) (*connect.Response[v1.VolumeSnapshotCreateResponse], error) {
	return c.volumeSnapshotCreate.CallUnary(ctx, req)
}

// VolumeSnapshotRevert calls pilab.cloud.agent.v1.StorageService.VolumeSnapshotRevert.
func (c *storageServiceClient) VolumeSnapshotRevert(ctx context.Context, req *connect.Request[v1.VolumeSnapshotRevertRequest]) (*connect.Response[v1.VolumeSnapshotRevertResponse], error) {
	return c.volumeSnapshotRevert.CallUnary(ctx, req)
}

// VolumeSnapshotDelete calls pilab.cloud.agent.v1.StorageService.VolumeSnapshotDelete.
func (c *storageServiceClient) VolumeSnapshotDelete(ctx context.Context, req *connect.Request[v1.VolumeSnapshotDeleteRequest]) (*connect.Response[v1.VolumeSnapshotDeleteResponse], error) {
	return c.volumeSnapshotDelete.CallUnary(ctx, req)
}

// StoragePoolCreate calls pilab.cloud.agent.v1.StorageService.StoragePoolCreate.
func (c *storageServiceClient) StoragePoolCreate(ctx context.Context, req *connect.Request[v1.StoragePoolCreateRequest]) (*connect.Response[v1.StoragePoolCreateResponse], error) {
	return c.storagePoolCreate.CallUnary(ctx, req)
}

// StoragePoolDelete calls pilab.cloud.agent.v1.StorageService.StoragePoolDelete.
func (c *storageServiceClient) StoragePoolDelete(ctx context.Context, req *connect.Request[v1.StoragePoolDeleteRequest]) (*connect.Response[v1.StoragePoolDeleteResponse], error) {
	return c.storagePoolDelete.CallUnary(ctx, req)
}

// StoragePoolList calls pilab.cloud.agent.v1.StorageService.StoragePoolList.
func (c *storageServiceClient) StoragePoolList(ctx context.Context, req *connect.Request[v1.StoragePoolListRequest]) (*connect.Response[v1.StoragePoolListResponse], error) {
	return c.storagePoolList.CallUnary(ctx, req)
}

// StoragePoolGet calls pilab.cloud.agent.v1.StorageService.StoragePoolGet.
func (c *storageServiceClient) StoragePoolGet(ctx context.Context, req *connect.Request[v1.StoragePoolGetRequest]) (*connect.Response[v1.StoragePoolGetResponse], error) {
	return c.storagePoolGet.CallUnary(ctx, req)
}

// StorageServiceHandler is an implementation of the pilab.cloud.agent.v1.StorageService service.
type StorageServiceHandler interface {
	// Volume Management
	VolumeCreate(context.Context, *connect.Request[v1.VolumeCreateRequest]) (*connect.Response[v1.VolumeCreateResponse], error)
	VolumeDelete(context.Context, *connect.Request[v1.VolumeDeleteRequest]) (*connect.Response[v1.VolumeDeleteResponse], error)
	VolumeResize(context.Context, *connect.Request[v1.VolumeResizeRequest]) (*connect.Response[v1.VolumeResizeResponse], error)
	VolumeList(context.Context, *connect.Request[v1.VolumeListRequest]) (*connect.Response[v1.VolumeListResponse], error)
	VolumeGet(context.Context, *connect.Request[v1.VolumeGetRequest]) (*connect.Response[v1.VolumeGetResponse], error)
	VolumeClone(context.Context, *connect.Request[v1.VolumeCloneRequest]) (*connect.Response[v1.VolumeCloneResponse], error)
	VolumeSnapshotCreate(context.Context, *connect.Request[v1.VolumeSnapshotCreateRequest]) (*connect.Response[v1.VolumeSnapshotCreateResponse], error)
	VolumeSnapshotRevert(context.Context, *connect.Request[v1.VolumeSnapshotRevertRequest]) (*connect.Response[v1.VolumeSnapshotRevertResponse], error)
	VolumeSnapshotDelete(context.Context, *connect.Request[v1.VolumeSnapshotDeleteRequest]) (*connect.Response[v1.VolumeSnapshotDeleteResponse], error)
	// Storage Pool Management
	StoragePoolCreate(context.Context, *connect.Request[v1.StoragePoolCreateRequest]) (*connect.Response[v1.StoragePoolCreateResponse], error)
	StoragePoolDelete(context.Context, *connect.Request[v1.StoragePoolDeleteRequest]) (*connect.Response[v1.StoragePoolDeleteResponse], error)
	StoragePoolList(context.Context, *connect.Request[v1.StoragePoolListRequest]) (*connect.Response[v1.StoragePoolListResponse], error)
	StoragePoolGet(context.Context, *connect.Request[v1.StoragePoolGetRequest]) (*connect.Response[v1.StoragePoolGetResponse], error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceVolumeCreateHandler := connect.NewUnaryHandler(
		StorageServiceVolumeCreateProcedure,
		svc.VolumeCreate,
		connect.WithSchema(storageServiceVolumeCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceVolumeDeleteHandler := connect.NewUnaryHandler(
		StorageServiceVolumeDeleteProcedure,
		svc.VolumeDelete,
		connect.WithSchema(storageServiceVolumeDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceVolumeResizeHandler := connect.NewUnaryHandler(
		StorageServiceVolumeResizeProcedure,
		svc.VolumeResize,
		connect.WithSchema(storageServiceVolumeResizeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceVolumeListHandler := connect.NewUnaryHandler(
		StorageServiceVolumeListProcedure,
		svc.VolumeList,
		connect.WithSchema(storageServiceVolumeListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceVolumeGetHandler := connect.NewUnaryHandler(
		StorageServiceVolumeGetProcedure,
		svc.VolumeGet,
		connect.WithSchema(storageServiceVolumeGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceVolumeCloneHandler := connect.NewUnaryHandler(
		StorageServiceVolumeCloneProcedure,
		svc.VolumeClone,
		connect.WithSchema(storageServiceVolumeCloneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceVolumeSnapshotCreateHandler := connect.NewUnaryHandler(
		StorageServiceVolumeSnapshotCreateProcedure,
		svc.VolumeSnapshotCreate,
		connect.WithSchema(storageServiceVolumeSnapshotCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceVolumeSnapshotRevertHandler := connect.NewUnaryHandler(
		StorageServiceVolumeSnapshotRevertProcedure,
		svc.VolumeSnapshotRevert,
		connect.WithSchema(storageServiceVolumeSnapshotRevertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceVolumeSnapshotDeleteHandler := connect.NewUnaryHandler(
		StorageServiceVolumeSnapshotDeleteProcedure,
		svc.VolumeSnapshotDelete,
		connect.WithSchema(storageServiceVolumeSnapshotDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceStoragePoolCreateHandler := connect.NewUnaryHandler(
		StorageServiceStoragePoolCreateProcedure,
		svc.StoragePoolCreate,
		connect.WithSchema(storageServiceStoragePoolCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceStoragePoolDeleteHandler := connect.NewUnaryHandler(
		StorageServiceStoragePoolDeleteProcedure,
		svc.StoragePoolDelete,
		connect.WithSchema(storageServiceStoragePoolDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceStoragePoolListHandler := connect.NewUnaryHandler(
		StorageServiceStoragePoolListProcedure,
		svc.StoragePoolList,
		connect.WithSchema(storageServiceStoragePoolListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceStoragePoolGetHandler := connect.NewUnaryHandler(
		StorageServiceStoragePoolGetProcedure,
		svc.StoragePoolGet,
		connect.WithSchema(storageServiceStoragePoolGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.agent.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServiceVolumeCreateProcedure:
			storageServiceVolumeCreateHandler.ServeHTTP(w, r)
		case StorageServiceVolumeDeleteProcedure:
			storageServiceVolumeDeleteHandler.ServeHTTP(w, r)
		case StorageServiceVolumeResizeProcedure:
			storageServiceVolumeResizeHandler.ServeHTTP(w, r)
		case StorageServiceVolumeListProcedure:
			storageServiceVolumeListHandler.ServeHTTP(w, r)
		case StorageServiceVolumeGetProcedure:
			storageServiceVolumeGetHandler.ServeHTTP(w, r)
		case StorageServiceVolumeCloneProcedure:
			storageServiceVolumeCloneHandler.ServeHTTP(w, r)
		case StorageServiceVolumeSnapshotCreateProcedure:
			storageServiceVolumeSnapshotCreateHandler.ServeHTTP(w, r)
		case StorageServiceVolumeSnapshotRevertProcedure:
			storageServiceVolumeSnapshotRevertHandler.ServeHTTP(w, r)
		case StorageServiceVolumeSnapshotDeleteProcedure:
			storageServiceVolumeSnapshotDeleteHandler.ServeHTTP(w, r)
		case StorageServiceStoragePoolCreateProcedure:
			storageServiceStoragePoolCreateHandler.ServeHTTP(w, r)
		case StorageServiceStoragePoolDeleteProcedure:
			storageServiceStoragePoolDeleteHandler.ServeHTTP(w, r)
		case StorageServiceStoragePoolListProcedure:
			storageServiceStoragePoolListHandler.ServeHTTP(w, r)
		case StorageServiceStoragePoolGetProcedure:
			storageServiceStoragePoolGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) VolumeCreate(context.Context, *connect.Request[v1.VolumeCreateRequest]) (*connect.Response[v1.VolumeCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeCreate is not implemented"))
}

func (UnimplementedStorageServiceHandler) VolumeDelete(context.Context, *connect.Request[v1.VolumeDeleteRequest]) (*connect.Response[v1.VolumeDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeDelete is not implemented"))
}

func (UnimplementedStorageServiceHandler) VolumeResize(context.Context, *connect.Request[v1.VolumeResizeRequest]) (*connect.Response[v1.VolumeResizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeResize is not implemented"))
}

func (UnimplementedStorageServiceHandler) VolumeList(context.Context, *connect.Request[v1.VolumeListRequest]) (*connect.Response[v1.VolumeListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeList is not implemented"))
}

func (UnimplementedStorageServiceHandler) VolumeGet(context.Context, *connect.Request[v1.VolumeGetRequest]) (*connect.Response[v1.VolumeGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeGet is not implemented"))
}

func (UnimplementedStorageServiceHandler) VolumeClone(context.Context, *connect.Request[v1.VolumeCloneRequest]) (*connect.Response[v1.VolumeCloneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeClone is not implemented"))
}

func (UnimplementedStorageServiceHandler) VolumeSnapshotCreate(context.Context, *connect.Request[v1.VolumeSnapshotCreateRequest]) (*connect.Response[v1.VolumeSnapshotCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeSnapshotCreate is not implemented"))
}

func (UnimplementedStorageServiceHandler) VolumeSnapshotRevert(context.Context, *connect.Request[v1.VolumeSnapshotRevertRequest]) (*connect.Response[v1.VolumeSnapshotRevertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeSnapshotRevert is not implemented"))
}

func (UnimplementedStorageServiceHandler) VolumeSnapshotDelete(context.Context, *connect.Request[v1.VolumeSnapshotDeleteRequest]) (*connect.Response[v1.VolumeSnapshotDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.VolumeSnapshotDelete is not implemented"))
}

func (UnimplementedStorageServiceHandler) StoragePoolCreate(context.Context, *connect.Request[v1.StoragePoolCreateRequest]) (*connect.Response[v1.StoragePoolCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.StoragePoolCreate is not implemented"))
}

func (UnimplementedStorageServiceHandler) StoragePoolDelete(context.Context, *connect.Request[v1.StoragePoolDeleteRequest]) (*connect.Response[v1.StoragePoolDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.StoragePoolDelete is not implemented"))
}

func (UnimplementedStorageServiceHandler) StoragePoolList(context.Context, *connect.Request[v1.StoragePoolListRequest]) (*connect.Response[v1.StoragePoolListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.StoragePoolList is not implemented"))
}

func (UnimplementedStorageServiceHandler) StoragePoolGet(context.Context, *connect.Request[v1.StoragePoolGetRequest]) (*connect.Response[v1.StoragePoolGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.StorageService.StoragePoolGet is not implemented"))
}
