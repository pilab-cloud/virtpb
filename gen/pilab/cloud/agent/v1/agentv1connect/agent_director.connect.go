// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/agent/v1/agent_director.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/agent/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentDirectorServiceName is the fully-qualified name of the AgentDirectorService service.
	AgentDirectorServiceName = "agent_director.AgentDirectorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentDirectorServiceReportHeartbeatProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportHeartbeat RPC.
	AgentDirectorServiceReportHeartbeatProcedure = "/agent_director.AgentDirectorService/ReportHeartbeat"
	// AgentDirectorServiceReportHypervisorStatusProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportHypervisorStatus RPC.
	AgentDirectorServiceReportHypervisorStatusProcedure = "/agent_director.AgentDirectorService/ReportHypervisorStatus"
	// AgentDirectorServiceReportVMStatusProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportVMStatus RPC.
	AgentDirectorServiceReportVMStatusProcedure = "/agent_director.AgentDirectorService/ReportVMStatus"
	// AgentDirectorServiceReportDiskStatusProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportDiskStatus RPC.
	AgentDirectorServiceReportDiskStatusProcedure = "/agent_director.AgentDirectorService/ReportDiskStatus"
	// AgentDirectorServiceReportNetworkInterfaceStatusProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportNetworkInterfaceStatus RPC.
	AgentDirectorServiceReportNetworkInterfaceStatusProcedure = "/agent_director.AgentDirectorService/ReportNetworkInterfaceStatus"
	// AgentDirectorServiceReportHardwareStatusProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportHardwareStatus RPC.
	AgentDirectorServiceReportHardwareStatusProcedure = "/agent_director.AgentDirectorService/ReportHardwareStatus"
	// AgentDirectorServiceReportVMMetricsProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportVMMetrics RPC.
	AgentDirectorServiceReportVMMetricsProcedure = "/agent_director.AgentDirectorService/ReportVMMetrics"
	// AgentDirectorServiceReportHypervisorResourceUsageProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportHypervisorResourceUsage RPC.
	AgentDirectorServiceReportHypervisorResourceUsageProcedure = "/agent_director.AgentDirectorService/ReportHypervisorResourceUsage"
	// AgentDirectorServiceReportEventProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportEvent RPC.
	AgentDirectorServiceReportEventProcedure = "/agent_director.AgentDirectorService/ReportEvent"
	// AgentDirectorServiceStreamLogsProcedure is the fully-qualified name of the AgentDirectorService's
	// StreamLogs RPC.
	AgentDirectorServiceStreamLogsProcedure = "/agent_director.AgentDirectorService/StreamLogs"
	// AgentDirectorServiceReportTaskProgressProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportTaskProgress RPC.
	AgentDirectorServiceReportTaskProgressProcedure = "/agent_director.AgentDirectorService/ReportTaskProgress"
	// AgentDirectorServiceReportWorkflowStateProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportWorkflowState RPC.
	AgentDirectorServiceReportWorkflowStateProcedure = "/agent_director.AgentDirectorService/ReportWorkflowState"
	// AgentDirectorServiceReportAgentUpdateStatusProcedure is the fully-qualified name of the
	// AgentDirectorService's ReportAgentUpdateStatus RPC.
	AgentDirectorServiceReportAgentUpdateStatusProcedure = "/agent_director.AgentDirectorService/ReportAgentUpdateStatus"
	// AgentDirectorServiceAcknowledgeAgentConfigurationProcedure is the fully-qualified name of the
	// AgentDirectorService's AcknowledgeAgentConfiguration RPC.
	AgentDirectorServiceAcknowledgeAgentConfigurationProcedure = "/agent_director.AgentDirectorService/AcknowledgeAgentConfiguration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	agentDirectorServiceServiceDescriptor                             = v1.File_pilab_cloud_agent_v1_agent_director_proto.Services().ByName("AgentDirectorService")
	agentDirectorServiceReportHeartbeatMethodDescriptor               = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportHeartbeat")
	agentDirectorServiceReportHypervisorStatusMethodDescriptor        = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportHypervisorStatus")
	agentDirectorServiceReportVMStatusMethodDescriptor                = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportVMStatus")
	agentDirectorServiceReportDiskStatusMethodDescriptor              = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportDiskStatus")
	agentDirectorServiceReportNetworkInterfaceStatusMethodDescriptor  = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportNetworkInterfaceStatus")
	agentDirectorServiceReportHardwareStatusMethodDescriptor          = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportHardwareStatus")
	agentDirectorServiceReportVMMetricsMethodDescriptor               = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportVMMetrics")
	agentDirectorServiceReportHypervisorResourceUsageMethodDescriptor = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportHypervisorResourceUsage")
	agentDirectorServiceReportEventMethodDescriptor                   = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportEvent")
	agentDirectorServiceStreamLogsMethodDescriptor                    = agentDirectorServiceServiceDescriptor.Methods().ByName("StreamLogs")
	agentDirectorServiceReportTaskProgressMethodDescriptor            = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportTaskProgress")
	agentDirectorServiceReportWorkflowStateMethodDescriptor           = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportWorkflowState")
	agentDirectorServiceReportAgentUpdateStatusMethodDescriptor       = agentDirectorServiceServiceDescriptor.Methods().ByName("ReportAgentUpdateStatus")
	agentDirectorServiceAcknowledgeAgentConfigurationMethodDescriptor = agentDirectorServiceServiceDescriptor.Methods().ByName("AcknowledgeAgentConfiguration")
)

// AgentDirectorServiceClient is a client for the agent_director.AgentDirectorService service.
type AgentDirectorServiceClient interface {
	// --- Status and Health Reporting ---
	ReportHeartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	ReportHypervisorStatus(context.Context, *connect.Request[v1.HypervisorStatus]) (*connect.Response[emptypb.Empty], error)
	ReportVMStatus(context.Context, *connect.Request[v1.VMStatusUpdate]) (*connect.Response[emptypb.Empty], error)
	ReportDiskStatus(context.Context, *connect.Request[v1.DiskStatusUpdate]) (*connect.Response[emptypb.Empty], error)
	ReportNetworkInterfaceStatus(context.Context, *connect.Request[v1.NetworkInterfaceStatusUpdate]) (*connect.Response[emptypb.Empty], error)
	ReportHardwareStatus(context.Context, *connect.Request[v1.HardwareStatusUpdate]) (*connect.Response[emptypb.Empty], error)
	// --- Metrics Collection ---
	ReportVMMetrics(context.Context, *connect.Request[v1.VMMetrics]) (*connect.Response[emptypb.Empty], error)
	ReportHypervisorResourceUsage(context.Context, *connect.Request[v1.HypervisorResourceUsage]) (*connect.Response[emptypb.Empty], error)
	// --- Event and Log Forwarding ---
	ReportEvent(context.Context, *connect.Request[v1.Event]) (*connect.Response[emptypb.Empty], error)
	StreamLogs(context.Context) *connect.BidiStreamForClient[v1.LogRequest, v1.LogResponse]
	// --- Task and Workflow Management ---
	ReportTaskProgress(context.Context, *connect.Request[v1.TaskProgress]) (*connect.Response[emptypb.Empty], error)
	ReportWorkflowState(context.Context, *connect.Request[v1.WorkflowState]) (*connect.Response[emptypb.Empty], error)
	// --- Agent Self-Management ---
	ReportAgentUpdateStatus(context.Context, *connect.Request[v1.AgentUpdateStatus]) (*connect.Response[emptypb.Empty], error)
	AcknowledgeAgentConfiguration(context.Context, *connect.Request[v1.AgentConfiguration]) (*connect.Response[emptypb.Empty], error)
}

// NewAgentDirectorServiceClient constructs a client for the agent_director.AgentDirectorService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentDirectorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentDirectorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentDirectorServiceClient{
		reportHeartbeat: connect.NewClient[v1.HeartbeatRequest, v1.HeartbeatResponse](
			httpClient,
			baseURL+AgentDirectorServiceReportHeartbeatProcedure,
			connect.WithSchema(agentDirectorServiceReportHeartbeatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportHypervisorStatus: connect.NewClient[v1.HypervisorStatus, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportHypervisorStatusProcedure,
			connect.WithSchema(agentDirectorServiceReportHypervisorStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportVMStatus: connect.NewClient[v1.VMStatusUpdate, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportVMStatusProcedure,
			connect.WithSchema(agentDirectorServiceReportVMStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportDiskStatus: connect.NewClient[v1.DiskStatusUpdate, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportDiskStatusProcedure,
			connect.WithSchema(agentDirectorServiceReportDiskStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportNetworkInterfaceStatus: connect.NewClient[v1.NetworkInterfaceStatusUpdate, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportNetworkInterfaceStatusProcedure,
			connect.WithSchema(agentDirectorServiceReportNetworkInterfaceStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportHardwareStatus: connect.NewClient[v1.HardwareStatusUpdate, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportHardwareStatusProcedure,
			connect.WithSchema(agentDirectorServiceReportHardwareStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportVMMetrics: connect.NewClient[v1.VMMetrics, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportVMMetricsProcedure,
			connect.WithSchema(agentDirectorServiceReportVMMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportHypervisorResourceUsage: connect.NewClient[v1.HypervisorResourceUsage, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportHypervisorResourceUsageProcedure,
			connect.WithSchema(agentDirectorServiceReportHypervisorResourceUsageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportEvent: connect.NewClient[v1.Event, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportEventProcedure,
			connect.WithSchema(agentDirectorServiceReportEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamLogs: connect.NewClient[v1.LogRequest, v1.LogResponse](
			httpClient,
			baseURL+AgentDirectorServiceStreamLogsProcedure,
			connect.WithSchema(agentDirectorServiceStreamLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportTaskProgress: connect.NewClient[v1.TaskProgress, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportTaskProgressProcedure,
			connect.WithSchema(agentDirectorServiceReportTaskProgressMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportWorkflowState: connect.NewClient[v1.WorkflowState, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportWorkflowStateProcedure,
			connect.WithSchema(agentDirectorServiceReportWorkflowStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportAgentUpdateStatus: connect.NewClient[v1.AgentUpdateStatus, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceReportAgentUpdateStatusProcedure,
			connect.WithSchema(agentDirectorServiceReportAgentUpdateStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		acknowledgeAgentConfiguration: connect.NewClient[v1.AgentConfiguration, emptypb.Empty](
			httpClient,
			baseURL+AgentDirectorServiceAcknowledgeAgentConfigurationProcedure,
			connect.WithSchema(agentDirectorServiceAcknowledgeAgentConfigurationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentDirectorServiceClient implements AgentDirectorServiceClient.
type agentDirectorServiceClient struct {
	reportHeartbeat               *connect.Client[v1.HeartbeatRequest, v1.HeartbeatResponse]
	reportHypervisorStatus        *connect.Client[v1.HypervisorStatus, emptypb.Empty]
	reportVMStatus                *connect.Client[v1.VMStatusUpdate, emptypb.Empty]
	reportDiskStatus              *connect.Client[v1.DiskStatusUpdate, emptypb.Empty]
	reportNetworkInterfaceStatus  *connect.Client[v1.NetworkInterfaceStatusUpdate, emptypb.Empty]
	reportHardwareStatus          *connect.Client[v1.HardwareStatusUpdate, emptypb.Empty]
	reportVMMetrics               *connect.Client[v1.VMMetrics, emptypb.Empty]
	reportHypervisorResourceUsage *connect.Client[v1.HypervisorResourceUsage, emptypb.Empty]
	reportEvent                   *connect.Client[v1.Event, emptypb.Empty]
	streamLogs                    *connect.Client[v1.LogRequest, v1.LogResponse]
	reportTaskProgress            *connect.Client[v1.TaskProgress, emptypb.Empty]
	reportWorkflowState           *connect.Client[v1.WorkflowState, emptypb.Empty]
	reportAgentUpdateStatus       *connect.Client[v1.AgentUpdateStatus, emptypb.Empty]
	acknowledgeAgentConfiguration *connect.Client[v1.AgentConfiguration, emptypb.Empty]
}

// ReportHeartbeat calls agent_director.AgentDirectorService.ReportHeartbeat.
func (c *agentDirectorServiceClient) ReportHeartbeat(ctx context.Context, req *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return c.reportHeartbeat.CallUnary(ctx, req)
}

// ReportHypervisorStatus calls agent_director.AgentDirectorService.ReportHypervisorStatus.
func (c *agentDirectorServiceClient) ReportHypervisorStatus(ctx context.Context, req *connect.Request[v1.HypervisorStatus]) (*connect.Response[emptypb.Empty], error) {
	return c.reportHypervisorStatus.CallUnary(ctx, req)
}

// ReportVMStatus calls agent_director.AgentDirectorService.ReportVMStatus.
func (c *agentDirectorServiceClient) ReportVMStatus(ctx context.Context, req *connect.Request[v1.VMStatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return c.reportVMStatus.CallUnary(ctx, req)
}

// ReportDiskStatus calls agent_director.AgentDirectorService.ReportDiskStatus.
func (c *agentDirectorServiceClient) ReportDiskStatus(ctx context.Context, req *connect.Request[v1.DiskStatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return c.reportDiskStatus.CallUnary(ctx, req)
}

// ReportNetworkInterfaceStatus calls
// agent_director.AgentDirectorService.ReportNetworkInterfaceStatus.
func (c *agentDirectorServiceClient) ReportNetworkInterfaceStatus(ctx context.Context, req *connect.Request[v1.NetworkInterfaceStatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return c.reportNetworkInterfaceStatus.CallUnary(ctx, req)
}

// ReportHardwareStatus calls agent_director.AgentDirectorService.ReportHardwareStatus.
func (c *agentDirectorServiceClient) ReportHardwareStatus(ctx context.Context, req *connect.Request[v1.HardwareStatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return c.reportHardwareStatus.CallUnary(ctx, req)
}

// ReportVMMetrics calls agent_director.AgentDirectorService.ReportVMMetrics.
func (c *agentDirectorServiceClient) ReportVMMetrics(ctx context.Context, req *connect.Request[v1.VMMetrics]) (*connect.Response[emptypb.Empty], error) {
	return c.reportVMMetrics.CallUnary(ctx, req)
}

// ReportHypervisorResourceUsage calls
// agent_director.AgentDirectorService.ReportHypervisorResourceUsage.
func (c *agentDirectorServiceClient) ReportHypervisorResourceUsage(ctx context.Context, req *connect.Request[v1.HypervisorResourceUsage]) (*connect.Response[emptypb.Empty], error) {
	return c.reportHypervisorResourceUsage.CallUnary(ctx, req)
}

// ReportEvent calls agent_director.AgentDirectorService.ReportEvent.
func (c *agentDirectorServiceClient) ReportEvent(ctx context.Context, req *connect.Request[v1.Event]) (*connect.Response[emptypb.Empty], error) {
	return c.reportEvent.CallUnary(ctx, req)
}

// StreamLogs calls agent_director.AgentDirectorService.StreamLogs.
func (c *agentDirectorServiceClient) StreamLogs(ctx context.Context) *connect.BidiStreamForClient[v1.LogRequest, v1.LogResponse] {
	return c.streamLogs.CallBidiStream(ctx)
}

// ReportTaskProgress calls agent_director.AgentDirectorService.ReportTaskProgress.
func (c *agentDirectorServiceClient) ReportTaskProgress(ctx context.Context, req *connect.Request[v1.TaskProgress]) (*connect.Response[emptypb.Empty], error) {
	return c.reportTaskProgress.CallUnary(ctx, req)
}

// ReportWorkflowState calls agent_director.AgentDirectorService.ReportWorkflowState.
func (c *agentDirectorServiceClient) ReportWorkflowState(ctx context.Context, req *connect.Request[v1.WorkflowState]) (*connect.Response[emptypb.Empty], error) {
	return c.reportWorkflowState.CallUnary(ctx, req)
}

// ReportAgentUpdateStatus calls agent_director.AgentDirectorService.ReportAgentUpdateStatus.
func (c *agentDirectorServiceClient) ReportAgentUpdateStatus(ctx context.Context, req *connect.Request[v1.AgentUpdateStatus]) (*connect.Response[emptypb.Empty], error) {
	return c.reportAgentUpdateStatus.CallUnary(ctx, req)
}

// AcknowledgeAgentConfiguration calls
// agent_director.AgentDirectorService.AcknowledgeAgentConfiguration.
func (c *agentDirectorServiceClient) AcknowledgeAgentConfiguration(ctx context.Context, req *connect.Request[v1.AgentConfiguration]) (*connect.Response[emptypb.Empty], error) {
	return c.acknowledgeAgentConfiguration.CallUnary(ctx, req)
}

// AgentDirectorServiceHandler is an implementation of the agent_director.AgentDirectorService
// service.
type AgentDirectorServiceHandler interface {
	// --- Status and Health Reporting ---
	ReportHeartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	ReportHypervisorStatus(context.Context, *connect.Request[v1.HypervisorStatus]) (*connect.Response[emptypb.Empty], error)
	ReportVMStatus(context.Context, *connect.Request[v1.VMStatusUpdate]) (*connect.Response[emptypb.Empty], error)
	ReportDiskStatus(context.Context, *connect.Request[v1.DiskStatusUpdate]) (*connect.Response[emptypb.Empty], error)
	ReportNetworkInterfaceStatus(context.Context, *connect.Request[v1.NetworkInterfaceStatusUpdate]) (*connect.Response[emptypb.Empty], error)
	ReportHardwareStatus(context.Context, *connect.Request[v1.HardwareStatusUpdate]) (*connect.Response[emptypb.Empty], error)
	// --- Metrics Collection ---
	ReportVMMetrics(context.Context, *connect.Request[v1.VMMetrics]) (*connect.Response[emptypb.Empty], error)
	ReportHypervisorResourceUsage(context.Context, *connect.Request[v1.HypervisorResourceUsage]) (*connect.Response[emptypb.Empty], error)
	// --- Event and Log Forwarding ---
	ReportEvent(context.Context, *connect.Request[v1.Event]) (*connect.Response[emptypb.Empty], error)
	StreamLogs(context.Context, *connect.BidiStream[v1.LogRequest, v1.LogResponse]) error
	// --- Task and Workflow Management ---
	ReportTaskProgress(context.Context, *connect.Request[v1.TaskProgress]) (*connect.Response[emptypb.Empty], error)
	ReportWorkflowState(context.Context, *connect.Request[v1.WorkflowState]) (*connect.Response[emptypb.Empty], error)
	// --- Agent Self-Management ---
	ReportAgentUpdateStatus(context.Context, *connect.Request[v1.AgentUpdateStatus]) (*connect.Response[emptypb.Empty], error)
	AcknowledgeAgentConfiguration(context.Context, *connect.Request[v1.AgentConfiguration]) (*connect.Response[emptypb.Empty], error)
}

// NewAgentDirectorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentDirectorServiceHandler(svc AgentDirectorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentDirectorServiceReportHeartbeatHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportHeartbeatProcedure,
		svc.ReportHeartbeat,
		connect.WithSchema(agentDirectorServiceReportHeartbeatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportHypervisorStatusHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportHypervisorStatusProcedure,
		svc.ReportHypervisorStatus,
		connect.WithSchema(agentDirectorServiceReportHypervisorStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportVMStatusHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportVMStatusProcedure,
		svc.ReportVMStatus,
		connect.WithSchema(agentDirectorServiceReportVMStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportDiskStatusHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportDiskStatusProcedure,
		svc.ReportDiskStatus,
		connect.WithSchema(agentDirectorServiceReportDiskStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportNetworkInterfaceStatusHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportNetworkInterfaceStatusProcedure,
		svc.ReportNetworkInterfaceStatus,
		connect.WithSchema(agentDirectorServiceReportNetworkInterfaceStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportHardwareStatusHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportHardwareStatusProcedure,
		svc.ReportHardwareStatus,
		connect.WithSchema(agentDirectorServiceReportHardwareStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportVMMetricsHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportVMMetricsProcedure,
		svc.ReportVMMetrics,
		connect.WithSchema(agentDirectorServiceReportVMMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportHypervisorResourceUsageHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportHypervisorResourceUsageProcedure,
		svc.ReportHypervisorResourceUsage,
		connect.WithSchema(agentDirectorServiceReportHypervisorResourceUsageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportEventHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportEventProcedure,
		svc.ReportEvent,
		connect.WithSchema(agentDirectorServiceReportEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceStreamLogsHandler := connect.NewBidiStreamHandler(
		AgentDirectorServiceStreamLogsProcedure,
		svc.StreamLogs,
		connect.WithSchema(agentDirectorServiceStreamLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportTaskProgressHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportTaskProgressProcedure,
		svc.ReportTaskProgress,
		connect.WithSchema(agentDirectorServiceReportTaskProgressMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportWorkflowStateHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportWorkflowStateProcedure,
		svc.ReportWorkflowState,
		connect.WithSchema(agentDirectorServiceReportWorkflowStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceReportAgentUpdateStatusHandler := connect.NewUnaryHandler(
		AgentDirectorServiceReportAgentUpdateStatusProcedure,
		svc.ReportAgentUpdateStatus,
		connect.WithSchema(agentDirectorServiceReportAgentUpdateStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentDirectorServiceAcknowledgeAgentConfigurationHandler := connect.NewUnaryHandler(
		AgentDirectorServiceAcknowledgeAgentConfigurationProcedure,
		svc.AcknowledgeAgentConfiguration,
		connect.WithSchema(agentDirectorServiceAcknowledgeAgentConfigurationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/agent_director.AgentDirectorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentDirectorServiceReportHeartbeatProcedure:
			agentDirectorServiceReportHeartbeatHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportHypervisorStatusProcedure:
			agentDirectorServiceReportHypervisorStatusHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportVMStatusProcedure:
			agentDirectorServiceReportVMStatusHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportDiskStatusProcedure:
			agentDirectorServiceReportDiskStatusHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportNetworkInterfaceStatusProcedure:
			agentDirectorServiceReportNetworkInterfaceStatusHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportHardwareStatusProcedure:
			agentDirectorServiceReportHardwareStatusHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportVMMetricsProcedure:
			agentDirectorServiceReportVMMetricsHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportHypervisorResourceUsageProcedure:
			agentDirectorServiceReportHypervisorResourceUsageHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportEventProcedure:
			agentDirectorServiceReportEventHandler.ServeHTTP(w, r)
		case AgentDirectorServiceStreamLogsProcedure:
			agentDirectorServiceStreamLogsHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportTaskProgressProcedure:
			agentDirectorServiceReportTaskProgressHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportWorkflowStateProcedure:
			agentDirectorServiceReportWorkflowStateHandler.ServeHTTP(w, r)
		case AgentDirectorServiceReportAgentUpdateStatusProcedure:
			agentDirectorServiceReportAgentUpdateStatusHandler.ServeHTTP(w, r)
		case AgentDirectorServiceAcknowledgeAgentConfigurationProcedure:
			agentDirectorServiceAcknowledgeAgentConfigurationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentDirectorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentDirectorServiceHandler struct{}

func (UnimplementedAgentDirectorServiceHandler) ReportHeartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportHeartbeat is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportHypervisorStatus(context.Context, *connect.Request[v1.HypervisorStatus]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportHypervisorStatus is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportVMStatus(context.Context, *connect.Request[v1.VMStatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportVMStatus is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportDiskStatus(context.Context, *connect.Request[v1.DiskStatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportDiskStatus is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportNetworkInterfaceStatus(context.Context, *connect.Request[v1.NetworkInterfaceStatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportNetworkInterfaceStatus is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportHardwareStatus(context.Context, *connect.Request[v1.HardwareStatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportHardwareStatus is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportVMMetrics(context.Context, *connect.Request[v1.VMMetrics]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportVMMetrics is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportHypervisorResourceUsage(context.Context, *connect.Request[v1.HypervisorResourceUsage]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportHypervisorResourceUsage is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportEvent(context.Context, *connect.Request[v1.Event]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportEvent is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) StreamLogs(context.Context, *connect.BidiStream[v1.LogRequest, v1.LogResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.StreamLogs is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportTaskProgress(context.Context, *connect.Request[v1.TaskProgress]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportTaskProgress is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportWorkflowState(context.Context, *connect.Request[v1.WorkflowState]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportWorkflowState is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) ReportAgentUpdateStatus(context.Context, *connect.Request[v1.AgentUpdateStatus]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.ReportAgentUpdateStatus is not implemented"))
}

func (UnimplementedAgentDirectorServiceHandler) AcknowledgeAgentConfiguration(context.Context, *connect.Request[v1.AgentConfiguration]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent_director.AgentDirectorService.AcknowledgeAgentConfiguration is not implemented"))
}
