// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/agent/v1/agentservice.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "pilab.cloud.agent.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceVmGetDefinitionProcedure is the fully-qualified name of the AgentService's
	// VmGetDefinition RPC.
	AgentServiceVmGetDefinitionProcedure = "/pilab.cloud.agent.v1.AgentService/VmGetDefinition"
	// AgentServiceVmStartProcedure is the fully-qualified name of the AgentService's VmStart RPC.
	AgentServiceVmStartProcedure = "/pilab.cloud.agent.v1.AgentService/VmStart"
	// AgentServiceVmKillProcedure is the fully-qualified name of the AgentService's VmKill RPC.
	AgentServiceVmKillProcedure = "/pilab.cloud.agent.v1.AgentService/VmKill"
	// AgentServiceVmShutdownProcedure is the fully-qualified name of the AgentService's VmShutdown RPC.
	AgentServiceVmShutdownProcedure = "/pilab.cloud.agent.v1.AgentService/VmShutdown"
	// AgentServiceVmResetProcedure is the fully-qualified name of the AgentService's VmReset RPC.
	AgentServiceVmResetProcedure = "/pilab.cloud.agent.v1.AgentService/VmReset"
	// AgentServiceVmRebootProcedure is the fully-qualified name of the AgentService's VmReboot RPC.
	AgentServiceVmRebootProcedure = "/pilab.cloud.agent.v1.AgentService/VmReboot"
	// AgentServiceVmSuspendProcedure is the fully-qualified name of the AgentService's VmSuspend RPC.
	AgentServiceVmSuspendProcedure = "/pilab.cloud.agent.v1.AgentService/VmSuspend"
	// AgentServiceVmResumeProcedure is the fully-qualified name of the AgentService's VmResume RPC.
	AgentServiceVmResumeProcedure = "/pilab.cloud.agent.v1.AgentService/VmResume"
	// AgentServiceVmStatusProcedure is the fully-qualified name of the AgentService's VmStatus RPC.
	AgentServiceVmStatusProcedure = "/pilab.cloud.agent.v1.AgentService/VmStatus"
	// AgentServiceVmMigrateProcedure is the fully-qualified name of the AgentService's VmMigrate RPC.
	AgentServiceVmMigrateProcedure = "/pilab.cloud.agent.v1.AgentService/VmMigrate"
	// AgentServiceVmIpListProcedure is the fully-qualified name of the AgentService's VmIpList RPC.
	AgentServiceVmIpListProcedure = "/pilab.cloud.agent.v1.AgentService/VmIpList"
	// AgentServiceVmChangeUserPasswordProcedure is the fully-qualified name of the AgentService's
	// VmChangeUserPassword RPC.
	AgentServiceVmChangeUserPasswordProcedure = "/pilab.cloud.agent.v1.AgentService/VmChangeUserPassword"
	// AgentServiceVmGuestInfoProcedure is the fully-qualified name of the AgentService's VmGuestInfo
	// RPC.
	AgentServiceVmGuestInfoProcedure = "/pilab.cloud.agent.v1.AgentService/VmGuestInfo"
	// AgentServiceVmBackupSystemVolumeProcedure is the fully-qualified name of the AgentService's
	// VmBackupSystemVolume RPC.
	AgentServiceVmBackupSystemVolumeProcedure = "/pilab.cloud.agent.v1.AgentService/VmBackupSystemVolume"
	// AgentServiceVmRestoreSystemVolumeProcedure is the fully-qualified name of the AgentService's
	// VmRestoreSystemVolume RPC.
	AgentServiceVmRestoreSystemVolumeProcedure = "/pilab.cloud.agent.v1.AgentService/VmRestoreSystemVolume"
	// AgentServiceVmAttachCloudInitProcedure is the fully-qualified name of the AgentService's
	// VmAttachCloudInit RPC.
	AgentServiceVmAttachCloudInitProcedure = "/pilab.cloud.agent.v1.AgentService/VmAttachCloudInit"
	// AgentServiceVmAttachISOProcedure is the fully-qualified name of the AgentService's VmAttachISO
	// RPC.
	AgentServiceVmAttachISOProcedure = "/pilab.cloud.agent.v1.AgentService/VmAttachISO"
	// AgentServiceVmDetachISOProcedure is the fully-qualified name of the AgentService's VmDetachISO
	// RPC.
	AgentServiceVmDetachISOProcedure = "/pilab.cloud.agent.v1.AgentService/VmDetachISO"
	// AgentServiceVmAttachNetworkInterfaceProcedure is the fully-qualified name of the AgentService's
	// VmAttachNetworkInterface RPC.
	AgentServiceVmAttachNetworkInterfaceProcedure = "/pilab.cloud.agent.v1.AgentService/VmAttachNetworkInterface"
	// AgentServiceVmDetachNetworkInterfaceProcedure is the fully-qualified name of the AgentService's
	// VmDetachNetworkInterface RPC.
	AgentServiceVmDetachNetworkInterfaceProcedure = "/pilab.cloud.agent.v1.AgentService/VmDetachNetworkInterface"
	// AgentServiceStreamProcedure is the fully-qualified name of the AgentService's Stream RPC.
	AgentServiceStreamProcedure = "/pilab.cloud.agent.v1.AgentService/Stream"
	// AgentServiceVmSnapshotRestoreProcedure is the fully-qualified name of the AgentService's
	// VmSnapshotRestore RPC.
	AgentServiceVmSnapshotRestoreProcedure = "/pilab.cloud.agent.v1.AgentService/VmSnapshotRestore"
	// AgentServiceVmSnapshotCreateProcedure is the fully-qualified name of the AgentService's
	// VmSnapshotCreate RPC.
	AgentServiceVmSnapshotCreateProcedure = "/pilab.cloud.agent.v1.AgentService/VmSnapshotCreate"
	// AgentServiceVmSnapshotDeleteProcedure is the fully-qualified name of the AgentService's
	// VmSnapshotDelete RPC.
	AgentServiceVmSnapshotDeleteProcedure = "/pilab.cloud.agent.v1.AgentService/VmSnapshotDelete"
	// AgentServiceVmSnapshotCloneProcedure is the fully-qualified name of the AgentService's
	// VmSnapshotClone RPC.
	AgentServiceVmSnapshotCloneProcedure = "/pilab.cloud.agent.v1.AgentService/VmSnapshotClone"
	// AgentServiceUpdateConfigProcedure is the fully-qualified name of the AgentService's UpdateConfig
	// RPC.
	AgentServiceUpdateConfigProcedure = "/pilab.cloud.agent.v1.AgentService/UpdateConfig"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	agentServiceServiceDescriptor                        = v1.File_pilab_cloud_agent_v1_agentservice_proto.Services().ByName("AgentService")
	agentServiceVmGetDefinitionMethodDescriptor          = agentServiceServiceDescriptor.Methods().ByName("VmGetDefinition")
	agentServiceVmStartMethodDescriptor                  = agentServiceServiceDescriptor.Methods().ByName("VmStart")
	agentServiceVmKillMethodDescriptor                   = agentServiceServiceDescriptor.Methods().ByName("VmKill")
	agentServiceVmShutdownMethodDescriptor               = agentServiceServiceDescriptor.Methods().ByName("VmShutdown")
	agentServiceVmResetMethodDescriptor                  = agentServiceServiceDescriptor.Methods().ByName("VmReset")
	agentServiceVmRebootMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("VmReboot")
	agentServiceVmSuspendMethodDescriptor                = agentServiceServiceDescriptor.Methods().ByName("VmSuspend")
	agentServiceVmResumeMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("VmResume")
	agentServiceVmStatusMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("VmStatus")
	agentServiceVmMigrateMethodDescriptor                = agentServiceServiceDescriptor.Methods().ByName("VmMigrate")
	agentServiceVmIpListMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("VmIpList")
	agentServiceVmChangeUserPasswordMethodDescriptor     = agentServiceServiceDescriptor.Methods().ByName("VmChangeUserPassword")
	agentServiceVmGuestInfoMethodDescriptor              = agentServiceServiceDescriptor.Methods().ByName("VmGuestInfo")
	agentServiceVmBackupSystemVolumeMethodDescriptor     = agentServiceServiceDescriptor.Methods().ByName("VmBackupSystemVolume")
	agentServiceVmRestoreSystemVolumeMethodDescriptor    = agentServiceServiceDescriptor.Methods().ByName("VmRestoreSystemVolume")
	agentServiceVmAttachCloudInitMethodDescriptor        = agentServiceServiceDescriptor.Methods().ByName("VmAttachCloudInit")
	agentServiceVmAttachISOMethodDescriptor              = agentServiceServiceDescriptor.Methods().ByName("VmAttachISO")
	agentServiceVmDetachISOMethodDescriptor              = agentServiceServiceDescriptor.Methods().ByName("VmDetachISO")
	agentServiceVmAttachNetworkInterfaceMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("VmAttachNetworkInterface")
	agentServiceVmDetachNetworkInterfaceMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("VmDetachNetworkInterface")
	agentServiceStreamMethodDescriptor                   = agentServiceServiceDescriptor.Methods().ByName("Stream")
	agentServiceVmSnapshotRestoreMethodDescriptor        = agentServiceServiceDescriptor.Methods().ByName("VmSnapshotRestore")
	agentServiceVmSnapshotCreateMethodDescriptor         = agentServiceServiceDescriptor.Methods().ByName("VmSnapshotCreate")
	agentServiceVmSnapshotDeleteMethodDescriptor         = agentServiceServiceDescriptor.Methods().ByName("VmSnapshotDelete")
	agentServiceVmSnapshotCloneMethodDescriptor          = agentServiceServiceDescriptor.Methods().ByName("VmSnapshotClone")
	agentServiceUpdateConfigMethodDescriptor             = agentServiceServiceDescriptor.Methods().ByName("UpdateConfig")
)

// AgentServiceClient is a client for the pilab.cloud.agent.v1.AgentService service.
type AgentServiceClient interface {
	VmGetDefinition(context.Context, *connect.Request[v1.VmGetDefinitionRequest]) (*connect.Response[v1.VmGetDefinitionResponse], error)
	// VmStart starts a virtual machine.
	VmStart(context.Context, *connect.Request[v1.VmStartRequest]) (*connect.Response[v1.VmStartResponse], error)
	// VmKill stops a virtual machine forcefully.
	VmKill(context.Context, *connect.Request[v1.VmKillRequest]) (*connect.Response[v1.VmKillResponse], error)
	// VmShutdown stops a virtual machine gracefully.
	VmShutdown(context.Context, *connect.Request[v1.VmShutdownRequest]) (*connect.Response[v1.VmShutdownResponse], error)
	// VmReset resets a virtual machine. (power-cycle)
	VmReset(context.Context, *connect.Request[v1.VmResetRequest]) (*connect.Response[v1.VmResetResponse], error)
	// VmReboot reboots a virtual machine.
	VmReboot(context.Context, *connect.Request[v1.VmRebootRequest]) (*connect.Response[v1.VmRebootResponse], error)
	// VmSuspend suspends a virtual machine.
	VmSuspend(context.Context, *connect.Request[v1.VmSuspendRequest]) (*connect.Response[v1.VmSuspendResponse], error)
	// VmResume resumes a virtual machine.
	VmResume(context.Context, *connect.Request[v1.VmResumeRequest]) (*connect.Response[v1.VmResumeResponse], error)
	// VmStatus returns the status of a virtual machine.
	VmStatus(context.Context, *connect.Request[v1.VmStatusRequest]) (*connect.Response[v1.VmStatusResponse], error)
	// VmMigrate initiates a migration of a virtual machine.
	VmMigrate(context.Context, *connect.Request[v1.VmMigrateRequest]) (*connect.Response[v1.VmMigrateResponse], error)
	// VmIpList returns a list of IP addresses of a virtual machine.
	VmIpList(context.Context, *connect.Request[v1.VmIpListRequest]) (*connect.Response[v1.VmIpListResponse], error)
	// VmChangeUserPassword changes the password of a virtual machine.
	VmChangeUserPassword(context.Context, *connect.Request[v1.VmChangeUserPasswordRequest]) (*connect.Response[v1.VmChangeUserPasswordResponse], error)
	// VmGuestInfo sends a guest agent command to the client to fetch the guest agent data.
	VmGuestInfo(context.Context, *connect.Request[v1.VmGuestInfoRequest]) (*connect.Response[v1.VmGuestInfoResponse], error)
	// VmBackupSystemVolume backs up the system volume of a virtual machine.
	VmBackupSystemVolume(context.Context, *connect.Request[v1.VmBackupSystemVolumeRequest]) (*connect.Response[v1.VmBackupSystemVolumeResponse], error)
	// VmRestoreSystemVolume restores the system volume of a virtual machine.
	VmRestoreSystemVolume(context.Context, *connect.Request[v1.VmRestoreSystemVolumeRequest]) (*connect.Response[v1.VmRestoreSystemVolumeResponse], error)
	// VmAttachCloudInit attaches a cloud-init ISO to a virtual machine.
	VmAttachCloudInit(context.Context, *connect.Request[v1.VmAttachCloudInitRequest]) (*connect.Response[v1.VmAttachCloudInitResponse], error)
	// VmAttachISO attaches an ISO to a virtual machine.
	VmAttachISO(context.Context, *connect.Request[v1.VmAttachISORequest]) (*connect.Response[v1.VmAttachISOResponse], error)
	// VmDetachISO detaches an ISO from a virtual machine.
	VmDetachISO(context.Context, *connect.Request[v1.VmDetachISORequest]) (*connect.Response[v1.VmDetachISOResponse], error)
	// Attach/Detach Network Interfaces
	VmAttachNetworkInterface(context.Context, *connect.Request[v1.VmAttachNetworkInterfaceRequest]) (*connect.Response[v1.VmAttachNetworkInterfaceResponse], error)
	VmDetachNetworkInterface(context.Context, *connect.Request[v1.VmDetachNetworkInterfaceRequest]) (*connect.Response[v1.VmDetachNetworkInterfaceResponse], error)
	// Stream provides a stream to a ReadWriteCloser. Used for VNC, Pseudo Terminal
	Stream(context.Context) *connect.BidiStreamForClient[v1.StreamRequest, v1.StreamResponse]
	// Snapshot Management
	VmSnapshotRestore(context.Context, *connect.Request[v1.VmSnapshotRestoreRequest]) (*connect.Response[v1.VmSnapshotRestoreResponse], error)
	VmSnapshotCreate(context.Context, *connect.Request[v1.VmSnapshotCreateRequest]) (*connect.Response[v1.VmSnapshotCreateResponse], error)
	VmSnapshotDelete(context.Context, *connect.Request[v1.VmSnapshotDeleteRequest]) (*connect.Response[v1.VmSnapshotDeleteResponse], error)
	VmSnapshotClone(context.Context, *connect.Request[v1.VmSnapshotCloneRequest]) (*connect.Response[v1.VmSnapshotCloneResponse], error)
	// UpdateConfig updates the configuration of an appliance, covering the network, storage, etc.
	UpdateConfig(context.Context, *connect.Request[v1.UpdateConfigRequest]) (*connect.Response[v1.UpdateConfigResponse], error)
}

// NewAgentServiceClient constructs a client for the pilab.cloud.agent.v1.AgentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		vmGetDefinition: connect.NewClient[v1.VmGetDefinitionRequest, v1.VmGetDefinitionResponse](
			httpClient,
			baseURL+AgentServiceVmGetDefinitionProcedure,
			connect.WithSchema(agentServiceVmGetDefinitionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmStart: connect.NewClient[v1.VmStartRequest, v1.VmStartResponse](
			httpClient,
			baseURL+AgentServiceVmStartProcedure,
			connect.WithSchema(agentServiceVmStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmKill: connect.NewClient[v1.VmKillRequest, v1.VmKillResponse](
			httpClient,
			baseURL+AgentServiceVmKillProcedure,
			connect.WithSchema(agentServiceVmKillMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmShutdown: connect.NewClient[v1.VmShutdownRequest, v1.VmShutdownResponse](
			httpClient,
			baseURL+AgentServiceVmShutdownProcedure,
			connect.WithSchema(agentServiceVmShutdownMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmReset: connect.NewClient[v1.VmResetRequest, v1.VmResetResponse](
			httpClient,
			baseURL+AgentServiceVmResetProcedure,
			connect.WithSchema(agentServiceVmResetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmReboot: connect.NewClient[v1.VmRebootRequest, v1.VmRebootResponse](
			httpClient,
			baseURL+AgentServiceVmRebootProcedure,
			connect.WithSchema(agentServiceVmRebootMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmSuspend: connect.NewClient[v1.VmSuspendRequest, v1.VmSuspendResponse](
			httpClient,
			baseURL+AgentServiceVmSuspendProcedure,
			connect.WithSchema(agentServiceVmSuspendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmResume: connect.NewClient[v1.VmResumeRequest, v1.VmResumeResponse](
			httpClient,
			baseURL+AgentServiceVmResumeProcedure,
			connect.WithSchema(agentServiceVmResumeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmStatus: connect.NewClient[v1.VmStatusRequest, v1.VmStatusResponse](
			httpClient,
			baseURL+AgentServiceVmStatusProcedure,
			connect.WithSchema(agentServiceVmStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmMigrate: connect.NewClient[v1.VmMigrateRequest, v1.VmMigrateResponse](
			httpClient,
			baseURL+AgentServiceVmMigrateProcedure,
			connect.WithSchema(agentServiceVmMigrateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmIpList: connect.NewClient[v1.VmIpListRequest, v1.VmIpListResponse](
			httpClient,
			baseURL+AgentServiceVmIpListProcedure,
			connect.WithSchema(agentServiceVmIpListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmChangeUserPassword: connect.NewClient[v1.VmChangeUserPasswordRequest, v1.VmChangeUserPasswordResponse](
			httpClient,
			baseURL+AgentServiceVmChangeUserPasswordProcedure,
			connect.WithSchema(agentServiceVmChangeUserPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmGuestInfo: connect.NewClient[v1.VmGuestInfoRequest, v1.VmGuestInfoResponse](
			httpClient,
			baseURL+AgentServiceVmGuestInfoProcedure,
			connect.WithSchema(agentServiceVmGuestInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmBackupSystemVolume: connect.NewClient[v1.VmBackupSystemVolumeRequest, v1.VmBackupSystemVolumeResponse](
			httpClient,
			baseURL+AgentServiceVmBackupSystemVolumeProcedure,
			connect.WithSchema(agentServiceVmBackupSystemVolumeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmRestoreSystemVolume: connect.NewClient[v1.VmRestoreSystemVolumeRequest, v1.VmRestoreSystemVolumeResponse](
			httpClient,
			baseURL+AgentServiceVmRestoreSystemVolumeProcedure,
			connect.WithSchema(agentServiceVmRestoreSystemVolumeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmAttachCloudInit: connect.NewClient[v1.VmAttachCloudInitRequest, v1.VmAttachCloudInitResponse](
			httpClient,
			baseURL+AgentServiceVmAttachCloudInitProcedure,
			connect.WithSchema(agentServiceVmAttachCloudInitMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmAttachISO: connect.NewClient[v1.VmAttachISORequest, v1.VmAttachISOResponse](
			httpClient,
			baseURL+AgentServiceVmAttachISOProcedure,
			connect.WithSchema(agentServiceVmAttachISOMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmDetachISO: connect.NewClient[v1.VmDetachISORequest, v1.VmDetachISOResponse](
			httpClient,
			baseURL+AgentServiceVmDetachISOProcedure,
			connect.WithSchema(agentServiceVmDetachISOMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmAttachNetworkInterface: connect.NewClient[v1.VmAttachNetworkInterfaceRequest, v1.VmAttachNetworkInterfaceResponse](
			httpClient,
			baseURL+AgentServiceVmAttachNetworkInterfaceProcedure,
			connect.WithSchema(agentServiceVmAttachNetworkInterfaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmDetachNetworkInterface: connect.NewClient[v1.VmDetachNetworkInterfaceRequest, v1.VmDetachNetworkInterfaceResponse](
			httpClient,
			baseURL+AgentServiceVmDetachNetworkInterfaceProcedure,
			connect.WithSchema(agentServiceVmDetachNetworkInterfaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stream: connect.NewClient[v1.StreamRequest, v1.StreamResponse](
			httpClient,
			baseURL+AgentServiceStreamProcedure,
			connect.WithSchema(agentServiceStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmSnapshotRestore: connect.NewClient[v1.VmSnapshotRestoreRequest, v1.VmSnapshotRestoreResponse](
			httpClient,
			baseURL+AgentServiceVmSnapshotRestoreProcedure,
			connect.WithSchema(agentServiceVmSnapshotRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmSnapshotCreate: connect.NewClient[v1.VmSnapshotCreateRequest, v1.VmSnapshotCreateResponse](
			httpClient,
			baseURL+AgentServiceVmSnapshotCreateProcedure,
			connect.WithSchema(agentServiceVmSnapshotCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmSnapshotDelete: connect.NewClient[v1.VmSnapshotDeleteRequest, v1.VmSnapshotDeleteResponse](
			httpClient,
			baseURL+AgentServiceVmSnapshotDeleteProcedure,
			connect.WithSchema(agentServiceVmSnapshotDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vmSnapshotClone: connect.NewClient[v1.VmSnapshotCloneRequest, v1.VmSnapshotCloneResponse](
			httpClient,
			baseURL+AgentServiceVmSnapshotCloneProcedure,
			connect.WithSchema(agentServiceVmSnapshotCloneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateConfig: connect.NewClient[v1.UpdateConfigRequest, v1.UpdateConfigResponse](
			httpClient,
			baseURL+AgentServiceUpdateConfigProcedure,
			connect.WithSchema(agentServiceUpdateConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	vmGetDefinition          *connect.Client[v1.VmGetDefinitionRequest, v1.VmGetDefinitionResponse]
	vmStart                  *connect.Client[v1.VmStartRequest, v1.VmStartResponse]
	vmKill                   *connect.Client[v1.VmKillRequest, v1.VmKillResponse]
	vmShutdown               *connect.Client[v1.VmShutdownRequest, v1.VmShutdownResponse]
	vmReset                  *connect.Client[v1.VmResetRequest, v1.VmResetResponse]
	vmReboot                 *connect.Client[v1.VmRebootRequest, v1.VmRebootResponse]
	vmSuspend                *connect.Client[v1.VmSuspendRequest, v1.VmSuspendResponse]
	vmResume                 *connect.Client[v1.VmResumeRequest, v1.VmResumeResponse]
	vmStatus                 *connect.Client[v1.VmStatusRequest, v1.VmStatusResponse]
	vmMigrate                *connect.Client[v1.VmMigrateRequest, v1.VmMigrateResponse]
	vmIpList                 *connect.Client[v1.VmIpListRequest, v1.VmIpListResponse]
	vmChangeUserPassword     *connect.Client[v1.VmChangeUserPasswordRequest, v1.VmChangeUserPasswordResponse]
	vmGuestInfo              *connect.Client[v1.VmGuestInfoRequest, v1.VmGuestInfoResponse]
	vmBackupSystemVolume     *connect.Client[v1.VmBackupSystemVolumeRequest, v1.VmBackupSystemVolumeResponse]
	vmRestoreSystemVolume    *connect.Client[v1.VmRestoreSystemVolumeRequest, v1.VmRestoreSystemVolumeResponse]
	vmAttachCloudInit        *connect.Client[v1.VmAttachCloudInitRequest, v1.VmAttachCloudInitResponse]
	vmAttachISO              *connect.Client[v1.VmAttachISORequest, v1.VmAttachISOResponse]
	vmDetachISO              *connect.Client[v1.VmDetachISORequest, v1.VmDetachISOResponse]
	vmAttachNetworkInterface *connect.Client[v1.VmAttachNetworkInterfaceRequest, v1.VmAttachNetworkInterfaceResponse]
	vmDetachNetworkInterface *connect.Client[v1.VmDetachNetworkInterfaceRequest, v1.VmDetachNetworkInterfaceResponse]
	stream                   *connect.Client[v1.StreamRequest, v1.StreamResponse]
	vmSnapshotRestore        *connect.Client[v1.VmSnapshotRestoreRequest, v1.VmSnapshotRestoreResponse]
	vmSnapshotCreate         *connect.Client[v1.VmSnapshotCreateRequest, v1.VmSnapshotCreateResponse]
	vmSnapshotDelete         *connect.Client[v1.VmSnapshotDeleteRequest, v1.VmSnapshotDeleteResponse]
	vmSnapshotClone          *connect.Client[v1.VmSnapshotCloneRequest, v1.VmSnapshotCloneResponse]
	updateConfig             *connect.Client[v1.UpdateConfigRequest, v1.UpdateConfigResponse]
}

// VmGetDefinition calls pilab.cloud.agent.v1.AgentService.VmGetDefinition.
func (c *agentServiceClient) VmGetDefinition(ctx context.Context, req *connect.Request[v1.VmGetDefinitionRequest]) (*connect.Response[v1.VmGetDefinitionResponse], error) {
	return c.vmGetDefinition.CallUnary(ctx, req)
}

// VmStart calls pilab.cloud.agent.v1.AgentService.VmStart.
func (c *agentServiceClient) VmStart(ctx context.Context, req *connect.Request[v1.VmStartRequest]) (*connect.Response[v1.VmStartResponse], error) {
	return c.vmStart.CallUnary(ctx, req)
}

// VmKill calls pilab.cloud.agent.v1.AgentService.VmKill.
func (c *agentServiceClient) VmKill(ctx context.Context, req *connect.Request[v1.VmKillRequest]) (*connect.Response[v1.VmKillResponse], error) {
	return c.vmKill.CallUnary(ctx, req)
}

// VmShutdown calls pilab.cloud.agent.v1.AgentService.VmShutdown.
func (c *agentServiceClient) VmShutdown(ctx context.Context, req *connect.Request[v1.VmShutdownRequest]) (*connect.Response[v1.VmShutdownResponse], error) {
	return c.vmShutdown.CallUnary(ctx, req)
}

// VmReset calls pilab.cloud.agent.v1.AgentService.VmReset.
func (c *agentServiceClient) VmReset(ctx context.Context, req *connect.Request[v1.VmResetRequest]) (*connect.Response[v1.VmResetResponse], error) {
	return c.vmReset.CallUnary(ctx, req)
}

// VmReboot calls pilab.cloud.agent.v1.AgentService.VmReboot.
func (c *agentServiceClient) VmReboot(ctx context.Context, req *connect.Request[v1.VmRebootRequest]) (*connect.Response[v1.VmRebootResponse], error) {
	return c.vmReboot.CallUnary(ctx, req)
}

// VmSuspend calls pilab.cloud.agent.v1.AgentService.VmSuspend.
func (c *agentServiceClient) VmSuspend(ctx context.Context, req *connect.Request[v1.VmSuspendRequest]) (*connect.Response[v1.VmSuspendResponse], error) {
	return c.vmSuspend.CallUnary(ctx, req)
}

// VmResume calls pilab.cloud.agent.v1.AgentService.VmResume.
func (c *agentServiceClient) VmResume(ctx context.Context, req *connect.Request[v1.VmResumeRequest]) (*connect.Response[v1.VmResumeResponse], error) {
	return c.vmResume.CallUnary(ctx, req)
}

// VmStatus calls pilab.cloud.agent.v1.AgentService.VmStatus.
func (c *agentServiceClient) VmStatus(ctx context.Context, req *connect.Request[v1.VmStatusRequest]) (*connect.Response[v1.VmStatusResponse], error) {
	return c.vmStatus.CallUnary(ctx, req)
}

// VmMigrate calls pilab.cloud.agent.v1.AgentService.VmMigrate.
func (c *agentServiceClient) VmMigrate(ctx context.Context, req *connect.Request[v1.VmMigrateRequest]) (*connect.Response[v1.VmMigrateResponse], error) {
	return c.vmMigrate.CallUnary(ctx, req)
}

// VmIpList calls pilab.cloud.agent.v1.AgentService.VmIpList.
func (c *agentServiceClient) VmIpList(ctx context.Context, req *connect.Request[v1.VmIpListRequest]) (*connect.Response[v1.VmIpListResponse], error) {
	return c.vmIpList.CallUnary(ctx, req)
}

// VmChangeUserPassword calls pilab.cloud.agent.v1.AgentService.VmChangeUserPassword.
func (c *agentServiceClient) VmChangeUserPassword(ctx context.Context, req *connect.Request[v1.VmChangeUserPasswordRequest]) (*connect.Response[v1.VmChangeUserPasswordResponse], error) {
	return c.vmChangeUserPassword.CallUnary(ctx, req)
}

// VmGuestInfo calls pilab.cloud.agent.v1.AgentService.VmGuestInfo.
func (c *agentServiceClient) VmGuestInfo(ctx context.Context, req *connect.Request[v1.VmGuestInfoRequest]) (*connect.Response[v1.VmGuestInfoResponse], error) {
	return c.vmGuestInfo.CallUnary(ctx, req)
}

// VmBackupSystemVolume calls pilab.cloud.agent.v1.AgentService.VmBackupSystemVolume.
func (c *agentServiceClient) VmBackupSystemVolume(ctx context.Context, req *connect.Request[v1.VmBackupSystemVolumeRequest]) (*connect.Response[v1.VmBackupSystemVolumeResponse], error) {
	return c.vmBackupSystemVolume.CallUnary(ctx, req)
}

// VmRestoreSystemVolume calls pilab.cloud.agent.v1.AgentService.VmRestoreSystemVolume.
func (c *agentServiceClient) VmRestoreSystemVolume(ctx context.Context, req *connect.Request[v1.VmRestoreSystemVolumeRequest]) (*connect.Response[v1.VmRestoreSystemVolumeResponse], error) {
	return c.vmRestoreSystemVolume.CallUnary(ctx, req)
}

// VmAttachCloudInit calls pilab.cloud.agent.v1.AgentService.VmAttachCloudInit.
func (c *agentServiceClient) VmAttachCloudInit(ctx context.Context, req *connect.Request[v1.VmAttachCloudInitRequest]) (*connect.Response[v1.VmAttachCloudInitResponse], error) {
	return c.vmAttachCloudInit.CallUnary(ctx, req)
}

// VmAttachISO calls pilab.cloud.agent.v1.AgentService.VmAttachISO.
func (c *agentServiceClient) VmAttachISO(ctx context.Context, req *connect.Request[v1.VmAttachISORequest]) (*connect.Response[v1.VmAttachISOResponse], error) {
	return c.vmAttachISO.CallUnary(ctx, req)
}

// VmDetachISO calls pilab.cloud.agent.v1.AgentService.VmDetachISO.
func (c *agentServiceClient) VmDetachISO(ctx context.Context, req *connect.Request[v1.VmDetachISORequest]) (*connect.Response[v1.VmDetachISOResponse], error) {
	return c.vmDetachISO.CallUnary(ctx, req)
}

// VmAttachNetworkInterface calls pilab.cloud.agent.v1.AgentService.VmAttachNetworkInterface.
func (c *agentServiceClient) VmAttachNetworkInterface(ctx context.Context, req *connect.Request[v1.VmAttachNetworkInterfaceRequest]) (*connect.Response[v1.VmAttachNetworkInterfaceResponse], error) {
	return c.vmAttachNetworkInterface.CallUnary(ctx, req)
}

// VmDetachNetworkInterface calls pilab.cloud.agent.v1.AgentService.VmDetachNetworkInterface.
func (c *agentServiceClient) VmDetachNetworkInterface(ctx context.Context, req *connect.Request[v1.VmDetachNetworkInterfaceRequest]) (*connect.Response[v1.VmDetachNetworkInterfaceResponse], error) {
	return c.vmDetachNetworkInterface.CallUnary(ctx, req)
}

// Stream calls pilab.cloud.agent.v1.AgentService.Stream.
func (c *agentServiceClient) Stream(ctx context.Context) *connect.BidiStreamForClient[v1.StreamRequest, v1.StreamResponse] {
	return c.stream.CallBidiStream(ctx)
}

// VmSnapshotRestore calls pilab.cloud.agent.v1.AgentService.VmSnapshotRestore.
func (c *agentServiceClient) VmSnapshotRestore(ctx context.Context, req *connect.Request[v1.VmSnapshotRestoreRequest]) (*connect.Response[v1.VmSnapshotRestoreResponse], error) {
	return c.vmSnapshotRestore.CallUnary(ctx, req)
}

// VmSnapshotCreate calls pilab.cloud.agent.v1.AgentService.VmSnapshotCreate.
func (c *agentServiceClient) VmSnapshotCreate(ctx context.Context, req *connect.Request[v1.VmSnapshotCreateRequest]) (*connect.Response[v1.VmSnapshotCreateResponse], error) {
	return c.vmSnapshotCreate.CallUnary(ctx, req)
}

// VmSnapshotDelete calls pilab.cloud.agent.v1.AgentService.VmSnapshotDelete.
func (c *agentServiceClient) VmSnapshotDelete(ctx context.Context, req *connect.Request[v1.VmSnapshotDeleteRequest]) (*connect.Response[v1.VmSnapshotDeleteResponse], error) {
	return c.vmSnapshotDelete.CallUnary(ctx, req)
}

// VmSnapshotClone calls pilab.cloud.agent.v1.AgentService.VmSnapshotClone.
func (c *agentServiceClient) VmSnapshotClone(ctx context.Context, req *connect.Request[v1.VmSnapshotCloneRequest]) (*connect.Response[v1.VmSnapshotCloneResponse], error) {
	return c.vmSnapshotClone.CallUnary(ctx, req)
}

// UpdateConfig calls pilab.cloud.agent.v1.AgentService.UpdateConfig.
func (c *agentServiceClient) UpdateConfig(ctx context.Context, req *connect.Request[v1.UpdateConfigRequest]) (*connect.Response[v1.UpdateConfigResponse], error) {
	return c.updateConfig.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the pilab.cloud.agent.v1.AgentService service.
type AgentServiceHandler interface {
	VmGetDefinition(context.Context, *connect.Request[v1.VmGetDefinitionRequest]) (*connect.Response[v1.VmGetDefinitionResponse], error)
	// VmStart starts a virtual machine.
	VmStart(context.Context, *connect.Request[v1.VmStartRequest]) (*connect.Response[v1.VmStartResponse], error)
	// VmKill stops a virtual machine forcefully.
	VmKill(context.Context, *connect.Request[v1.VmKillRequest]) (*connect.Response[v1.VmKillResponse], error)
	// VmShutdown stops a virtual machine gracefully.
	VmShutdown(context.Context, *connect.Request[v1.VmShutdownRequest]) (*connect.Response[v1.VmShutdownResponse], error)
	// VmReset resets a virtual machine. (power-cycle)
	VmReset(context.Context, *connect.Request[v1.VmResetRequest]) (*connect.Response[v1.VmResetResponse], error)
	// VmReboot reboots a virtual machine.
	VmReboot(context.Context, *connect.Request[v1.VmRebootRequest]) (*connect.Response[v1.VmRebootResponse], error)
	// VmSuspend suspends a virtual machine.
	VmSuspend(context.Context, *connect.Request[v1.VmSuspendRequest]) (*connect.Response[v1.VmSuspendResponse], error)
	// VmResume resumes a virtual machine.
	VmResume(context.Context, *connect.Request[v1.VmResumeRequest]) (*connect.Response[v1.VmResumeResponse], error)
	// VmStatus returns the status of a virtual machine.
	VmStatus(context.Context, *connect.Request[v1.VmStatusRequest]) (*connect.Response[v1.VmStatusResponse], error)
	// VmMigrate initiates a migration of a virtual machine.
	VmMigrate(context.Context, *connect.Request[v1.VmMigrateRequest]) (*connect.Response[v1.VmMigrateResponse], error)
	// VmIpList returns a list of IP addresses of a virtual machine.
	VmIpList(context.Context, *connect.Request[v1.VmIpListRequest]) (*connect.Response[v1.VmIpListResponse], error)
	// VmChangeUserPassword changes the password of a virtual machine.
	VmChangeUserPassword(context.Context, *connect.Request[v1.VmChangeUserPasswordRequest]) (*connect.Response[v1.VmChangeUserPasswordResponse], error)
	// VmGuestInfo sends a guest agent command to the client to fetch the guest agent data.
	VmGuestInfo(context.Context, *connect.Request[v1.VmGuestInfoRequest]) (*connect.Response[v1.VmGuestInfoResponse], error)
	// VmBackupSystemVolume backs up the system volume of a virtual machine.
	VmBackupSystemVolume(context.Context, *connect.Request[v1.VmBackupSystemVolumeRequest]) (*connect.Response[v1.VmBackupSystemVolumeResponse], error)
	// VmRestoreSystemVolume restores the system volume of a virtual machine.
	VmRestoreSystemVolume(context.Context, *connect.Request[v1.VmRestoreSystemVolumeRequest]) (*connect.Response[v1.VmRestoreSystemVolumeResponse], error)
	// VmAttachCloudInit attaches a cloud-init ISO to a virtual machine.
	VmAttachCloudInit(context.Context, *connect.Request[v1.VmAttachCloudInitRequest]) (*connect.Response[v1.VmAttachCloudInitResponse], error)
	// VmAttachISO attaches an ISO to a virtual machine.
	VmAttachISO(context.Context, *connect.Request[v1.VmAttachISORequest]) (*connect.Response[v1.VmAttachISOResponse], error)
	// VmDetachISO detaches an ISO from a virtual machine.
	VmDetachISO(context.Context, *connect.Request[v1.VmDetachISORequest]) (*connect.Response[v1.VmDetachISOResponse], error)
	// Attach/Detach Network Interfaces
	VmAttachNetworkInterface(context.Context, *connect.Request[v1.VmAttachNetworkInterfaceRequest]) (*connect.Response[v1.VmAttachNetworkInterfaceResponse], error)
	VmDetachNetworkInterface(context.Context, *connect.Request[v1.VmDetachNetworkInterfaceRequest]) (*connect.Response[v1.VmDetachNetworkInterfaceResponse], error)
	// Stream provides a stream to a ReadWriteCloser. Used for VNC, Pseudo Terminal
	Stream(context.Context, *connect.BidiStream[v1.StreamRequest, v1.StreamResponse]) error
	// Snapshot Management
	VmSnapshotRestore(context.Context, *connect.Request[v1.VmSnapshotRestoreRequest]) (*connect.Response[v1.VmSnapshotRestoreResponse], error)
	VmSnapshotCreate(context.Context, *connect.Request[v1.VmSnapshotCreateRequest]) (*connect.Response[v1.VmSnapshotCreateResponse], error)
	VmSnapshotDelete(context.Context, *connect.Request[v1.VmSnapshotDeleteRequest]) (*connect.Response[v1.VmSnapshotDeleteResponse], error)
	VmSnapshotClone(context.Context, *connect.Request[v1.VmSnapshotCloneRequest]) (*connect.Response[v1.VmSnapshotCloneResponse], error)
	// UpdateConfig updates the configuration of an appliance, covering the network, storage, etc.
	UpdateConfig(context.Context, *connect.Request[v1.UpdateConfigRequest]) (*connect.Response[v1.UpdateConfigResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceVmGetDefinitionHandler := connect.NewUnaryHandler(
		AgentServiceVmGetDefinitionProcedure,
		svc.VmGetDefinition,
		connect.WithSchema(agentServiceVmGetDefinitionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmStartHandler := connect.NewUnaryHandler(
		AgentServiceVmStartProcedure,
		svc.VmStart,
		connect.WithSchema(agentServiceVmStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmKillHandler := connect.NewUnaryHandler(
		AgentServiceVmKillProcedure,
		svc.VmKill,
		connect.WithSchema(agentServiceVmKillMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmShutdownHandler := connect.NewUnaryHandler(
		AgentServiceVmShutdownProcedure,
		svc.VmShutdown,
		connect.WithSchema(agentServiceVmShutdownMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmResetHandler := connect.NewUnaryHandler(
		AgentServiceVmResetProcedure,
		svc.VmReset,
		connect.WithSchema(agentServiceVmResetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmRebootHandler := connect.NewUnaryHandler(
		AgentServiceVmRebootProcedure,
		svc.VmReboot,
		connect.WithSchema(agentServiceVmRebootMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmSuspendHandler := connect.NewUnaryHandler(
		AgentServiceVmSuspendProcedure,
		svc.VmSuspend,
		connect.WithSchema(agentServiceVmSuspendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmResumeHandler := connect.NewUnaryHandler(
		AgentServiceVmResumeProcedure,
		svc.VmResume,
		connect.WithSchema(agentServiceVmResumeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmStatusHandler := connect.NewUnaryHandler(
		AgentServiceVmStatusProcedure,
		svc.VmStatus,
		connect.WithSchema(agentServiceVmStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmMigrateHandler := connect.NewUnaryHandler(
		AgentServiceVmMigrateProcedure,
		svc.VmMigrate,
		connect.WithSchema(agentServiceVmMigrateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmIpListHandler := connect.NewUnaryHandler(
		AgentServiceVmIpListProcedure,
		svc.VmIpList,
		connect.WithSchema(agentServiceVmIpListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmChangeUserPasswordHandler := connect.NewUnaryHandler(
		AgentServiceVmChangeUserPasswordProcedure,
		svc.VmChangeUserPassword,
		connect.WithSchema(agentServiceVmChangeUserPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmGuestInfoHandler := connect.NewUnaryHandler(
		AgentServiceVmGuestInfoProcedure,
		svc.VmGuestInfo,
		connect.WithSchema(agentServiceVmGuestInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmBackupSystemVolumeHandler := connect.NewUnaryHandler(
		AgentServiceVmBackupSystemVolumeProcedure,
		svc.VmBackupSystemVolume,
		connect.WithSchema(agentServiceVmBackupSystemVolumeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmRestoreSystemVolumeHandler := connect.NewUnaryHandler(
		AgentServiceVmRestoreSystemVolumeProcedure,
		svc.VmRestoreSystemVolume,
		connect.WithSchema(agentServiceVmRestoreSystemVolumeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmAttachCloudInitHandler := connect.NewUnaryHandler(
		AgentServiceVmAttachCloudInitProcedure,
		svc.VmAttachCloudInit,
		connect.WithSchema(agentServiceVmAttachCloudInitMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmAttachISOHandler := connect.NewUnaryHandler(
		AgentServiceVmAttachISOProcedure,
		svc.VmAttachISO,
		connect.WithSchema(agentServiceVmAttachISOMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmDetachISOHandler := connect.NewUnaryHandler(
		AgentServiceVmDetachISOProcedure,
		svc.VmDetachISO,
		connect.WithSchema(agentServiceVmDetachISOMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmAttachNetworkInterfaceHandler := connect.NewUnaryHandler(
		AgentServiceVmAttachNetworkInterfaceProcedure,
		svc.VmAttachNetworkInterface,
		connect.WithSchema(agentServiceVmAttachNetworkInterfaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmDetachNetworkInterfaceHandler := connect.NewUnaryHandler(
		AgentServiceVmDetachNetworkInterfaceProcedure,
		svc.VmDetachNetworkInterface,
		connect.WithSchema(agentServiceVmDetachNetworkInterfaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceStreamHandler := connect.NewBidiStreamHandler(
		AgentServiceStreamProcedure,
		svc.Stream,
		connect.WithSchema(agentServiceStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmSnapshotRestoreHandler := connect.NewUnaryHandler(
		AgentServiceVmSnapshotRestoreProcedure,
		svc.VmSnapshotRestore,
		connect.WithSchema(agentServiceVmSnapshotRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmSnapshotCreateHandler := connect.NewUnaryHandler(
		AgentServiceVmSnapshotCreateProcedure,
		svc.VmSnapshotCreate,
		connect.WithSchema(agentServiceVmSnapshotCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmSnapshotDeleteHandler := connect.NewUnaryHandler(
		AgentServiceVmSnapshotDeleteProcedure,
		svc.VmSnapshotDelete,
		connect.WithSchema(agentServiceVmSnapshotDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVmSnapshotCloneHandler := connect.NewUnaryHandler(
		AgentServiceVmSnapshotCloneProcedure,
		svc.VmSnapshotClone,
		connect.WithSchema(agentServiceVmSnapshotCloneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUpdateConfigHandler := connect.NewUnaryHandler(
		AgentServiceUpdateConfigProcedure,
		svc.UpdateConfig,
		connect.WithSchema(agentServiceUpdateConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.agent.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceVmGetDefinitionProcedure:
			agentServiceVmGetDefinitionHandler.ServeHTTP(w, r)
		case AgentServiceVmStartProcedure:
			agentServiceVmStartHandler.ServeHTTP(w, r)
		case AgentServiceVmKillProcedure:
			agentServiceVmKillHandler.ServeHTTP(w, r)
		case AgentServiceVmShutdownProcedure:
			agentServiceVmShutdownHandler.ServeHTTP(w, r)
		case AgentServiceVmResetProcedure:
			agentServiceVmResetHandler.ServeHTTP(w, r)
		case AgentServiceVmRebootProcedure:
			agentServiceVmRebootHandler.ServeHTTP(w, r)
		case AgentServiceVmSuspendProcedure:
			agentServiceVmSuspendHandler.ServeHTTP(w, r)
		case AgentServiceVmResumeProcedure:
			agentServiceVmResumeHandler.ServeHTTP(w, r)
		case AgentServiceVmStatusProcedure:
			agentServiceVmStatusHandler.ServeHTTP(w, r)
		case AgentServiceVmMigrateProcedure:
			agentServiceVmMigrateHandler.ServeHTTP(w, r)
		case AgentServiceVmIpListProcedure:
			agentServiceVmIpListHandler.ServeHTTP(w, r)
		case AgentServiceVmChangeUserPasswordProcedure:
			agentServiceVmChangeUserPasswordHandler.ServeHTTP(w, r)
		case AgentServiceVmGuestInfoProcedure:
			agentServiceVmGuestInfoHandler.ServeHTTP(w, r)
		case AgentServiceVmBackupSystemVolumeProcedure:
			agentServiceVmBackupSystemVolumeHandler.ServeHTTP(w, r)
		case AgentServiceVmRestoreSystemVolumeProcedure:
			agentServiceVmRestoreSystemVolumeHandler.ServeHTTP(w, r)
		case AgentServiceVmAttachCloudInitProcedure:
			agentServiceVmAttachCloudInitHandler.ServeHTTP(w, r)
		case AgentServiceVmAttachISOProcedure:
			agentServiceVmAttachISOHandler.ServeHTTP(w, r)
		case AgentServiceVmDetachISOProcedure:
			agentServiceVmDetachISOHandler.ServeHTTP(w, r)
		case AgentServiceVmAttachNetworkInterfaceProcedure:
			agentServiceVmAttachNetworkInterfaceHandler.ServeHTTP(w, r)
		case AgentServiceVmDetachNetworkInterfaceProcedure:
			agentServiceVmDetachNetworkInterfaceHandler.ServeHTTP(w, r)
		case AgentServiceStreamProcedure:
			agentServiceStreamHandler.ServeHTTP(w, r)
		case AgentServiceVmSnapshotRestoreProcedure:
			agentServiceVmSnapshotRestoreHandler.ServeHTTP(w, r)
		case AgentServiceVmSnapshotCreateProcedure:
			agentServiceVmSnapshotCreateHandler.ServeHTTP(w, r)
		case AgentServiceVmSnapshotDeleteProcedure:
			agentServiceVmSnapshotDeleteHandler.ServeHTTP(w, r)
		case AgentServiceVmSnapshotCloneProcedure:
			agentServiceVmSnapshotCloneHandler.ServeHTTP(w, r)
		case AgentServiceUpdateConfigProcedure:
			agentServiceUpdateConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) VmGetDefinition(context.Context, *connect.Request[v1.VmGetDefinitionRequest]) (*connect.Response[v1.VmGetDefinitionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmGetDefinition is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmStart(context.Context, *connect.Request[v1.VmStartRequest]) (*connect.Response[v1.VmStartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmStart is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmKill(context.Context, *connect.Request[v1.VmKillRequest]) (*connect.Response[v1.VmKillResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmKill is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmShutdown(context.Context, *connect.Request[v1.VmShutdownRequest]) (*connect.Response[v1.VmShutdownResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmShutdown is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmReset(context.Context, *connect.Request[v1.VmResetRequest]) (*connect.Response[v1.VmResetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmReset is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmReboot(context.Context, *connect.Request[v1.VmRebootRequest]) (*connect.Response[v1.VmRebootResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmReboot is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmSuspend(context.Context, *connect.Request[v1.VmSuspendRequest]) (*connect.Response[v1.VmSuspendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmSuspend is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmResume(context.Context, *connect.Request[v1.VmResumeRequest]) (*connect.Response[v1.VmResumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmResume is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmStatus(context.Context, *connect.Request[v1.VmStatusRequest]) (*connect.Response[v1.VmStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmStatus is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmMigrate(context.Context, *connect.Request[v1.VmMigrateRequest]) (*connect.Response[v1.VmMigrateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmMigrate is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmIpList(context.Context, *connect.Request[v1.VmIpListRequest]) (*connect.Response[v1.VmIpListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmIpList is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmChangeUserPassword(context.Context, *connect.Request[v1.VmChangeUserPasswordRequest]) (*connect.Response[v1.VmChangeUserPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmChangeUserPassword is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmGuestInfo(context.Context, *connect.Request[v1.VmGuestInfoRequest]) (*connect.Response[v1.VmGuestInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmGuestInfo is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmBackupSystemVolume(context.Context, *connect.Request[v1.VmBackupSystemVolumeRequest]) (*connect.Response[v1.VmBackupSystemVolumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmBackupSystemVolume is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmRestoreSystemVolume(context.Context, *connect.Request[v1.VmRestoreSystemVolumeRequest]) (*connect.Response[v1.VmRestoreSystemVolumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmRestoreSystemVolume is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmAttachCloudInit(context.Context, *connect.Request[v1.VmAttachCloudInitRequest]) (*connect.Response[v1.VmAttachCloudInitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmAttachCloudInit is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmAttachISO(context.Context, *connect.Request[v1.VmAttachISORequest]) (*connect.Response[v1.VmAttachISOResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmAttachISO is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmDetachISO(context.Context, *connect.Request[v1.VmDetachISORequest]) (*connect.Response[v1.VmDetachISOResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmDetachISO is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmAttachNetworkInterface(context.Context, *connect.Request[v1.VmAttachNetworkInterfaceRequest]) (*connect.Response[v1.VmAttachNetworkInterfaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmAttachNetworkInterface is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmDetachNetworkInterface(context.Context, *connect.Request[v1.VmDetachNetworkInterfaceRequest]) (*connect.Response[v1.VmDetachNetworkInterfaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmDetachNetworkInterface is not implemented"))
}

func (UnimplementedAgentServiceHandler) Stream(context.Context, *connect.BidiStream[v1.StreamRequest, v1.StreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.Stream is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmSnapshotRestore(context.Context, *connect.Request[v1.VmSnapshotRestoreRequest]) (*connect.Response[v1.VmSnapshotRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmSnapshotRestore is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmSnapshotCreate(context.Context, *connect.Request[v1.VmSnapshotCreateRequest]) (*connect.Response[v1.VmSnapshotCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmSnapshotCreate is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmSnapshotDelete(context.Context, *connect.Request[v1.VmSnapshotDeleteRequest]) (*connect.Response[v1.VmSnapshotDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmSnapshotDelete is not implemented"))
}

func (UnimplementedAgentServiceHandler) VmSnapshotClone(context.Context, *connect.Request[v1.VmSnapshotCloneRequest]) (*connect.Response[v1.VmSnapshotCloneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.VmSnapshotClone is not implemented"))
}

func (UnimplementedAgentServiceHandler) UpdateConfig(context.Context, *connect.Request[v1.UpdateConfigRequest]) (*connect.Response[v1.UpdateConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v1.AgentService.UpdateConfig is not implemented"))
}
