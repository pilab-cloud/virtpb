// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/agent/v1/agentservice.proto

package agentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_VmGetDefinition_FullMethodName          = "/pilab.cloud.agent.v1.AgentService/VmGetDefinition"
	AgentService_VmStart_FullMethodName                  = "/pilab.cloud.agent.v1.AgentService/VmStart"
	AgentService_VmKill_FullMethodName                   = "/pilab.cloud.agent.v1.AgentService/VmKill"
	AgentService_VmShutdown_FullMethodName               = "/pilab.cloud.agent.v1.AgentService/VmShutdown"
	AgentService_VmReset_FullMethodName                  = "/pilab.cloud.agent.v1.AgentService/VmReset"
	AgentService_VmReboot_FullMethodName                 = "/pilab.cloud.agent.v1.AgentService/VmReboot"
	AgentService_VmSuspend_FullMethodName                = "/pilab.cloud.agent.v1.AgentService/VmSuspend"
	AgentService_VmResume_FullMethodName                 = "/pilab.cloud.agent.v1.AgentService/VmResume"
	AgentService_VmStatus_FullMethodName                 = "/pilab.cloud.agent.v1.AgentService/VmStatus"
	AgentService_VmMigrate_FullMethodName                = "/pilab.cloud.agent.v1.AgentService/VmMigrate"
	AgentService_VmIpList_FullMethodName                 = "/pilab.cloud.agent.v1.AgentService/VmIpList"
	AgentService_VmChangeUserPassword_FullMethodName     = "/pilab.cloud.agent.v1.AgentService/VmChangeUserPassword"
	AgentService_VmGuestInfo_FullMethodName              = "/pilab.cloud.agent.v1.AgentService/VmGuestInfo"
	AgentService_VmBackupSystemVolume_FullMethodName     = "/pilab.cloud.agent.v1.AgentService/VmBackupSystemVolume"
	AgentService_VmRestoreSystemVolume_FullMethodName    = "/pilab.cloud.agent.v1.AgentService/VmRestoreSystemVolume"
	AgentService_VmAttachCloudInit_FullMethodName        = "/pilab.cloud.agent.v1.AgentService/VmAttachCloudInit"
	AgentService_VmAttachISO_FullMethodName              = "/pilab.cloud.agent.v1.AgentService/VmAttachISO"
	AgentService_VmDetachISO_FullMethodName              = "/pilab.cloud.agent.v1.AgentService/VmDetachISO"
	AgentService_VmAttachNetworkInterface_FullMethodName = "/pilab.cloud.agent.v1.AgentService/VmAttachNetworkInterface"
	AgentService_VmDetachNetworkInterface_FullMethodName = "/pilab.cloud.agent.v1.AgentService/VmDetachNetworkInterface"
	AgentService_Stream_FullMethodName                   = "/pilab.cloud.agent.v1.AgentService/Stream"
	AgentService_VmSnapshotRestore_FullMethodName        = "/pilab.cloud.agent.v1.AgentService/VmSnapshotRestore"
	AgentService_VmSnapshotCreate_FullMethodName         = "/pilab.cloud.agent.v1.AgentService/VmSnapshotCreate"
	AgentService_VmSnapshotDelete_FullMethodName         = "/pilab.cloud.agent.v1.AgentService/VmSnapshotDelete"
	AgentService_VmSnapshotClone_FullMethodName          = "/pilab.cloud.agent.v1.AgentService/VmSnapshotClone"
	AgentService_UpdateConfig_FullMethodName             = "/pilab.cloud.agent.v1.AgentService/UpdateConfig"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	VmGetDefinition(ctx context.Context, in *VmGetDefinitionRequest, opts ...grpc.CallOption) (*VmGetDefinitionResponse, error)
	// VmStart starts a virtual machine.
	VmStart(ctx context.Context, in *VmStartRequest, opts ...grpc.CallOption) (*VmStartResponse, error)
	// VmKill stops a virtual machine forcefully.
	VmKill(ctx context.Context, in *VmKillRequest, opts ...grpc.CallOption) (*VmKillResponse, error)
	// VmShutdown stops a virtual machine gracefully.
	VmShutdown(ctx context.Context, in *VmShutdownRequest, opts ...grpc.CallOption) (*VmShutdownResponse, error)
	// VmReset resets a virtual machine. (power-cycle)
	VmReset(ctx context.Context, in *VmResetRequest, opts ...grpc.CallOption) (*VmResetResponse, error)
	// VmReboot reboots a virtual machine.
	VmReboot(ctx context.Context, in *VmRebootRequest, opts ...grpc.CallOption) (*VmRebootResponse, error)
	// VmSuspend suspends a virtual machine.
	VmSuspend(ctx context.Context, in *VmSuspendRequest, opts ...grpc.CallOption) (*VmSuspendResponse, error)
	// VmResume resumes a virtual machine.
	VmResume(ctx context.Context, in *VmResumeRequest, opts ...grpc.CallOption) (*VmResumeResponse, error)
	// VmStatus returns the status of a virtual machine.
	VmStatus(ctx context.Context, in *VmStatusRequest, opts ...grpc.CallOption) (*VmStatusResponse, error)
	// VmMigrate initiates a migration of a virtual machine.
	VmMigrate(ctx context.Context, in *VmMigrateRequest, opts ...grpc.CallOption) (*VmMigrateResponse, error)
	// VmIpList returns a list of IP addresses of a virtual machine.
	VmIpList(ctx context.Context, in *VmIpListRequest, opts ...grpc.CallOption) (*VmIpListResponse, error)
	// VmChangeUserPassword changes the password of a virtual machine.
	VmChangeUserPassword(ctx context.Context, in *VmChangeUserPasswordRequest, opts ...grpc.CallOption) (*VmChangeUserPasswordResponse, error)
	// VmGuestInfo sends a guest agent command to the client to fetch the guest agent data.
	VmGuestInfo(ctx context.Context, in *VmGuestInfoRequest, opts ...grpc.CallOption) (*VmGuestInfoResponse, error)
	// VmBackupSystemVolume backs up the system volume of a virtual machine.
	VmBackupSystemVolume(ctx context.Context, in *VmBackupSystemVolumeRequest, opts ...grpc.CallOption) (*VmBackupSystemVolumeResponse, error)
	// VmRestoreSystemVolume restores the system volume of a virtual machine.
	VmRestoreSystemVolume(ctx context.Context, in *VmRestoreSystemVolumeRequest, opts ...grpc.CallOption) (*VmRestoreSystemVolumeResponse, error)
	// VmAttachCloudInit attaches a cloud-init ISO to a virtual machine.
	VmAttachCloudInit(ctx context.Context, in *VmAttachCloudInitRequest, opts ...grpc.CallOption) (*VmAttachCloudInitResponse, error)
	// VmAttachISO attaches an ISO to a virtual machine.
	VmAttachISO(ctx context.Context, in *VmAttachISORequest, opts ...grpc.CallOption) (*VmAttachISOResponse, error)
	// VmDetachISO detaches an ISO from a virtual machine.
	VmDetachISO(ctx context.Context, in *VmDetachISORequest, opts ...grpc.CallOption) (*VmDetachISOResponse, error)
	// Attach/Detach Network Interfaces
	VmAttachNetworkInterface(ctx context.Context, in *VmAttachNetworkInterfaceRequest, opts ...grpc.CallOption) (*VmAttachNetworkInterfaceResponse, error)
	VmDetachNetworkInterface(ctx context.Context, in *VmDetachNetworkInterfaceRequest, opts ...grpc.CallOption) (*VmDetachNetworkInterfaceResponse, error)
	// Stream provides a stream to a ReadWriteCloser. Used for VNC, Pseudo Terminal
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error)
	// Snapshot Management
	VmSnapshotRestore(ctx context.Context, in *VmSnapshotRestoreRequest, opts ...grpc.CallOption) (*VmSnapshotRestoreResponse, error)
	VmSnapshotCreate(ctx context.Context, in *VmSnapshotCreateRequest, opts ...grpc.CallOption) (*VmSnapshotCreateResponse, error)
	VmSnapshotDelete(ctx context.Context, in *VmSnapshotDeleteRequest, opts ...grpc.CallOption) (*VmSnapshotDeleteResponse, error)
	VmSnapshotClone(ctx context.Context, in *VmSnapshotCloneRequest, opts ...grpc.CallOption) (*VmSnapshotCloneResponse, error)
	// UpdateConfig updates the configuration of an appliance, covering the network, storage, etc.
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) VmGetDefinition(ctx context.Context, in *VmGetDefinitionRequest, opts ...grpc.CallOption) (*VmGetDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmGetDefinitionResponse)
	err := c.cc.Invoke(ctx, AgentService_VmGetDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmStart(ctx context.Context, in *VmStartRequest, opts ...grpc.CallOption) (*VmStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmStartResponse)
	err := c.cc.Invoke(ctx, AgentService_VmStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmKill(ctx context.Context, in *VmKillRequest, opts ...grpc.CallOption) (*VmKillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmKillResponse)
	err := c.cc.Invoke(ctx, AgentService_VmKill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmShutdown(ctx context.Context, in *VmShutdownRequest, opts ...grpc.CallOption) (*VmShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmShutdownResponse)
	err := c.cc.Invoke(ctx, AgentService_VmShutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmReset(ctx context.Context, in *VmResetRequest, opts ...grpc.CallOption) (*VmResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmResetResponse)
	err := c.cc.Invoke(ctx, AgentService_VmReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmReboot(ctx context.Context, in *VmRebootRequest, opts ...grpc.CallOption) (*VmRebootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmRebootResponse)
	err := c.cc.Invoke(ctx, AgentService_VmReboot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmSuspend(ctx context.Context, in *VmSuspendRequest, opts ...grpc.CallOption) (*VmSuspendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmSuspendResponse)
	err := c.cc.Invoke(ctx, AgentService_VmSuspend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmResume(ctx context.Context, in *VmResumeRequest, opts ...grpc.CallOption) (*VmResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmResumeResponse)
	err := c.cc.Invoke(ctx, AgentService_VmResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmStatus(ctx context.Context, in *VmStatusRequest, opts ...grpc.CallOption) (*VmStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmStatusResponse)
	err := c.cc.Invoke(ctx, AgentService_VmStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmMigrate(ctx context.Context, in *VmMigrateRequest, opts ...grpc.CallOption) (*VmMigrateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmMigrateResponse)
	err := c.cc.Invoke(ctx, AgentService_VmMigrate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmIpList(ctx context.Context, in *VmIpListRequest, opts ...grpc.CallOption) (*VmIpListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmIpListResponse)
	err := c.cc.Invoke(ctx, AgentService_VmIpList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmChangeUserPassword(ctx context.Context, in *VmChangeUserPasswordRequest, opts ...grpc.CallOption) (*VmChangeUserPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmChangeUserPasswordResponse)
	err := c.cc.Invoke(ctx, AgentService_VmChangeUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmGuestInfo(ctx context.Context, in *VmGuestInfoRequest, opts ...grpc.CallOption) (*VmGuestInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmGuestInfoResponse)
	err := c.cc.Invoke(ctx, AgentService_VmGuestInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmBackupSystemVolume(ctx context.Context, in *VmBackupSystemVolumeRequest, opts ...grpc.CallOption) (*VmBackupSystemVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmBackupSystemVolumeResponse)
	err := c.cc.Invoke(ctx, AgentService_VmBackupSystemVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmRestoreSystemVolume(ctx context.Context, in *VmRestoreSystemVolumeRequest, opts ...grpc.CallOption) (*VmRestoreSystemVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmRestoreSystemVolumeResponse)
	err := c.cc.Invoke(ctx, AgentService_VmRestoreSystemVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmAttachCloudInit(ctx context.Context, in *VmAttachCloudInitRequest, opts ...grpc.CallOption) (*VmAttachCloudInitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmAttachCloudInitResponse)
	err := c.cc.Invoke(ctx, AgentService_VmAttachCloudInit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmAttachISO(ctx context.Context, in *VmAttachISORequest, opts ...grpc.CallOption) (*VmAttachISOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmAttachISOResponse)
	err := c.cc.Invoke(ctx, AgentService_VmAttachISO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmDetachISO(ctx context.Context, in *VmDetachISORequest, opts ...grpc.CallOption) (*VmDetachISOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmDetachISOResponse)
	err := c.cc.Invoke(ctx, AgentService_VmDetachISO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmAttachNetworkInterface(ctx context.Context, in *VmAttachNetworkInterfaceRequest, opts ...grpc.CallOption) (*VmAttachNetworkInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmAttachNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, AgentService_VmAttachNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmDetachNetworkInterface(ctx context.Context, in *VmDetachNetworkInterfaceRequest, opts ...grpc.CallOption) (*VmDetachNetworkInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmDetachNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, AgentService_VmDetachNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamClient = grpc.BidiStreamingClient[StreamRequest, StreamResponse]

func (c *agentServiceClient) VmSnapshotRestore(ctx context.Context, in *VmSnapshotRestoreRequest, opts ...grpc.CallOption) (*VmSnapshotRestoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmSnapshotRestoreResponse)
	err := c.cc.Invoke(ctx, AgentService_VmSnapshotRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmSnapshotCreate(ctx context.Context, in *VmSnapshotCreateRequest, opts ...grpc.CallOption) (*VmSnapshotCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmSnapshotCreateResponse)
	err := c.cc.Invoke(ctx, AgentService_VmSnapshotCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmSnapshotDelete(ctx context.Context, in *VmSnapshotDeleteRequest, opts ...grpc.CallOption) (*VmSnapshotDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmSnapshotDeleteResponse)
	err := c.cc.Invoke(ctx, AgentService_VmSnapshotDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VmSnapshotClone(ctx context.Context, in *VmSnapshotCloneRequest, opts ...grpc.CallOption) (*VmSnapshotCloneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmSnapshotCloneResponse)
	err := c.cc.Invoke(ctx, AgentService_VmSnapshotClone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
type AgentServiceServer interface {
	VmGetDefinition(context.Context, *VmGetDefinitionRequest) (*VmGetDefinitionResponse, error)
	// VmStart starts a virtual machine.
	VmStart(context.Context, *VmStartRequest) (*VmStartResponse, error)
	// VmKill stops a virtual machine forcefully.
	VmKill(context.Context, *VmKillRequest) (*VmKillResponse, error)
	// VmShutdown stops a virtual machine gracefully.
	VmShutdown(context.Context, *VmShutdownRequest) (*VmShutdownResponse, error)
	// VmReset resets a virtual machine. (power-cycle)
	VmReset(context.Context, *VmResetRequest) (*VmResetResponse, error)
	// VmReboot reboots a virtual machine.
	VmReboot(context.Context, *VmRebootRequest) (*VmRebootResponse, error)
	// VmSuspend suspends a virtual machine.
	VmSuspend(context.Context, *VmSuspendRequest) (*VmSuspendResponse, error)
	// VmResume resumes a virtual machine.
	VmResume(context.Context, *VmResumeRequest) (*VmResumeResponse, error)
	// VmStatus returns the status of a virtual machine.
	VmStatus(context.Context, *VmStatusRequest) (*VmStatusResponse, error)
	// VmMigrate initiates a migration of a virtual machine.
	VmMigrate(context.Context, *VmMigrateRequest) (*VmMigrateResponse, error)
	// VmIpList returns a list of IP addresses of a virtual machine.
	VmIpList(context.Context, *VmIpListRequest) (*VmIpListResponse, error)
	// VmChangeUserPassword changes the password of a virtual machine.
	VmChangeUserPassword(context.Context, *VmChangeUserPasswordRequest) (*VmChangeUserPasswordResponse, error)
	// VmGuestInfo sends a guest agent command to the client to fetch the guest agent data.
	VmGuestInfo(context.Context, *VmGuestInfoRequest) (*VmGuestInfoResponse, error)
	// VmBackupSystemVolume backs up the system volume of a virtual machine.
	VmBackupSystemVolume(context.Context, *VmBackupSystemVolumeRequest) (*VmBackupSystemVolumeResponse, error)
	// VmRestoreSystemVolume restores the system volume of a virtual machine.
	VmRestoreSystemVolume(context.Context, *VmRestoreSystemVolumeRequest) (*VmRestoreSystemVolumeResponse, error)
	// VmAttachCloudInit attaches a cloud-init ISO to a virtual machine.
	VmAttachCloudInit(context.Context, *VmAttachCloudInitRequest) (*VmAttachCloudInitResponse, error)
	// VmAttachISO attaches an ISO to a virtual machine.
	VmAttachISO(context.Context, *VmAttachISORequest) (*VmAttachISOResponse, error)
	// VmDetachISO detaches an ISO from a virtual machine.
	VmDetachISO(context.Context, *VmDetachISORequest) (*VmDetachISOResponse, error)
	// Attach/Detach Network Interfaces
	VmAttachNetworkInterface(context.Context, *VmAttachNetworkInterfaceRequest) (*VmAttachNetworkInterfaceResponse, error)
	VmDetachNetworkInterface(context.Context, *VmDetachNetworkInterfaceRequest) (*VmDetachNetworkInterfaceResponse, error)
	// Stream provides a stream to a ReadWriteCloser. Used for VNC, Pseudo Terminal
	Stream(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error
	// Snapshot Management
	VmSnapshotRestore(context.Context, *VmSnapshotRestoreRequest) (*VmSnapshotRestoreResponse, error)
	VmSnapshotCreate(context.Context, *VmSnapshotCreateRequest) (*VmSnapshotCreateResponse, error)
	VmSnapshotDelete(context.Context, *VmSnapshotDeleteRequest) (*VmSnapshotDeleteResponse, error)
	VmSnapshotClone(context.Context, *VmSnapshotCloneRequest) (*VmSnapshotCloneResponse, error)
	// UpdateConfig updates the configuration of an appliance, covering the network, storage, etc.
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) VmGetDefinition(context.Context, *VmGetDefinitionRequest) (*VmGetDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmGetDefinition not implemented")
}
func (UnimplementedAgentServiceServer) VmStart(context.Context, *VmStartRequest) (*VmStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmStart not implemented")
}
func (UnimplementedAgentServiceServer) VmKill(context.Context, *VmKillRequest) (*VmKillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmKill not implemented")
}
func (UnimplementedAgentServiceServer) VmShutdown(context.Context, *VmShutdownRequest) (*VmShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmShutdown not implemented")
}
func (UnimplementedAgentServiceServer) VmReset(context.Context, *VmResetRequest) (*VmResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmReset not implemented")
}
func (UnimplementedAgentServiceServer) VmReboot(context.Context, *VmRebootRequest) (*VmRebootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmReboot not implemented")
}
func (UnimplementedAgentServiceServer) VmSuspend(context.Context, *VmSuspendRequest) (*VmSuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmSuspend not implemented")
}
func (UnimplementedAgentServiceServer) VmResume(context.Context, *VmResumeRequest) (*VmResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmResume not implemented")
}
func (UnimplementedAgentServiceServer) VmStatus(context.Context, *VmStatusRequest) (*VmStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmStatus not implemented")
}
func (UnimplementedAgentServiceServer) VmMigrate(context.Context, *VmMigrateRequest) (*VmMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmMigrate not implemented")
}
func (UnimplementedAgentServiceServer) VmIpList(context.Context, *VmIpListRequest) (*VmIpListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmIpList not implemented")
}
func (UnimplementedAgentServiceServer) VmChangeUserPassword(context.Context, *VmChangeUserPasswordRequest) (*VmChangeUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmChangeUserPassword not implemented")
}
func (UnimplementedAgentServiceServer) VmGuestInfo(context.Context, *VmGuestInfoRequest) (*VmGuestInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmGuestInfo not implemented")
}
func (UnimplementedAgentServiceServer) VmBackupSystemVolume(context.Context, *VmBackupSystemVolumeRequest) (*VmBackupSystemVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmBackupSystemVolume not implemented")
}
func (UnimplementedAgentServiceServer) VmRestoreSystemVolume(context.Context, *VmRestoreSystemVolumeRequest) (*VmRestoreSystemVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmRestoreSystemVolume not implemented")
}
func (UnimplementedAgentServiceServer) VmAttachCloudInit(context.Context, *VmAttachCloudInitRequest) (*VmAttachCloudInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmAttachCloudInit not implemented")
}
func (UnimplementedAgentServiceServer) VmAttachISO(context.Context, *VmAttachISORequest) (*VmAttachISOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmAttachISO not implemented")
}
func (UnimplementedAgentServiceServer) VmDetachISO(context.Context, *VmDetachISORequest) (*VmDetachISOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmDetachISO not implemented")
}
func (UnimplementedAgentServiceServer) VmAttachNetworkInterface(context.Context, *VmAttachNetworkInterfaceRequest) (*VmAttachNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmAttachNetworkInterface not implemented")
}
func (UnimplementedAgentServiceServer) VmDetachNetworkInterface(context.Context, *VmDetachNetworkInterfaceRequest) (*VmDetachNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmDetachNetworkInterface not implemented")
}
func (UnimplementedAgentServiceServer) Stream(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedAgentServiceServer) VmSnapshotRestore(context.Context, *VmSnapshotRestoreRequest) (*VmSnapshotRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmSnapshotRestore not implemented")
}
func (UnimplementedAgentServiceServer) VmSnapshotCreate(context.Context, *VmSnapshotCreateRequest) (*VmSnapshotCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmSnapshotCreate not implemented")
}
func (UnimplementedAgentServiceServer) VmSnapshotDelete(context.Context, *VmSnapshotDeleteRequest) (*VmSnapshotDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmSnapshotDelete not implemented")
}
func (UnimplementedAgentServiceServer) VmSnapshotClone(context.Context, *VmSnapshotCloneRequest) (*VmSnapshotCloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmSnapshotClone not implemented")
}
func (UnimplementedAgentServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_VmGetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmGetDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmGetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmGetDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmGetDefinition(ctx, req.(*VmGetDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmStart(ctx, req.(*VmStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmKill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmKill(ctx, req.(*VmKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmShutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmShutdown(ctx, req.(*VmShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmReset(ctx, req.(*VmResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmReboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmRebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmReboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmReboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmReboot(ctx, req.(*VmRebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmSuspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmSuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmSuspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmSuspend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmSuspend(ctx, req.(*VmSuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmResume(ctx, req.(*VmResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmStatus(ctx, req.(*VmStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmMigrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmMigrate(ctx, req.(*VmMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmIpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmIpListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmIpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmIpList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmIpList(ctx, req.(*VmIpListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmChangeUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmChangeUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmChangeUserPassword(ctx, req.(*VmChangeUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmGuestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmGuestInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmGuestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmGuestInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmGuestInfo(ctx, req.(*VmGuestInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmBackupSystemVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmBackupSystemVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmBackupSystemVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmBackupSystemVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmBackupSystemVolume(ctx, req.(*VmBackupSystemVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmRestoreSystemVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmRestoreSystemVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmRestoreSystemVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmRestoreSystemVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmRestoreSystemVolume(ctx, req.(*VmRestoreSystemVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmAttachCloudInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmAttachCloudInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmAttachCloudInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmAttachCloudInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmAttachCloudInit(ctx, req.(*VmAttachCloudInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmAttachISO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmAttachISORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmAttachISO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmAttachISO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmAttachISO(ctx, req.(*VmAttachISORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmDetachISO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmDetachISORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmDetachISO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmDetachISO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmDetachISO(ctx, req.(*VmDetachISORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmAttachNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmAttachNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmAttachNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmAttachNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmAttachNetworkInterface(ctx, req.(*VmAttachNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmDetachNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmDetachNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmDetachNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmDetachNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmDetachNetworkInterface(ctx, req.(*VmDetachNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).Stream(&grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamServer = grpc.BidiStreamingServer[StreamRequest, StreamResponse]

func _AgentService_VmSnapshotRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmSnapshotRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmSnapshotRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmSnapshotRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmSnapshotRestore(ctx, req.(*VmSnapshotRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmSnapshotCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmSnapshotCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmSnapshotCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmSnapshotCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmSnapshotCreate(ctx, req.(*VmSnapshotCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmSnapshotDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmSnapshotDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmSnapshotDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmSnapshotDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmSnapshotDelete(ctx, req.(*VmSnapshotDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VmSnapshotClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmSnapshotCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).VmSnapshotClone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_VmSnapshotClone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).VmSnapshotClone(ctx, req.(*VmSnapshotCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.cloud.agent.v1.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VmGetDefinition",
			Handler:    _AgentService_VmGetDefinition_Handler,
		},
		{
			MethodName: "VmStart",
			Handler:    _AgentService_VmStart_Handler,
		},
		{
			MethodName: "VmKill",
			Handler:    _AgentService_VmKill_Handler,
		},
		{
			MethodName: "VmShutdown",
			Handler:    _AgentService_VmShutdown_Handler,
		},
		{
			MethodName: "VmReset",
			Handler:    _AgentService_VmReset_Handler,
		},
		{
			MethodName: "VmReboot",
			Handler:    _AgentService_VmReboot_Handler,
		},
		{
			MethodName: "VmSuspend",
			Handler:    _AgentService_VmSuspend_Handler,
		},
		{
			MethodName: "VmResume",
			Handler:    _AgentService_VmResume_Handler,
		},
		{
			MethodName: "VmStatus",
			Handler:    _AgentService_VmStatus_Handler,
		},
		{
			MethodName: "VmMigrate",
			Handler:    _AgentService_VmMigrate_Handler,
		},
		{
			MethodName: "VmIpList",
			Handler:    _AgentService_VmIpList_Handler,
		},
		{
			MethodName: "VmChangeUserPassword",
			Handler:    _AgentService_VmChangeUserPassword_Handler,
		},
		{
			MethodName: "VmGuestInfo",
			Handler:    _AgentService_VmGuestInfo_Handler,
		},
		{
			MethodName: "VmBackupSystemVolume",
			Handler:    _AgentService_VmBackupSystemVolume_Handler,
		},
		{
			MethodName: "VmRestoreSystemVolume",
			Handler:    _AgentService_VmRestoreSystemVolume_Handler,
		},
		{
			MethodName: "VmAttachCloudInit",
			Handler:    _AgentService_VmAttachCloudInit_Handler,
		},
		{
			MethodName: "VmAttachISO",
			Handler:    _AgentService_VmAttachISO_Handler,
		},
		{
			MethodName: "VmDetachISO",
			Handler:    _AgentService_VmDetachISO_Handler,
		},
		{
			MethodName: "VmAttachNetworkInterface",
			Handler:    _AgentService_VmAttachNetworkInterface_Handler,
		},
		{
			MethodName: "VmDetachNetworkInterface",
			Handler:    _AgentService_VmDetachNetworkInterface_Handler,
		},
		{
			MethodName: "VmSnapshotRestore",
			Handler:    _AgentService_VmSnapshotRestore_Handler,
		},
		{
			MethodName: "VmSnapshotCreate",
			Handler:    _AgentService_VmSnapshotCreate_Handler,
		},
		{
			MethodName: "VmSnapshotDelete",
			Handler:    _AgentService_VmSnapshotDelete_Handler,
		},
		{
			MethodName: "VmSnapshotClone",
			Handler:    _AgentService_VmSnapshotClone_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _AgentService_UpdateConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _AgentService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pilab/cloud/agent/v1/agentservice.proto",
}
