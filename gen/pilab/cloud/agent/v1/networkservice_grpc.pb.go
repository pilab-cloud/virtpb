// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/agent/v1/networkservice.proto

package agentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkService_OvsBridgeCreate_FullMethodName  = "/pilab.cloud.agent.v1.NetworkService/OvsBridgeCreate"
	NetworkService_OvsBridgeDelete_FullMethodName  = "/pilab.cloud.agent.v1.NetworkService/OvsBridgeDelete"
	NetworkService_OvsBridgeList_FullMethodName    = "/pilab.cloud.agent.v1.NetworkService/OvsBridgeList"
	NetworkService_OvsBridgeGet_FullMethodName     = "/pilab.cloud.agent.v1.NetworkService/OvsBridgeGet"
	NetworkService_OvsPortCreate_FullMethodName    = "/pilab.cloud.agent.v1.NetworkService/OvsPortCreate"
	NetworkService_OvsPortDelete_FullMethodName    = "/pilab.cloud.agent.v1.NetworkService/OvsPortDelete"
	NetworkService_OvsPortList_FullMethodName      = "/pilab.cloud.agent.v1.NetworkService/OvsPortList"
	NetworkService_OvsPortGet_FullMethodName       = "/pilab.cloud.agent.v1.NetworkService/OvsPortGet"
	NetworkService_OvsPortUpdate_FullMethodName    = "/pilab.cloud.agent.v1.NetworkService/OvsPortUpdate"
	NetworkService_OvsQosRuleCreate_FullMethodName = "/pilab.cloud.agent.v1.NetworkService/OvsQosRuleCreate"
	NetworkService_OvsQosRuleDelete_FullMethodName = "/pilab.cloud.agent.v1.NetworkService/OvsQosRuleDelete"
	NetworkService_OvsQosRuleList_FullMethodName   = "/pilab.cloud.agent.v1.NetworkService/OvsQosRuleList"
	NetworkService_OvsQosRuleGet_FullMethodName    = "/pilab.cloud.agent.v1.NetworkService/OvsQosRuleGet"
	NetworkService_NetworkCreate_FullMethodName    = "/pilab.cloud.agent.v1.NetworkService/NetworkCreate"
	NetworkService_NetworkDelete_FullMethodName    = "/pilab.cloud.agent.v1.NetworkService/NetworkDelete"
	NetworkService_NetworkList_FullMethodName      = "/pilab.cloud.agent.v1.NetworkService/NetworkList"
	NetworkService_NetworkGet_FullMethodName       = "/pilab.cloud.agent.v1.NetworkService/NetworkGet"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	// OVS Bridge Management
	OvsBridgeCreate(ctx context.Context, in *OvsBridgeCreateRequest, opts ...grpc.CallOption) (*OvsBridgeCreateResponse, error)
	OvsBridgeDelete(ctx context.Context, in *OvsBridgeDeleteRequest, opts ...grpc.CallOption) (*OvsBridgeDeleteResponse, error)
	OvsBridgeList(ctx context.Context, in *OvsBridgeListRequest, opts ...grpc.CallOption) (*OvsBridgeListResponse, error)
	OvsBridgeGet(ctx context.Context, in *OvsBridgeGetRequest, opts ...grpc.CallOption) (*OvsBridgeGetResponse, error)
	// OVS Port Management
	OvsPortCreate(ctx context.Context, in *OvsPortCreateRequest, opts ...grpc.CallOption) (*OvsPortCreateResponse, error)
	OvsPortDelete(ctx context.Context, in *OvsPortDeleteRequest, opts ...grpc.CallOption) (*OvsPortDeleteResponse, error)
	OvsPortList(ctx context.Context, in *OvsPortListRequest, opts ...grpc.CallOption) (*OvsPortListResponse, error)
	OvsPortGet(ctx context.Context, in *OvsPortGetRequest, opts ...grpc.CallOption) (*OvsPortGetResponse, error)
	OvsPortUpdate(ctx context.Context, in *OvsPortUpdateRequest, opts ...grpc.CallOption) (*OvsPortUpdateResponse, error)
	// OVS QoS Management
	OvsQosRuleCreate(ctx context.Context, in *OvsQosRuleCreateRequest, opts ...grpc.CallOption) (*OvsQosRuleCreateResponse, error)
	OvsQosRuleDelete(ctx context.Context, in *OvsQosRuleDeleteRequest, opts ...grpc.CallOption) (*OvsQosRuleDeleteResponse, error)
	OvsQosRuleList(ctx context.Context, in *OvsQosRuleListRequest, opts ...grpc.CallOption) (*OvsQosRuleListResponse, error)
	OvsQosRuleGet(ctx context.Context, in *OvsQosRuleGetRequest, opts ...grpc.CallOption) (*OvsQosRuleGetResponse, error)
	// Libvirt Network Management
	NetworkCreate(ctx context.Context, in *NetworkCreateRequest, opts ...grpc.CallOption) (*NetworkCreateResponse, error)
	NetworkDelete(ctx context.Context, in *NetworkDeleteRequest, opts ...grpc.CallOption) (*NetworkDeleteResponse, error)
	NetworkList(ctx context.Context, in *NetworkListRequest, opts ...grpc.CallOption) (*NetworkListResponse, error)
	NetworkGet(ctx context.Context, in *NetworkGetRequest, opts ...grpc.CallOption) (*NetworkGetResponse, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) OvsBridgeCreate(ctx context.Context, in *OvsBridgeCreateRequest, opts ...grpc.CallOption) (*OvsBridgeCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsBridgeCreateResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsBridgeCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsBridgeDelete(ctx context.Context, in *OvsBridgeDeleteRequest, opts ...grpc.CallOption) (*OvsBridgeDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsBridgeDeleteResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsBridgeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsBridgeList(ctx context.Context, in *OvsBridgeListRequest, opts ...grpc.CallOption) (*OvsBridgeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsBridgeListResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsBridgeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsBridgeGet(ctx context.Context, in *OvsBridgeGetRequest, opts ...grpc.CallOption) (*OvsBridgeGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsBridgeGetResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsBridgeGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsPortCreate(ctx context.Context, in *OvsPortCreateRequest, opts ...grpc.CallOption) (*OvsPortCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsPortCreateResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsPortCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsPortDelete(ctx context.Context, in *OvsPortDeleteRequest, opts ...grpc.CallOption) (*OvsPortDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsPortDeleteResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsPortDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsPortList(ctx context.Context, in *OvsPortListRequest, opts ...grpc.CallOption) (*OvsPortListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsPortListResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsPortList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsPortGet(ctx context.Context, in *OvsPortGetRequest, opts ...grpc.CallOption) (*OvsPortGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsPortGetResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsPortGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsPortUpdate(ctx context.Context, in *OvsPortUpdateRequest, opts ...grpc.CallOption) (*OvsPortUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsPortUpdateResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsPortUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsQosRuleCreate(ctx context.Context, in *OvsQosRuleCreateRequest, opts ...grpc.CallOption) (*OvsQosRuleCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsQosRuleCreateResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsQosRuleCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsQosRuleDelete(ctx context.Context, in *OvsQosRuleDeleteRequest, opts ...grpc.CallOption) (*OvsQosRuleDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsQosRuleDeleteResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsQosRuleDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsQosRuleList(ctx context.Context, in *OvsQosRuleListRequest, opts ...grpc.CallOption) (*OvsQosRuleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsQosRuleListResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsQosRuleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OvsQosRuleGet(ctx context.Context, in *OvsQosRuleGetRequest, opts ...grpc.CallOption) (*OvsQosRuleGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OvsQosRuleGetResponse)
	err := c.cc.Invoke(ctx, NetworkService_OvsQosRuleGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) NetworkCreate(ctx context.Context, in *NetworkCreateRequest, opts ...grpc.CallOption) (*NetworkCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkCreateResponse)
	err := c.cc.Invoke(ctx, NetworkService_NetworkCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) NetworkDelete(ctx context.Context, in *NetworkDeleteRequest, opts ...grpc.CallOption) (*NetworkDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkDeleteResponse)
	err := c.cc.Invoke(ctx, NetworkService_NetworkDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) NetworkList(ctx context.Context, in *NetworkListRequest, opts ...grpc.CallOption) (*NetworkListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkListResponse)
	err := c.cc.Invoke(ctx, NetworkService_NetworkList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) NetworkGet(ctx context.Context, in *NetworkGetRequest, opts ...grpc.CallOption) (*NetworkGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkGetResponse)
	err := c.cc.Invoke(ctx, NetworkService_NetworkGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility.
type NetworkServiceServer interface {
	// OVS Bridge Management
	OvsBridgeCreate(context.Context, *OvsBridgeCreateRequest) (*OvsBridgeCreateResponse, error)
	OvsBridgeDelete(context.Context, *OvsBridgeDeleteRequest) (*OvsBridgeDeleteResponse, error)
	OvsBridgeList(context.Context, *OvsBridgeListRequest) (*OvsBridgeListResponse, error)
	OvsBridgeGet(context.Context, *OvsBridgeGetRequest) (*OvsBridgeGetResponse, error)
	// OVS Port Management
	OvsPortCreate(context.Context, *OvsPortCreateRequest) (*OvsPortCreateResponse, error)
	OvsPortDelete(context.Context, *OvsPortDeleteRequest) (*OvsPortDeleteResponse, error)
	OvsPortList(context.Context, *OvsPortListRequest) (*OvsPortListResponse, error)
	OvsPortGet(context.Context, *OvsPortGetRequest) (*OvsPortGetResponse, error)
	OvsPortUpdate(context.Context, *OvsPortUpdateRequest) (*OvsPortUpdateResponse, error)
	// OVS QoS Management
	OvsQosRuleCreate(context.Context, *OvsQosRuleCreateRequest) (*OvsQosRuleCreateResponse, error)
	OvsQosRuleDelete(context.Context, *OvsQosRuleDeleteRequest) (*OvsQosRuleDeleteResponse, error)
	OvsQosRuleList(context.Context, *OvsQosRuleListRequest) (*OvsQosRuleListResponse, error)
	OvsQosRuleGet(context.Context, *OvsQosRuleGetRequest) (*OvsQosRuleGetResponse, error)
	// Libvirt Network Management
	NetworkCreate(context.Context, *NetworkCreateRequest) (*NetworkCreateResponse, error)
	NetworkDelete(context.Context, *NetworkDeleteRequest) (*NetworkDeleteResponse, error)
	NetworkList(context.Context, *NetworkListRequest) (*NetworkListResponse, error)
	NetworkGet(context.Context, *NetworkGetRequest) (*NetworkGetResponse, error)
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkServiceServer struct{}

func (UnimplementedNetworkServiceServer) OvsBridgeCreate(context.Context, *OvsBridgeCreateRequest) (*OvsBridgeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsBridgeCreate not implemented")
}
func (UnimplementedNetworkServiceServer) OvsBridgeDelete(context.Context, *OvsBridgeDeleteRequest) (*OvsBridgeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsBridgeDelete not implemented")
}
func (UnimplementedNetworkServiceServer) OvsBridgeList(context.Context, *OvsBridgeListRequest) (*OvsBridgeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsBridgeList not implemented")
}
func (UnimplementedNetworkServiceServer) OvsBridgeGet(context.Context, *OvsBridgeGetRequest) (*OvsBridgeGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsBridgeGet not implemented")
}
func (UnimplementedNetworkServiceServer) OvsPortCreate(context.Context, *OvsPortCreateRequest) (*OvsPortCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsPortCreate not implemented")
}
func (UnimplementedNetworkServiceServer) OvsPortDelete(context.Context, *OvsPortDeleteRequest) (*OvsPortDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsPortDelete not implemented")
}
func (UnimplementedNetworkServiceServer) OvsPortList(context.Context, *OvsPortListRequest) (*OvsPortListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsPortList not implemented")
}
func (UnimplementedNetworkServiceServer) OvsPortGet(context.Context, *OvsPortGetRequest) (*OvsPortGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsPortGet not implemented")
}
func (UnimplementedNetworkServiceServer) OvsPortUpdate(context.Context, *OvsPortUpdateRequest) (*OvsPortUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsPortUpdate not implemented")
}
func (UnimplementedNetworkServiceServer) OvsQosRuleCreate(context.Context, *OvsQosRuleCreateRequest) (*OvsQosRuleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsQosRuleCreate not implemented")
}
func (UnimplementedNetworkServiceServer) OvsQosRuleDelete(context.Context, *OvsQosRuleDeleteRequest) (*OvsQosRuleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsQosRuleDelete not implemented")
}
func (UnimplementedNetworkServiceServer) OvsQosRuleList(context.Context, *OvsQosRuleListRequest) (*OvsQosRuleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsQosRuleList not implemented")
}
func (UnimplementedNetworkServiceServer) OvsQosRuleGet(context.Context, *OvsQosRuleGetRequest) (*OvsQosRuleGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvsQosRuleGet not implemented")
}
func (UnimplementedNetworkServiceServer) NetworkCreate(context.Context, *NetworkCreateRequest) (*NetworkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkCreate not implemented")
}
func (UnimplementedNetworkServiceServer) NetworkDelete(context.Context, *NetworkDeleteRequest) (*NetworkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkDelete not implemented")
}
func (UnimplementedNetworkServiceServer) NetworkList(context.Context, *NetworkListRequest) (*NetworkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkList not implemented")
}
func (UnimplementedNetworkServiceServer) NetworkGet(context.Context, *NetworkGetRequest) (*NetworkGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkGet not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}
func (UnimplementedNetworkServiceServer) testEmbeddedByValue()                        {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	// If the following call pancis, it indicates UnimplementedNetworkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_OvsBridgeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsBridgeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsBridgeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsBridgeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsBridgeCreate(ctx, req.(*OvsBridgeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsBridgeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsBridgeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsBridgeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsBridgeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsBridgeDelete(ctx, req.(*OvsBridgeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsBridgeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsBridgeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsBridgeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsBridgeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsBridgeList(ctx, req.(*OvsBridgeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsBridgeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsBridgeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsBridgeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsBridgeGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsBridgeGet(ctx, req.(*OvsBridgeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsPortCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsPortCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsPortCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsPortCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsPortCreate(ctx, req.(*OvsPortCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsPortDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsPortDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsPortDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsPortDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsPortDelete(ctx, req.(*OvsPortDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsPortList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsPortListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsPortList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsPortList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsPortList(ctx, req.(*OvsPortListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsPortGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsPortGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsPortGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsPortGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsPortGet(ctx, req.(*OvsPortGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsPortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsPortUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsPortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsPortUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsPortUpdate(ctx, req.(*OvsPortUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsQosRuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsQosRuleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsQosRuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsQosRuleCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsQosRuleCreate(ctx, req.(*OvsQosRuleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsQosRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsQosRuleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsQosRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsQosRuleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsQosRuleDelete(ctx, req.(*OvsQosRuleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsQosRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsQosRuleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsQosRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsQosRuleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsQosRuleList(ctx, req.(*OvsQosRuleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OvsQosRuleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvsQosRuleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OvsQosRuleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OvsQosRuleGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OvsQosRuleGet(ctx, req.(*OvsQosRuleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_NetworkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).NetworkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_NetworkCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).NetworkCreate(ctx, req.(*NetworkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_NetworkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).NetworkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_NetworkDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).NetworkDelete(ctx, req.(*NetworkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_NetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).NetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_NetworkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).NetworkList(ctx, req.(*NetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_NetworkGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).NetworkGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_NetworkGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).NetworkGet(ctx, req.(*NetworkGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.cloud.agent.v1.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OvsBridgeCreate",
			Handler:    _NetworkService_OvsBridgeCreate_Handler,
		},
		{
			MethodName: "OvsBridgeDelete",
			Handler:    _NetworkService_OvsBridgeDelete_Handler,
		},
		{
			MethodName: "OvsBridgeList",
			Handler:    _NetworkService_OvsBridgeList_Handler,
		},
		{
			MethodName: "OvsBridgeGet",
			Handler:    _NetworkService_OvsBridgeGet_Handler,
		},
		{
			MethodName: "OvsPortCreate",
			Handler:    _NetworkService_OvsPortCreate_Handler,
		},
		{
			MethodName: "OvsPortDelete",
			Handler:    _NetworkService_OvsPortDelete_Handler,
		},
		{
			MethodName: "OvsPortList",
			Handler:    _NetworkService_OvsPortList_Handler,
		},
		{
			MethodName: "OvsPortGet",
			Handler:    _NetworkService_OvsPortGet_Handler,
		},
		{
			MethodName: "OvsPortUpdate",
			Handler:    _NetworkService_OvsPortUpdate_Handler,
		},
		{
			MethodName: "OvsQosRuleCreate",
			Handler:    _NetworkService_OvsQosRuleCreate_Handler,
		},
		{
			MethodName: "OvsQosRuleDelete",
			Handler:    _NetworkService_OvsQosRuleDelete_Handler,
		},
		{
			MethodName: "OvsQosRuleList",
			Handler:    _NetworkService_OvsQosRuleList_Handler,
		},
		{
			MethodName: "OvsQosRuleGet",
			Handler:    _NetworkService_OvsQosRuleGet_Handler,
		},
		{
			MethodName: "NetworkCreate",
			Handler:    _NetworkService_NetworkCreate_Handler,
		},
		{
			MethodName: "NetworkDelete",
			Handler:    _NetworkService_NetworkDelete_Handler,
		},
		{
			MethodName: "NetworkList",
			Handler:    _NetworkService_NetworkList_Handler,
		},
		{
			MethodName: "NetworkGet",
			Handler:    _NetworkService_NetworkGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pilab/cloud/agent/v1/networkservice.proto",
}
