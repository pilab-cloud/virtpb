// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/agent/v1/agent_director.proto

package agentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentDirectorService_ReportHeartbeat_FullMethodName               = "/agent_director.AgentDirectorService/ReportHeartbeat"
	AgentDirectorService_ReportHypervisorStatus_FullMethodName        = "/agent_director.AgentDirectorService/ReportHypervisorStatus"
	AgentDirectorService_ReportVMStatus_FullMethodName                = "/agent_director.AgentDirectorService/ReportVMStatus"
	AgentDirectorService_ReportDiskStatus_FullMethodName              = "/agent_director.AgentDirectorService/ReportDiskStatus"
	AgentDirectorService_ReportNetworkInterfaceStatus_FullMethodName  = "/agent_director.AgentDirectorService/ReportNetworkInterfaceStatus"
	AgentDirectorService_ReportHardwareStatus_FullMethodName          = "/agent_director.AgentDirectorService/ReportHardwareStatus"
	AgentDirectorService_ReportVMMetrics_FullMethodName               = "/agent_director.AgentDirectorService/ReportVMMetrics"
	AgentDirectorService_ReportHypervisorResourceUsage_FullMethodName = "/agent_director.AgentDirectorService/ReportHypervisorResourceUsage"
	AgentDirectorService_ReportEvent_FullMethodName                   = "/agent_director.AgentDirectorService/ReportEvent"
	AgentDirectorService_StreamLogs_FullMethodName                    = "/agent_director.AgentDirectorService/StreamLogs"
	AgentDirectorService_ReportTaskProgress_FullMethodName            = "/agent_director.AgentDirectorService/ReportTaskProgress"
	AgentDirectorService_ReportWorkflowState_FullMethodName           = "/agent_director.AgentDirectorService/ReportWorkflowState"
	AgentDirectorService_ReportAgentUpdateStatus_FullMethodName       = "/agent_director.AgentDirectorService/ReportAgentUpdateStatus"
	AgentDirectorService_AcknowledgeAgentConfiguration_FullMethodName = "/agent_director.AgentDirectorService/AcknowledgeAgentConfiguration"
)

// AgentDirectorServiceClient is the client API for AgentDirectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for communication between the Agent and the Director
type AgentDirectorServiceClient interface {
	// --- Status and Health Reporting ---
	ReportHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	ReportHypervisorStatus(ctx context.Context, in *HypervisorStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReportVMStatus(ctx context.Context, in *VMStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReportDiskStatus(ctx context.Context, in *DiskStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReportNetworkInterfaceStatus(ctx context.Context, in *NetworkInterfaceStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReportHardwareStatus(ctx context.Context, in *HardwareStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- Metrics Collection ---
	ReportVMMetrics(ctx context.Context, in *VMMetrics, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReportHypervisorResourceUsage(ctx context.Context, in *HypervisorResourceUsage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- Event and Log Forwarding ---
	ReportEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogRequest, LogResponse], error)
	// --- Task and Workflow Management ---
	ReportTaskProgress(ctx context.Context, in *TaskProgress, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReportWorkflowState(ctx context.Context, in *WorkflowState, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- Agent Self-Management ---
	ReportAgentUpdateStatus(ctx context.Context, in *AgentUpdateStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcknowledgeAgentConfiguration(ctx context.Context, in *AgentConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type agentDirectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentDirectorServiceClient(cc grpc.ClientConnInterface) AgentDirectorServiceClient {
	return &agentDirectorServiceClient{cc}
}

func (c *agentDirectorServiceClient) ReportHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportHypervisorStatus(ctx context.Context, in *HypervisorStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportHypervisorStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportVMStatus(ctx context.Context, in *VMStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportVMStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportDiskStatus(ctx context.Context, in *DiskStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportDiskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportNetworkInterfaceStatus(ctx context.Context, in *NetworkInterfaceStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportNetworkInterfaceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportHardwareStatus(ctx context.Context, in *HardwareStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportHardwareStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportVMMetrics(ctx context.Context, in *VMMetrics, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportVMMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportHypervisorResourceUsage(ctx context.Context, in *HypervisorResourceUsage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportHypervisorResourceUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogRequest, LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentDirectorService_ServiceDesc.Streams[0], AgentDirectorService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogRequest, LogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentDirectorService_StreamLogsClient = grpc.BidiStreamingClient[LogRequest, LogResponse]

func (c *agentDirectorServiceClient) ReportTaskProgress(ctx context.Context, in *TaskProgress, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportTaskProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportWorkflowState(ctx context.Context, in *WorkflowState, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportWorkflowState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) ReportAgentUpdateStatus(ctx context.Context, in *AgentUpdateStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_ReportAgentUpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDirectorServiceClient) AcknowledgeAgentConfiguration(ctx context.Context, in *AgentConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentDirectorService_AcknowledgeAgentConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentDirectorServiceServer is the server API for AgentDirectorService service.
// All implementations must embed UnimplementedAgentDirectorServiceServer
// for forward compatibility.
//
// Service for communication between the Agent and the Director
type AgentDirectorServiceServer interface {
	// --- Status and Health Reporting ---
	ReportHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	ReportHypervisorStatus(context.Context, *HypervisorStatus) (*emptypb.Empty, error)
	ReportVMStatus(context.Context, *VMStatusUpdate) (*emptypb.Empty, error)
	ReportDiskStatus(context.Context, *DiskStatusUpdate) (*emptypb.Empty, error)
	ReportNetworkInterfaceStatus(context.Context, *NetworkInterfaceStatusUpdate) (*emptypb.Empty, error)
	ReportHardwareStatus(context.Context, *HardwareStatusUpdate) (*emptypb.Empty, error)
	// --- Metrics Collection ---
	ReportVMMetrics(context.Context, *VMMetrics) (*emptypb.Empty, error)
	ReportHypervisorResourceUsage(context.Context, *HypervisorResourceUsage) (*emptypb.Empty, error)
	// --- Event and Log Forwarding ---
	ReportEvent(context.Context, *Event) (*emptypb.Empty, error)
	StreamLogs(grpc.BidiStreamingServer[LogRequest, LogResponse]) error
	// --- Task and Workflow Management ---
	ReportTaskProgress(context.Context, *TaskProgress) (*emptypb.Empty, error)
	ReportWorkflowState(context.Context, *WorkflowState) (*emptypb.Empty, error)
	// --- Agent Self-Management ---
	ReportAgentUpdateStatus(context.Context, *AgentUpdateStatus) (*emptypb.Empty, error)
	AcknowledgeAgentConfiguration(context.Context, *AgentConfiguration) (*emptypb.Empty, error)
	mustEmbedUnimplementedAgentDirectorServiceServer()
}

// UnimplementedAgentDirectorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentDirectorServiceServer struct{}

func (UnimplementedAgentDirectorServiceServer) ReportHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHeartbeat not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportHypervisorStatus(context.Context, *HypervisorStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHypervisorStatus not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportVMStatus(context.Context, *VMStatusUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportVMStatus not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportDiskStatus(context.Context, *DiskStatusUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDiskStatus not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportNetworkInterfaceStatus(context.Context, *NetworkInterfaceStatusUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNetworkInterfaceStatus not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportHardwareStatus(context.Context, *HardwareStatusUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHardwareStatus not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportVMMetrics(context.Context, *VMMetrics) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportVMMetrics not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportHypervisorResourceUsage(context.Context, *HypervisorResourceUsage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHypervisorResourceUsage not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportEvent(context.Context, *Event) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEvent not implemented")
}
func (UnimplementedAgentDirectorServiceServer) StreamLogs(grpc.BidiStreamingServer[LogRequest, LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportTaskProgress(context.Context, *TaskProgress) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskProgress not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportWorkflowState(context.Context, *WorkflowState) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWorkflowState not implemented")
}
func (UnimplementedAgentDirectorServiceServer) ReportAgentUpdateStatus(context.Context, *AgentUpdateStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAgentUpdateStatus not implemented")
}
func (UnimplementedAgentDirectorServiceServer) AcknowledgeAgentConfiguration(context.Context, *AgentConfiguration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeAgentConfiguration not implemented")
}
func (UnimplementedAgentDirectorServiceServer) mustEmbedUnimplementedAgentDirectorServiceServer() {}
func (UnimplementedAgentDirectorServiceServer) testEmbeddedByValue()                              {}

// UnsafeAgentDirectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentDirectorServiceServer will
// result in compilation errors.
type UnsafeAgentDirectorServiceServer interface {
	mustEmbedUnimplementedAgentDirectorServiceServer()
}

func RegisterAgentDirectorServiceServer(s grpc.ServiceRegistrar, srv AgentDirectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentDirectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentDirectorService_ServiceDesc, srv)
}

func _AgentDirectorService_ReportHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportHypervisorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HypervisorStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportHypervisorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportHypervisorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportHypervisorStatus(ctx, req.(*HypervisorStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportVMStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportVMStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportVMStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportVMStatus(ctx, req.(*VMStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportDiskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportDiskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportDiskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportDiskStatus(ctx, req.(*DiskStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportNetworkInterfaceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInterfaceStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportNetworkInterfaceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportNetworkInterfaceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportNetworkInterfaceStatus(ctx, req.(*NetworkInterfaceStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportHardwareStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportHardwareStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportHardwareStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportHardwareStatus(ctx, req.(*HardwareStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportVMMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportVMMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportVMMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportVMMetrics(ctx, req.(*VMMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportHypervisorResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HypervisorResourceUsage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportHypervisorResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportHypervisorResourceUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportHypervisorResourceUsage(ctx, req.(*HypervisorResourceUsage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentDirectorServiceServer).StreamLogs(&grpc.GenericServerStream[LogRequest, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentDirectorService_StreamLogsServer = grpc.BidiStreamingServer[LogRequest, LogResponse]

func _AgentDirectorService_ReportTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportTaskProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportTaskProgress(ctx, req.(*TaskProgress))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportWorkflowState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportWorkflowState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportWorkflowState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportWorkflowState(ctx, req.(*WorkflowState))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_ReportAgentUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUpdateStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).ReportAgentUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_ReportAgentUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).ReportAgentUpdateStatus(ctx, req.(*AgentUpdateStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDirectorService_AcknowledgeAgentConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDirectorServiceServer).AcknowledgeAgentConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDirectorService_AcknowledgeAgentConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDirectorServiceServer).AcknowledgeAgentConfiguration(ctx, req.(*AgentConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentDirectorService_ServiceDesc is the grpc.ServiceDesc for AgentDirectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentDirectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_director.AgentDirectorService",
	HandlerType: (*AgentDirectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportHeartbeat",
			Handler:    _AgentDirectorService_ReportHeartbeat_Handler,
		},
		{
			MethodName: "ReportHypervisorStatus",
			Handler:    _AgentDirectorService_ReportHypervisorStatus_Handler,
		},
		{
			MethodName: "ReportVMStatus",
			Handler:    _AgentDirectorService_ReportVMStatus_Handler,
		},
		{
			MethodName: "ReportDiskStatus",
			Handler:    _AgentDirectorService_ReportDiskStatus_Handler,
		},
		{
			MethodName: "ReportNetworkInterfaceStatus",
			Handler:    _AgentDirectorService_ReportNetworkInterfaceStatus_Handler,
		},
		{
			MethodName: "ReportHardwareStatus",
			Handler:    _AgentDirectorService_ReportHardwareStatus_Handler,
		},
		{
			MethodName: "ReportVMMetrics",
			Handler:    _AgentDirectorService_ReportVMMetrics_Handler,
		},
		{
			MethodName: "ReportHypervisorResourceUsage",
			Handler:    _AgentDirectorService_ReportHypervisorResourceUsage_Handler,
		},
		{
			MethodName: "ReportEvent",
			Handler:    _AgentDirectorService_ReportEvent_Handler,
		},
		{
			MethodName: "ReportTaskProgress",
			Handler:    _AgentDirectorService_ReportTaskProgress_Handler,
		},
		{
			MethodName: "ReportWorkflowState",
			Handler:    _AgentDirectorService_ReportWorkflowState_Handler,
		},
		{
			MethodName: "ReportAgentUpdateStatus",
			Handler:    _AgentDirectorService_ReportAgentUpdateStatus_Handler,
		},
		{
			MethodName: "AcknowledgeAgentConfiguration",
			Handler:    _AgentDirectorService_AcknowledgeAgentConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _AgentDirectorService_StreamLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pilab/cloud/agent/v1/agent_director.proto",
}
