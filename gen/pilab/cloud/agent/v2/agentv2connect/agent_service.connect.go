// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/agent/v2/agent_service.proto

package agentv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/agent/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "pilab.cloud.agent.v2.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceRegisterHostProcedure is the fully-qualified name of the AgentService's RegisterHost
	// RPC.
	AgentServiceRegisterHostProcedure = "/pilab.cloud.agent.v2.AgentService/RegisterHost"
	// AgentServiceHeartbeatProcedure is the fully-qualified name of the AgentService's Heartbeat RPC.
	AgentServiceHeartbeatProcedure = "/pilab.cloud.agent.v2.AgentService/Heartbeat"
	// AgentServiceGetHostStatusProcedure is the fully-qualified name of the AgentService's
	// GetHostStatus RPC.
	AgentServiceGetHostStatusProcedure = "/pilab.cloud.agent.v2.AgentService/GetHostStatus"
	// AgentServiceCreateVMProcedure is the fully-qualified name of the AgentService's CreateVM RPC.
	AgentServiceCreateVMProcedure = "/pilab.cloud.agent.v2.AgentService/CreateVM"
	// AgentServiceGetVMDetailsProcedure is the fully-qualified name of the AgentService's GetVMDetails
	// RPC.
	AgentServiceGetVMDetailsProcedure = "/pilab.cloud.agent.v2.AgentService/GetVMDetails"
	// AgentServiceUpdateVMProcedure is the fully-qualified name of the AgentService's UpdateVM RPC.
	AgentServiceUpdateVMProcedure = "/pilab.cloud.agent.v2.AgentService/UpdateVM"
	// AgentServiceDeleteVMProcedure is the fully-qualified name of the AgentService's DeleteVM RPC.
	AgentServiceDeleteVMProcedure = "/pilab.cloud.agent.v2.AgentService/DeleteVM"
	// AgentServiceStartVMProcedure is the fully-qualified name of the AgentService's StartVM RPC.
	AgentServiceStartVMProcedure = "/pilab.cloud.agent.v2.AgentService/StartVM"
	// AgentServiceStopVMProcedure is the fully-qualified name of the AgentService's StopVM RPC.
	AgentServiceStopVMProcedure = "/pilab.cloud.agent.v2.AgentService/StopVM"
	// AgentServiceForceStopVMProcedure is the fully-qualified name of the AgentService's ForceStopVM
	// RPC.
	AgentServiceForceStopVMProcedure = "/pilab.cloud.agent.v2.AgentService/ForceStopVM"
	// AgentServiceRebootVMProcedure is the fully-qualified name of the AgentService's RebootVM RPC.
	AgentServiceRebootVMProcedure = "/pilab.cloud.agent.v2.AgentService/RebootVM"
	// AgentServicePauseVMProcedure is the fully-qualified name of the AgentService's PauseVM RPC.
	AgentServicePauseVMProcedure = "/pilab.cloud.agent.v2.AgentService/PauseVM"
	// AgentServiceResumeVMProcedure is the fully-qualified name of the AgentService's ResumeVM RPC.
	AgentServiceResumeVMProcedure = "/pilab.cloud.agent.v2.AgentService/ResumeVM"
	// AgentServiceInitiateMigrationProcedure is the fully-qualified name of the AgentService's
	// InitiateMigration RPC.
	AgentServiceInitiateMigrationProcedure = "/pilab.cloud.agent.v2.AgentService/InitiateMigration"
	// AgentServicePrepareForMigrationProcedure is the fully-qualified name of the AgentService's
	// PrepareForMigration RPC.
	AgentServicePrepareForMigrationProcedure = "/pilab.cloud.agent.v2.AgentService/PrepareForMigration"
	// AgentServiceCreateSnapshotProcedure is the fully-qualified name of the AgentService's
	// CreateSnapshot RPC.
	AgentServiceCreateSnapshotProcedure = "/pilab.cloud.agent.v2.AgentService/CreateSnapshot"
	// AgentServiceRevertToSnapshotProcedure is the fully-qualified name of the AgentService's
	// RevertToSnapshot RPC.
	AgentServiceRevertToSnapshotProcedure = "/pilab.cloud.agent.v2.AgentService/RevertToSnapshot"
	// AgentServiceDeleteSnapshotProcedure is the fully-qualified name of the AgentService's
	// DeleteSnapshot RPC.
	AgentServiceDeleteSnapshotProcedure = "/pilab.cloud.agent.v2.AgentService/DeleteSnapshot"
	// AgentServiceGetTaskStatusProcedure is the fully-qualified name of the AgentService's
	// GetTaskStatus RPC.
	AgentServiceGetTaskStatusProcedure = "/pilab.cloud.agent.v2.AgentService/GetTaskStatus"
	// AgentServiceCancelTaskProcedure is the fully-qualified name of the AgentService's CancelTask RPC.
	AgentServiceCancelTaskProcedure = "/pilab.cloud.agent.v2.AgentService/CancelTask"
	// AgentServiceConfigureNetworkProcedure is the fully-qualified name of the AgentService's
	// ConfigureNetwork RPC.
	AgentServiceConfigureNetworkProcedure = "/pilab.cloud.agent.v2.AgentService/ConfigureNetwork"
	// AgentServiceConfigureStorageProcedure is the fully-qualified name of the AgentService's
	// ConfigureStorage RPC.
	AgentServiceConfigureStorageProcedure = "/pilab.cloud.agent.v2.AgentService/ConfigureStorage"
	// AgentServiceConfigureTimeProcedure is the fully-qualified name of the AgentService's
	// ConfigureTime RPC.
	AgentServiceConfigureTimeProcedure = "/pilab.cloud.agent.v2.AgentService/ConfigureTime"
	// AgentServiceSetMaintenanceModeProcedure is the fully-qualified name of the AgentService's
	// SetMaintenanceMode RPC.
	AgentServiceSetMaintenanceModeProcedure = "/pilab.cloud.agent.v2.AgentService/SetMaintenanceMode"
	// AgentServiceUpdateHostProcedure is the fully-qualified name of the AgentService's UpdateHost RPC.
	AgentServiceUpdateHostProcedure = "/pilab.cloud.agent.v2.AgentService/UpdateHost"
	// AgentServiceGetContentLibraryItemsProcedure is the fully-qualified name of the AgentService's
	// GetContentLibraryItems RPC.
	AgentServiceGetContentLibraryItemsProcedure = "/pilab.cloud.agent.v2.AgentService/GetContentLibraryItems"
	// AgentServiceUploadContentLibraryItemProcedure is the fully-qualified name of the AgentService's
	// UploadContentLibraryItem RPC.
	AgentServiceUploadContentLibraryItemProcedure = "/pilab.cloud.agent.v2.AgentService/UploadContentLibraryItem"
	// AgentServiceDeleteContentLibraryItemProcedure is the fully-qualified name of the AgentService's
	// DeleteContentLibraryItem RPC.
	AgentServiceDeleteContentLibraryItemProcedure = "/pilab.cloud.agent.v2.AgentService/DeleteContentLibraryItem"
	// AgentServiceGetDatastoresProcedure is the fully-qualified name of the AgentService's
	// GetDatastores RPC.
	AgentServiceGetDatastoresProcedure = "/pilab.cloud.agent.v2.AgentService/GetDatastores"
	// AgentServiceGetDatastoreProcedure is the fully-qualified name of the AgentService's GetDatastore
	// RPC.
	AgentServiceGetDatastoreProcedure = "/pilab.cloud.agent.v2.AgentService/GetDatastore"
	// AgentServiceCreateDatastoreProcedure is the fully-qualified name of the AgentService's
	// CreateDatastore RPC.
	AgentServiceCreateDatastoreProcedure = "/pilab.cloud.agent.v2.AgentService/CreateDatastore"
	// AgentServiceDeleteDatastoreProcedure is the fully-qualified name of the AgentService's
	// DeleteDatastore RPC.
	AgentServiceDeleteDatastoreProcedure = "/pilab.cloud.agent.v2.AgentService/DeleteDatastore"
	// AgentServiceGetNetworksProcedure is the fully-qualified name of the AgentService's GetNetworks
	// RPC.
	AgentServiceGetNetworksProcedure = "/pilab.cloud.agent.v2.AgentService/GetNetworks"
	// AgentServiceGetNetworkProcedure is the fully-qualified name of the AgentService's GetNetwork RPC.
	AgentServiceGetNetworkProcedure = "/pilab.cloud.agent.v2.AgentService/GetNetwork"
	// AgentServiceCreateNetworkProcedure is the fully-qualified name of the AgentService's
	// CreateNetwork RPC.
	AgentServiceCreateNetworkProcedure = "/pilab.cloud.agent.v2.AgentService/CreateNetwork"
	// AgentServiceDeleteNetworkProcedure is the fully-qualified name of the AgentService's
	// DeleteNetwork RPC.
	AgentServiceDeleteNetworkProcedure = "/pilab.cloud.agent.v2.AgentService/DeleteNetwork"
	// AgentServiceAttachIsoProcedure is the fully-qualified name of the AgentService's AttachIso RPC.
	AgentServiceAttachIsoProcedure = "/pilab.cloud.agent.v2.AgentService/AttachIso"
	// AgentServiceDetachIsoProcedure is the fully-qualified name of the AgentService's DetachIso RPC.
	AgentServiceDetachIsoProcedure = "/pilab.cloud.agent.v2.AgentService/DetachIso"
	// AgentServiceCloneVmFromTemplateProcedure is the fully-qualified name of the AgentService's
	// CloneVmFromTemplate RPC.
	AgentServiceCloneVmFromTemplateProcedure = "/pilab.cloud.agent.v2.AgentService/CloneVmFromTemplate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	agentServiceServiceDescriptor                        = v2.File_pilab_cloud_agent_v2_agent_service_proto.Services().ByName("AgentService")
	agentServiceRegisterHostMethodDescriptor             = agentServiceServiceDescriptor.Methods().ByName("RegisterHost")
	agentServiceHeartbeatMethodDescriptor                = agentServiceServiceDescriptor.Methods().ByName("Heartbeat")
	agentServiceGetHostStatusMethodDescriptor            = agentServiceServiceDescriptor.Methods().ByName("GetHostStatus")
	agentServiceCreateVMMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("CreateVM")
	agentServiceGetVMDetailsMethodDescriptor             = agentServiceServiceDescriptor.Methods().ByName("GetVMDetails")
	agentServiceUpdateVMMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("UpdateVM")
	agentServiceDeleteVMMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("DeleteVM")
	agentServiceStartVMMethodDescriptor                  = agentServiceServiceDescriptor.Methods().ByName("StartVM")
	agentServiceStopVMMethodDescriptor                   = agentServiceServiceDescriptor.Methods().ByName("StopVM")
	agentServiceForceStopVMMethodDescriptor              = agentServiceServiceDescriptor.Methods().ByName("ForceStopVM")
	agentServiceRebootVMMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("RebootVM")
	agentServicePauseVMMethodDescriptor                  = agentServiceServiceDescriptor.Methods().ByName("PauseVM")
	agentServiceResumeVMMethodDescriptor                 = agentServiceServiceDescriptor.Methods().ByName("ResumeVM")
	agentServiceInitiateMigrationMethodDescriptor        = agentServiceServiceDescriptor.Methods().ByName("InitiateMigration")
	agentServicePrepareForMigrationMethodDescriptor      = agentServiceServiceDescriptor.Methods().ByName("PrepareForMigration")
	agentServiceCreateSnapshotMethodDescriptor           = agentServiceServiceDescriptor.Methods().ByName("CreateSnapshot")
	agentServiceRevertToSnapshotMethodDescriptor         = agentServiceServiceDescriptor.Methods().ByName("RevertToSnapshot")
	agentServiceDeleteSnapshotMethodDescriptor           = agentServiceServiceDescriptor.Methods().ByName("DeleteSnapshot")
	agentServiceGetTaskStatusMethodDescriptor            = agentServiceServiceDescriptor.Methods().ByName("GetTaskStatus")
	agentServiceCancelTaskMethodDescriptor               = agentServiceServiceDescriptor.Methods().ByName("CancelTask")
	agentServiceConfigureNetworkMethodDescriptor         = agentServiceServiceDescriptor.Methods().ByName("ConfigureNetwork")
	agentServiceConfigureStorageMethodDescriptor         = agentServiceServiceDescriptor.Methods().ByName("ConfigureStorage")
	agentServiceConfigureTimeMethodDescriptor            = agentServiceServiceDescriptor.Methods().ByName("ConfigureTime")
	agentServiceSetMaintenanceModeMethodDescriptor       = agentServiceServiceDescriptor.Methods().ByName("SetMaintenanceMode")
	agentServiceUpdateHostMethodDescriptor               = agentServiceServiceDescriptor.Methods().ByName("UpdateHost")
	agentServiceGetContentLibraryItemsMethodDescriptor   = agentServiceServiceDescriptor.Methods().ByName("GetContentLibraryItems")
	agentServiceUploadContentLibraryItemMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("UploadContentLibraryItem")
	agentServiceDeleteContentLibraryItemMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("DeleteContentLibraryItem")
	agentServiceGetDatastoresMethodDescriptor            = agentServiceServiceDescriptor.Methods().ByName("GetDatastores")
	agentServiceGetDatastoreMethodDescriptor             = agentServiceServiceDescriptor.Methods().ByName("GetDatastore")
	agentServiceCreateDatastoreMethodDescriptor          = agentServiceServiceDescriptor.Methods().ByName("CreateDatastore")
	agentServiceDeleteDatastoreMethodDescriptor          = agentServiceServiceDescriptor.Methods().ByName("DeleteDatastore")
	agentServiceGetNetworksMethodDescriptor              = agentServiceServiceDescriptor.Methods().ByName("GetNetworks")
	agentServiceGetNetworkMethodDescriptor               = agentServiceServiceDescriptor.Methods().ByName("GetNetwork")
	agentServiceCreateNetworkMethodDescriptor            = agentServiceServiceDescriptor.Methods().ByName("CreateNetwork")
	agentServiceDeleteNetworkMethodDescriptor            = agentServiceServiceDescriptor.Methods().ByName("DeleteNetwork")
	agentServiceAttachIsoMethodDescriptor                = agentServiceServiceDescriptor.Methods().ByName("AttachIso")
	agentServiceDetachIsoMethodDescriptor                = agentServiceServiceDescriptor.Methods().ByName("DetachIso")
	agentServiceCloneVmFromTemplateMethodDescriptor      = agentServiceServiceDescriptor.Methods().ByName("CloneVmFromTemplate")
)

// AgentServiceClient is a client for the pilab.cloud.agent.v2.AgentService service.
type AgentServiceClient interface {
	// Host Management
	RegisterHost(context.Context, *connect.Request[v2.RegisterHostRequest]) (*connect.Response[v2.RegisterHostResponse], error)
	Heartbeat(context.Context, *connect.Request[v2.HeartbeatRequest]) (*connect.Response[v2.HeartbeatResponse], error)
	GetHostStatus(context.Context, *connect.Request[v2.GetHostStatusRequest]) (*connect.Response[v2.HostStatus], error)
	// VM Management
	CreateVM(context.Context, *connect.Request[v2.CreateVMRequest]) (*connect.Response[v2.CreateVMResponse], error)
	GetVMDetails(context.Context, *connect.Request[v2.GetVMDetailsRequest]) (*connect.Response[v2.GetVMDetailsResponse], error)
	UpdateVM(context.Context, *connect.Request[v2.UpdateVMRequest]) (*connect.Response[v2.UpdateVMResponse], error)
	DeleteVM(context.Context, *connect.Request[v2.DeleteVMRequest]) (*connect.Response[v2.DeleteVMResponse], error)
	StartVM(context.Context, *connect.Request[v2.StartVMRequest]) (*connect.Response[v2.StartVMResponse], error)
	StopVM(context.Context, *connect.Request[v2.StopVMRequest]) (*connect.Response[v2.StopVMResponse], error)
	ForceStopVM(context.Context, *connect.Request[v2.ForceStopVMRequest]) (*connect.Response[v2.ForceStopVMResponse], error)
	RebootVM(context.Context, *connect.Request[v2.RebootVMRequest]) (*connect.Response[v2.RebootVMResponse], error)
	PauseVM(context.Context, *connect.Request[v2.PauseVMRequest]) (*connect.Response[v2.PauseVMResponse], error)
	ResumeVM(context.Context, *connect.Request[v2.ResumeVMRequest]) (*connect.Response[v2.ResumeVMResponse], error)
	InitiateMigration(context.Context, *connect.Request[v2.InitiateMigrationRequest]) (*connect.Response[v2.InitiateMigrationResponse], error)
	PrepareForMigration(context.Context, *connect.Request[v2.PrepareForMigrationRequest]) (*connect.Response[v2.PrepareForMigrationResponse], error)
	CreateSnapshot(context.Context, *connect.Request[v2.CreateSnapshotRequest]) (*connect.Response[v2.CreateSnapshotResponse], error)
	RevertToSnapshot(context.Context, *connect.Request[v2.RevertToSnapshotRequest]) (*connect.Response[v2.RevertToSnapshotResponse], error)
	DeleteSnapshot(context.Context, *connect.Request[v2.DeleteSnapshotRequest]) (*connect.Response[v2.DeleteSnapshotResponse], error)
	// Task Management
	GetTaskStatus(context.Context, *connect.Request[v2.GetTaskStatusRequest]) (*connect.Response[v2.Task], error)
	CancelTask(context.Context, *connect.Request[v2.CancelTaskRequest]) (*connect.Response[v2.CancelTaskResponse], error)
	// Configuration Management (Host-level)
	ConfigureNetwork(context.Context, *connect.Request[v2.ConfigureNetworkRequest]) (*connect.Response[v2.ConfigureNetworkResponse], error)
	ConfigureStorage(context.Context, *connect.Request[v2.ConfigureStorageRequest]) (*connect.Response[v2.ConfigureStorageResponse], error)
	ConfigureTime(context.Context, *connect.Request[v2.ConfigureTimeRequest]) (*connect.Response[v2.ConfigureTimeResponse], error)
	SetMaintenanceMode(context.Context, *connect.Request[v2.SetMaintenanceModeRequest]) (*connect.Response[v2.SetMaintenanceModeResponse], error)
	UpdateHost(context.Context, *connect.Request[v2.UpdateHostRequest]) (*connect.Response[v2.UpdateHostResponse], error)
	// Retrieves a list of available items in the content library.
	GetContentLibraryItems(context.Context, *connect.Request[v2.GetContentLibraryItemsRequest]) (*connect.Response[v2.GetContentLibraryItemsResponse], error)
	// Uploads an item to the content library.
	UploadContentLibraryItem(context.Context) *connect.ClientStreamForClient[v2.UploadContentLibraryItemRequest, v2.UploadContentLibraryItemResponse]
	// Deletes an item from the content library.
	DeleteContentLibraryItem(context.Context, *connect.Request[v2.DeleteContentLibraryItemRequest]) (*connect.Response[v2.DeleteContentLibraryItemResponse], error)
	// Retrieves a list of available datastores.
	GetDatastores(context.Context, *connect.Request[v2.GetDatastoresRequest]) (*connect.Response[v2.GetDatastoresResponse], error)
	// Retrieves details about a specific datastore.
	GetDatastore(context.Context, *connect.Request[v2.GetDatastoreRequest]) (*connect.Response[v2.GetDatastoreResponse], error)
	// Creates a new datastore.
	CreateDatastore(context.Context, *connect.Request[v2.CreateDatastoreRequest]) (*connect.Response[v2.CreateDatastoreResponse], error)
	// Deletes a datastore.
	DeleteDatastore(context.Context, *connect.Request[v2.DeleteDatastoreRequest]) (*connect.Response[v2.DeleteDatastoreResponse], error)
	// Retrieves a list of available networks.
	GetNetworks(context.Context, *connect.Request[v2.GetNetworksRequest]) (*connect.Response[v2.GetNetworksResponse], error)
	// Retrieves details about a specific network.
	GetNetwork(context.Context, *connect.Request[v2.GetNetworkRequest]) (*connect.Response[v2.GetNetworkResponse], error)
	// Creates a new network.
	CreateNetwork(context.Context, *connect.Request[v2.CreateNetworkRequest]) (*connect.Response[v2.CreateNetworkResponse], error)
	// Deletes a network.
	DeleteNetwork(context.Context, *connect.Request[v2.DeleteNetworkRequest]) (*connect.Response[v2.DeleteNetworkResponse], error)
	// Attaches an ISO image from the content library to a VM.
	AttachIso(context.Context, *connect.Request[v2.AttachIsoRequest]) (*connect.Response[v2.AttachIsoResponse], error)
	// Detaches an ISO image from a VM.
	DetachIso(context.Context, *connect.Request[v2.DetachIsoRequest]) (*connect.Response[v2.DetachIsoResponse], error)
	// Clones a VM from a template in the content library.
	CloneVmFromTemplate(context.Context, *connect.Request[v2.CloneVmFromTemplateRequest]) (*connect.Response[v2.CloneVmFromTemplateResponse], error)
}

// NewAgentServiceClient constructs a client for the pilab.cloud.agent.v2.AgentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		registerHost: connect.NewClient[v2.RegisterHostRequest, v2.RegisterHostResponse](
			httpClient,
			baseURL+AgentServiceRegisterHostProcedure,
			connect.WithSchema(agentServiceRegisterHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		heartbeat: connect.NewClient[v2.HeartbeatRequest, v2.HeartbeatResponse](
			httpClient,
			baseURL+AgentServiceHeartbeatProcedure,
			connect.WithSchema(agentServiceHeartbeatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHostStatus: connect.NewClient[v2.GetHostStatusRequest, v2.HostStatus](
			httpClient,
			baseURL+AgentServiceGetHostStatusProcedure,
			connect.WithSchema(agentServiceGetHostStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createVM: connect.NewClient[v2.CreateVMRequest, v2.CreateVMResponse](
			httpClient,
			baseURL+AgentServiceCreateVMProcedure,
			connect.WithSchema(agentServiceCreateVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVMDetails: connect.NewClient[v2.GetVMDetailsRequest, v2.GetVMDetailsResponse](
			httpClient,
			baseURL+AgentServiceGetVMDetailsProcedure,
			connect.WithSchema(agentServiceGetVMDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateVM: connect.NewClient[v2.UpdateVMRequest, v2.UpdateVMResponse](
			httpClient,
			baseURL+AgentServiceUpdateVMProcedure,
			connect.WithSchema(agentServiceUpdateVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteVM: connect.NewClient[v2.DeleteVMRequest, v2.DeleteVMResponse](
			httpClient,
			baseURL+AgentServiceDeleteVMProcedure,
			connect.WithSchema(agentServiceDeleteVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startVM: connect.NewClient[v2.StartVMRequest, v2.StartVMResponse](
			httpClient,
			baseURL+AgentServiceStartVMProcedure,
			connect.WithSchema(agentServiceStartVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopVM: connect.NewClient[v2.StopVMRequest, v2.StopVMResponse](
			httpClient,
			baseURL+AgentServiceStopVMProcedure,
			connect.WithSchema(agentServiceStopVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		forceStopVM: connect.NewClient[v2.ForceStopVMRequest, v2.ForceStopVMResponse](
			httpClient,
			baseURL+AgentServiceForceStopVMProcedure,
			connect.WithSchema(agentServiceForceStopVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rebootVM: connect.NewClient[v2.RebootVMRequest, v2.RebootVMResponse](
			httpClient,
			baseURL+AgentServiceRebootVMProcedure,
			connect.WithSchema(agentServiceRebootVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pauseVM: connect.NewClient[v2.PauseVMRequest, v2.PauseVMResponse](
			httpClient,
			baseURL+AgentServicePauseVMProcedure,
			connect.WithSchema(agentServicePauseVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resumeVM: connect.NewClient[v2.ResumeVMRequest, v2.ResumeVMResponse](
			httpClient,
			baseURL+AgentServiceResumeVMProcedure,
			connect.WithSchema(agentServiceResumeVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		initiateMigration: connect.NewClient[v2.InitiateMigrationRequest, v2.InitiateMigrationResponse](
			httpClient,
			baseURL+AgentServiceInitiateMigrationProcedure,
			connect.WithSchema(agentServiceInitiateMigrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		prepareForMigration: connect.NewClient[v2.PrepareForMigrationRequest, v2.PrepareForMigrationResponse](
			httpClient,
			baseURL+AgentServicePrepareForMigrationProcedure,
			connect.WithSchema(agentServicePrepareForMigrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSnapshot: connect.NewClient[v2.CreateSnapshotRequest, v2.CreateSnapshotResponse](
			httpClient,
			baseURL+AgentServiceCreateSnapshotProcedure,
			connect.WithSchema(agentServiceCreateSnapshotMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revertToSnapshot: connect.NewClient[v2.RevertToSnapshotRequest, v2.RevertToSnapshotResponse](
			httpClient,
			baseURL+AgentServiceRevertToSnapshotProcedure,
			connect.WithSchema(agentServiceRevertToSnapshotMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSnapshot: connect.NewClient[v2.DeleteSnapshotRequest, v2.DeleteSnapshotResponse](
			httpClient,
			baseURL+AgentServiceDeleteSnapshotProcedure,
			connect.WithSchema(agentServiceDeleteSnapshotMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskStatus: connect.NewClient[v2.GetTaskStatusRequest, v2.Task](
			httpClient,
			baseURL+AgentServiceGetTaskStatusProcedure,
			connect.WithSchema(agentServiceGetTaskStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelTask: connect.NewClient[v2.CancelTaskRequest, v2.CancelTaskResponse](
			httpClient,
			baseURL+AgentServiceCancelTaskProcedure,
			connect.WithSchema(agentServiceCancelTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		configureNetwork: connect.NewClient[v2.ConfigureNetworkRequest, v2.ConfigureNetworkResponse](
			httpClient,
			baseURL+AgentServiceConfigureNetworkProcedure,
			connect.WithSchema(agentServiceConfigureNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		configureStorage: connect.NewClient[v2.ConfigureStorageRequest, v2.ConfigureStorageResponse](
			httpClient,
			baseURL+AgentServiceConfigureStorageProcedure,
			connect.WithSchema(agentServiceConfigureStorageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		configureTime: connect.NewClient[v2.ConfigureTimeRequest, v2.ConfigureTimeResponse](
			httpClient,
			baseURL+AgentServiceConfigureTimeProcedure,
			connect.WithSchema(agentServiceConfigureTimeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setMaintenanceMode: connect.NewClient[v2.SetMaintenanceModeRequest, v2.SetMaintenanceModeResponse](
			httpClient,
			baseURL+AgentServiceSetMaintenanceModeProcedure,
			connect.WithSchema(agentServiceSetMaintenanceModeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateHost: connect.NewClient[v2.UpdateHostRequest, v2.UpdateHostResponse](
			httpClient,
			baseURL+AgentServiceUpdateHostProcedure,
			connect.WithSchema(agentServiceUpdateHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getContentLibraryItems: connect.NewClient[v2.GetContentLibraryItemsRequest, v2.GetContentLibraryItemsResponse](
			httpClient,
			baseURL+AgentServiceGetContentLibraryItemsProcedure,
			connect.WithSchema(agentServiceGetContentLibraryItemsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadContentLibraryItem: connect.NewClient[v2.UploadContentLibraryItemRequest, v2.UploadContentLibraryItemResponse](
			httpClient,
			baseURL+AgentServiceUploadContentLibraryItemProcedure,
			connect.WithSchema(agentServiceUploadContentLibraryItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteContentLibraryItem: connect.NewClient[v2.DeleteContentLibraryItemRequest, v2.DeleteContentLibraryItemResponse](
			httpClient,
			baseURL+AgentServiceDeleteContentLibraryItemProcedure,
			connect.WithSchema(agentServiceDeleteContentLibraryItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDatastores: connect.NewClient[v2.GetDatastoresRequest, v2.GetDatastoresResponse](
			httpClient,
			baseURL+AgentServiceGetDatastoresProcedure,
			connect.WithSchema(agentServiceGetDatastoresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDatastore: connect.NewClient[v2.GetDatastoreRequest, v2.GetDatastoreResponse](
			httpClient,
			baseURL+AgentServiceGetDatastoreProcedure,
			connect.WithSchema(agentServiceGetDatastoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDatastore: connect.NewClient[v2.CreateDatastoreRequest, v2.CreateDatastoreResponse](
			httpClient,
			baseURL+AgentServiceCreateDatastoreProcedure,
			connect.WithSchema(agentServiceCreateDatastoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDatastore: connect.NewClient[v2.DeleteDatastoreRequest, v2.DeleteDatastoreResponse](
			httpClient,
			baseURL+AgentServiceDeleteDatastoreProcedure,
			connect.WithSchema(agentServiceDeleteDatastoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetworks: connect.NewClient[v2.GetNetworksRequest, v2.GetNetworksResponse](
			httpClient,
			baseURL+AgentServiceGetNetworksProcedure,
			connect.WithSchema(agentServiceGetNetworksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetwork: connect.NewClient[v2.GetNetworkRequest, v2.GetNetworkResponse](
			httpClient,
			baseURL+AgentServiceGetNetworkProcedure,
			connect.WithSchema(agentServiceGetNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createNetwork: connect.NewClient[v2.CreateNetworkRequest, v2.CreateNetworkResponse](
			httpClient,
			baseURL+AgentServiceCreateNetworkProcedure,
			connect.WithSchema(agentServiceCreateNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v2.DeleteNetworkRequest, v2.DeleteNetworkResponse](
			httpClient,
			baseURL+AgentServiceDeleteNetworkProcedure,
			connect.WithSchema(agentServiceDeleteNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		attachIso: connect.NewClient[v2.AttachIsoRequest, v2.AttachIsoResponse](
			httpClient,
			baseURL+AgentServiceAttachIsoProcedure,
			connect.WithSchema(agentServiceAttachIsoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		detachIso: connect.NewClient[v2.DetachIsoRequest, v2.DetachIsoResponse](
			httpClient,
			baseURL+AgentServiceDetachIsoProcedure,
			connect.WithSchema(agentServiceDetachIsoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cloneVmFromTemplate: connect.NewClient[v2.CloneVmFromTemplateRequest, v2.CloneVmFromTemplateResponse](
			httpClient,
			baseURL+AgentServiceCloneVmFromTemplateProcedure,
			connect.WithSchema(agentServiceCloneVmFromTemplateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	registerHost             *connect.Client[v2.RegisterHostRequest, v2.RegisterHostResponse]
	heartbeat                *connect.Client[v2.HeartbeatRequest, v2.HeartbeatResponse]
	getHostStatus            *connect.Client[v2.GetHostStatusRequest, v2.HostStatus]
	createVM                 *connect.Client[v2.CreateVMRequest, v2.CreateVMResponse]
	getVMDetails             *connect.Client[v2.GetVMDetailsRequest, v2.GetVMDetailsResponse]
	updateVM                 *connect.Client[v2.UpdateVMRequest, v2.UpdateVMResponse]
	deleteVM                 *connect.Client[v2.DeleteVMRequest, v2.DeleteVMResponse]
	startVM                  *connect.Client[v2.StartVMRequest, v2.StartVMResponse]
	stopVM                   *connect.Client[v2.StopVMRequest, v2.StopVMResponse]
	forceStopVM              *connect.Client[v2.ForceStopVMRequest, v2.ForceStopVMResponse]
	rebootVM                 *connect.Client[v2.RebootVMRequest, v2.RebootVMResponse]
	pauseVM                  *connect.Client[v2.PauseVMRequest, v2.PauseVMResponse]
	resumeVM                 *connect.Client[v2.ResumeVMRequest, v2.ResumeVMResponse]
	initiateMigration        *connect.Client[v2.InitiateMigrationRequest, v2.InitiateMigrationResponse]
	prepareForMigration      *connect.Client[v2.PrepareForMigrationRequest, v2.PrepareForMigrationResponse]
	createSnapshot           *connect.Client[v2.CreateSnapshotRequest, v2.CreateSnapshotResponse]
	revertToSnapshot         *connect.Client[v2.RevertToSnapshotRequest, v2.RevertToSnapshotResponse]
	deleteSnapshot           *connect.Client[v2.DeleteSnapshotRequest, v2.DeleteSnapshotResponse]
	getTaskStatus            *connect.Client[v2.GetTaskStatusRequest, v2.Task]
	cancelTask               *connect.Client[v2.CancelTaskRequest, v2.CancelTaskResponse]
	configureNetwork         *connect.Client[v2.ConfigureNetworkRequest, v2.ConfigureNetworkResponse]
	configureStorage         *connect.Client[v2.ConfigureStorageRequest, v2.ConfigureStorageResponse]
	configureTime            *connect.Client[v2.ConfigureTimeRequest, v2.ConfigureTimeResponse]
	setMaintenanceMode       *connect.Client[v2.SetMaintenanceModeRequest, v2.SetMaintenanceModeResponse]
	updateHost               *connect.Client[v2.UpdateHostRequest, v2.UpdateHostResponse]
	getContentLibraryItems   *connect.Client[v2.GetContentLibraryItemsRequest, v2.GetContentLibraryItemsResponse]
	uploadContentLibraryItem *connect.Client[v2.UploadContentLibraryItemRequest, v2.UploadContentLibraryItemResponse]
	deleteContentLibraryItem *connect.Client[v2.DeleteContentLibraryItemRequest, v2.DeleteContentLibraryItemResponse]
	getDatastores            *connect.Client[v2.GetDatastoresRequest, v2.GetDatastoresResponse]
	getDatastore             *connect.Client[v2.GetDatastoreRequest, v2.GetDatastoreResponse]
	createDatastore          *connect.Client[v2.CreateDatastoreRequest, v2.CreateDatastoreResponse]
	deleteDatastore          *connect.Client[v2.DeleteDatastoreRequest, v2.DeleteDatastoreResponse]
	getNetworks              *connect.Client[v2.GetNetworksRequest, v2.GetNetworksResponse]
	getNetwork               *connect.Client[v2.GetNetworkRequest, v2.GetNetworkResponse]
	createNetwork            *connect.Client[v2.CreateNetworkRequest, v2.CreateNetworkResponse]
	deleteNetwork            *connect.Client[v2.DeleteNetworkRequest, v2.DeleteNetworkResponse]
	attachIso                *connect.Client[v2.AttachIsoRequest, v2.AttachIsoResponse]
	detachIso                *connect.Client[v2.DetachIsoRequest, v2.DetachIsoResponse]
	cloneVmFromTemplate      *connect.Client[v2.CloneVmFromTemplateRequest, v2.CloneVmFromTemplateResponse]
}

// RegisterHost calls pilab.cloud.agent.v2.AgentService.RegisterHost.
func (c *agentServiceClient) RegisterHost(ctx context.Context, req *connect.Request[v2.RegisterHostRequest]) (*connect.Response[v2.RegisterHostResponse], error) {
	return c.registerHost.CallUnary(ctx, req)
}

// Heartbeat calls pilab.cloud.agent.v2.AgentService.Heartbeat.
func (c *agentServiceClient) Heartbeat(ctx context.Context, req *connect.Request[v2.HeartbeatRequest]) (*connect.Response[v2.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// GetHostStatus calls pilab.cloud.agent.v2.AgentService.GetHostStatus.
func (c *agentServiceClient) GetHostStatus(ctx context.Context, req *connect.Request[v2.GetHostStatusRequest]) (*connect.Response[v2.HostStatus], error) {
	return c.getHostStatus.CallUnary(ctx, req)
}

// CreateVM calls pilab.cloud.agent.v2.AgentService.CreateVM.
func (c *agentServiceClient) CreateVM(ctx context.Context, req *connect.Request[v2.CreateVMRequest]) (*connect.Response[v2.CreateVMResponse], error) {
	return c.createVM.CallUnary(ctx, req)
}

// GetVMDetails calls pilab.cloud.agent.v2.AgentService.GetVMDetails.
func (c *agentServiceClient) GetVMDetails(ctx context.Context, req *connect.Request[v2.GetVMDetailsRequest]) (*connect.Response[v2.GetVMDetailsResponse], error) {
	return c.getVMDetails.CallUnary(ctx, req)
}

// UpdateVM calls pilab.cloud.agent.v2.AgentService.UpdateVM.
func (c *agentServiceClient) UpdateVM(ctx context.Context, req *connect.Request[v2.UpdateVMRequest]) (*connect.Response[v2.UpdateVMResponse], error) {
	return c.updateVM.CallUnary(ctx, req)
}

// DeleteVM calls pilab.cloud.agent.v2.AgentService.DeleteVM.
func (c *agentServiceClient) DeleteVM(ctx context.Context, req *connect.Request[v2.DeleteVMRequest]) (*connect.Response[v2.DeleteVMResponse], error) {
	return c.deleteVM.CallUnary(ctx, req)
}

// StartVM calls pilab.cloud.agent.v2.AgentService.StartVM.
func (c *agentServiceClient) StartVM(ctx context.Context, req *connect.Request[v2.StartVMRequest]) (*connect.Response[v2.StartVMResponse], error) {
	return c.startVM.CallUnary(ctx, req)
}

// StopVM calls pilab.cloud.agent.v2.AgentService.StopVM.
func (c *agentServiceClient) StopVM(ctx context.Context, req *connect.Request[v2.StopVMRequest]) (*connect.Response[v2.StopVMResponse], error) {
	return c.stopVM.CallUnary(ctx, req)
}

// ForceStopVM calls pilab.cloud.agent.v2.AgentService.ForceStopVM.
func (c *agentServiceClient) ForceStopVM(ctx context.Context, req *connect.Request[v2.ForceStopVMRequest]) (*connect.Response[v2.ForceStopVMResponse], error) {
	return c.forceStopVM.CallUnary(ctx, req)
}

// RebootVM calls pilab.cloud.agent.v2.AgentService.RebootVM.
func (c *agentServiceClient) RebootVM(ctx context.Context, req *connect.Request[v2.RebootVMRequest]) (*connect.Response[v2.RebootVMResponse], error) {
	return c.rebootVM.CallUnary(ctx, req)
}

// PauseVM calls pilab.cloud.agent.v2.AgentService.PauseVM.
func (c *agentServiceClient) PauseVM(ctx context.Context, req *connect.Request[v2.PauseVMRequest]) (*connect.Response[v2.PauseVMResponse], error) {
	return c.pauseVM.CallUnary(ctx, req)
}

// ResumeVM calls pilab.cloud.agent.v2.AgentService.ResumeVM.
func (c *agentServiceClient) ResumeVM(ctx context.Context, req *connect.Request[v2.ResumeVMRequest]) (*connect.Response[v2.ResumeVMResponse], error) {
	return c.resumeVM.CallUnary(ctx, req)
}

// InitiateMigration calls pilab.cloud.agent.v2.AgentService.InitiateMigration.
func (c *agentServiceClient) InitiateMigration(ctx context.Context, req *connect.Request[v2.InitiateMigrationRequest]) (*connect.Response[v2.InitiateMigrationResponse], error) {
	return c.initiateMigration.CallUnary(ctx, req)
}

// PrepareForMigration calls pilab.cloud.agent.v2.AgentService.PrepareForMigration.
func (c *agentServiceClient) PrepareForMigration(ctx context.Context, req *connect.Request[v2.PrepareForMigrationRequest]) (*connect.Response[v2.PrepareForMigrationResponse], error) {
	return c.prepareForMigration.CallUnary(ctx, req)
}

// CreateSnapshot calls pilab.cloud.agent.v2.AgentService.CreateSnapshot.
func (c *agentServiceClient) CreateSnapshot(ctx context.Context, req *connect.Request[v2.CreateSnapshotRequest]) (*connect.Response[v2.CreateSnapshotResponse], error) {
	return c.createSnapshot.CallUnary(ctx, req)
}

// RevertToSnapshot calls pilab.cloud.agent.v2.AgentService.RevertToSnapshot.
func (c *agentServiceClient) RevertToSnapshot(ctx context.Context, req *connect.Request[v2.RevertToSnapshotRequest]) (*connect.Response[v2.RevertToSnapshotResponse], error) {
	return c.revertToSnapshot.CallUnary(ctx, req)
}

// DeleteSnapshot calls pilab.cloud.agent.v2.AgentService.DeleteSnapshot.
func (c *agentServiceClient) DeleteSnapshot(ctx context.Context, req *connect.Request[v2.DeleteSnapshotRequest]) (*connect.Response[v2.DeleteSnapshotResponse], error) {
	return c.deleteSnapshot.CallUnary(ctx, req)
}

// GetTaskStatus calls pilab.cloud.agent.v2.AgentService.GetTaskStatus.
func (c *agentServiceClient) GetTaskStatus(ctx context.Context, req *connect.Request[v2.GetTaskStatusRequest]) (*connect.Response[v2.Task], error) {
	return c.getTaskStatus.CallUnary(ctx, req)
}

// CancelTask calls pilab.cloud.agent.v2.AgentService.CancelTask.
func (c *agentServiceClient) CancelTask(ctx context.Context, req *connect.Request[v2.CancelTaskRequest]) (*connect.Response[v2.CancelTaskResponse], error) {
	return c.cancelTask.CallUnary(ctx, req)
}

// ConfigureNetwork calls pilab.cloud.agent.v2.AgentService.ConfigureNetwork.
func (c *agentServiceClient) ConfigureNetwork(ctx context.Context, req *connect.Request[v2.ConfigureNetworkRequest]) (*connect.Response[v2.ConfigureNetworkResponse], error) {
	return c.configureNetwork.CallUnary(ctx, req)
}

// ConfigureStorage calls pilab.cloud.agent.v2.AgentService.ConfigureStorage.
func (c *agentServiceClient) ConfigureStorage(ctx context.Context, req *connect.Request[v2.ConfigureStorageRequest]) (*connect.Response[v2.ConfigureStorageResponse], error) {
	return c.configureStorage.CallUnary(ctx, req)
}

// ConfigureTime calls pilab.cloud.agent.v2.AgentService.ConfigureTime.
func (c *agentServiceClient) ConfigureTime(ctx context.Context, req *connect.Request[v2.ConfigureTimeRequest]) (*connect.Response[v2.ConfigureTimeResponse], error) {
	return c.configureTime.CallUnary(ctx, req)
}

// SetMaintenanceMode calls pilab.cloud.agent.v2.AgentService.SetMaintenanceMode.
func (c *agentServiceClient) SetMaintenanceMode(ctx context.Context, req *connect.Request[v2.SetMaintenanceModeRequest]) (*connect.Response[v2.SetMaintenanceModeResponse], error) {
	return c.setMaintenanceMode.CallUnary(ctx, req)
}

// UpdateHost calls pilab.cloud.agent.v2.AgentService.UpdateHost.
func (c *agentServiceClient) UpdateHost(ctx context.Context, req *connect.Request[v2.UpdateHostRequest]) (*connect.Response[v2.UpdateHostResponse], error) {
	return c.updateHost.CallUnary(ctx, req)
}

// GetContentLibraryItems calls pilab.cloud.agent.v2.AgentService.GetContentLibraryItems.
func (c *agentServiceClient) GetContentLibraryItems(ctx context.Context, req *connect.Request[v2.GetContentLibraryItemsRequest]) (*connect.Response[v2.GetContentLibraryItemsResponse], error) {
	return c.getContentLibraryItems.CallUnary(ctx, req)
}

// UploadContentLibraryItem calls pilab.cloud.agent.v2.AgentService.UploadContentLibraryItem.
func (c *agentServiceClient) UploadContentLibraryItem(ctx context.Context) *connect.ClientStreamForClient[v2.UploadContentLibraryItemRequest, v2.UploadContentLibraryItemResponse] {
	return c.uploadContentLibraryItem.CallClientStream(ctx)
}

// DeleteContentLibraryItem calls pilab.cloud.agent.v2.AgentService.DeleteContentLibraryItem.
func (c *agentServiceClient) DeleteContentLibraryItem(ctx context.Context, req *connect.Request[v2.DeleteContentLibraryItemRequest]) (*connect.Response[v2.DeleteContentLibraryItemResponse], error) {
	return c.deleteContentLibraryItem.CallUnary(ctx, req)
}

// GetDatastores calls pilab.cloud.agent.v2.AgentService.GetDatastores.
func (c *agentServiceClient) GetDatastores(ctx context.Context, req *connect.Request[v2.GetDatastoresRequest]) (*connect.Response[v2.GetDatastoresResponse], error) {
	return c.getDatastores.CallUnary(ctx, req)
}

// GetDatastore calls pilab.cloud.agent.v2.AgentService.GetDatastore.
func (c *agentServiceClient) GetDatastore(ctx context.Context, req *connect.Request[v2.GetDatastoreRequest]) (*connect.Response[v2.GetDatastoreResponse], error) {
	return c.getDatastore.CallUnary(ctx, req)
}

// CreateDatastore calls pilab.cloud.agent.v2.AgentService.CreateDatastore.
func (c *agentServiceClient) CreateDatastore(ctx context.Context, req *connect.Request[v2.CreateDatastoreRequest]) (*connect.Response[v2.CreateDatastoreResponse], error) {
	return c.createDatastore.CallUnary(ctx, req)
}

// DeleteDatastore calls pilab.cloud.agent.v2.AgentService.DeleteDatastore.
func (c *agentServiceClient) DeleteDatastore(ctx context.Context, req *connect.Request[v2.DeleteDatastoreRequest]) (*connect.Response[v2.DeleteDatastoreResponse], error) {
	return c.deleteDatastore.CallUnary(ctx, req)
}

// GetNetworks calls pilab.cloud.agent.v2.AgentService.GetNetworks.
func (c *agentServiceClient) GetNetworks(ctx context.Context, req *connect.Request[v2.GetNetworksRequest]) (*connect.Response[v2.GetNetworksResponse], error) {
	return c.getNetworks.CallUnary(ctx, req)
}

// GetNetwork calls pilab.cloud.agent.v2.AgentService.GetNetwork.
func (c *agentServiceClient) GetNetwork(ctx context.Context, req *connect.Request[v2.GetNetworkRequest]) (*connect.Response[v2.GetNetworkResponse], error) {
	return c.getNetwork.CallUnary(ctx, req)
}

// CreateNetwork calls pilab.cloud.agent.v2.AgentService.CreateNetwork.
func (c *agentServiceClient) CreateNetwork(ctx context.Context, req *connect.Request[v2.CreateNetworkRequest]) (*connect.Response[v2.CreateNetworkResponse], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// DeleteNetwork calls pilab.cloud.agent.v2.AgentService.DeleteNetwork.
func (c *agentServiceClient) DeleteNetwork(ctx context.Context, req *connect.Request[v2.DeleteNetworkRequest]) (*connect.Response[v2.DeleteNetworkResponse], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// AttachIso calls pilab.cloud.agent.v2.AgentService.AttachIso.
func (c *agentServiceClient) AttachIso(ctx context.Context, req *connect.Request[v2.AttachIsoRequest]) (*connect.Response[v2.AttachIsoResponse], error) {
	return c.attachIso.CallUnary(ctx, req)
}

// DetachIso calls pilab.cloud.agent.v2.AgentService.DetachIso.
func (c *agentServiceClient) DetachIso(ctx context.Context, req *connect.Request[v2.DetachIsoRequest]) (*connect.Response[v2.DetachIsoResponse], error) {
	return c.detachIso.CallUnary(ctx, req)
}

// CloneVmFromTemplate calls pilab.cloud.agent.v2.AgentService.CloneVmFromTemplate.
func (c *agentServiceClient) CloneVmFromTemplate(ctx context.Context, req *connect.Request[v2.CloneVmFromTemplateRequest]) (*connect.Response[v2.CloneVmFromTemplateResponse], error) {
	return c.cloneVmFromTemplate.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the pilab.cloud.agent.v2.AgentService service.
type AgentServiceHandler interface {
	// Host Management
	RegisterHost(context.Context, *connect.Request[v2.RegisterHostRequest]) (*connect.Response[v2.RegisterHostResponse], error)
	Heartbeat(context.Context, *connect.Request[v2.HeartbeatRequest]) (*connect.Response[v2.HeartbeatResponse], error)
	GetHostStatus(context.Context, *connect.Request[v2.GetHostStatusRequest]) (*connect.Response[v2.HostStatus], error)
	// VM Management
	CreateVM(context.Context, *connect.Request[v2.CreateVMRequest]) (*connect.Response[v2.CreateVMResponse], error)
	GetVMDetails(context.Context, *connect.Request[v2.GetVMDetailsRequest]) (*connect.Response[v2.GetVMDetailsResponse], error)
	UpdateVM(context.Context, *connect.Request[v2.UpdateVMRequest]) (*connect.Response[v2.UpdateVMResponse], error)
	DeleteVM(context.Context, *connect.Request[v2.DeleteVMRequest]) (*connect.Response[v2.DeleteVMResponse], error)
	StartVM(context.Context, *connect.Request[v2.StartVMRequest]) (*connect.Response[v2.StartVMResponse], error)
	StopVM(context.Context, *connect.Request[v2.StopVMRequest]) (*connect.Response[v2.StopVMResponse], error)
	ForceStopVM(context.Context, *connect.Request[v2.ForceStopVMRequest]) (*connect.Response[v2.ForceStopVMResponse], error)
	RebootVM(context.Context, *connect.Request[v2.RebootVMRequest]) (*connect.Response[v2.RebootVMResponse], error)
	PauseVM(context.Context, *connect.Request[v2.PauseVMRequest]) (*connect.Response[v2.PauseVMResponse], error)
	ResumeVM(context.Context, *connect.Request[v2.ResumeVMRequest]) (*connect.Response[v2.ResumeVMResponse], error)
	InitiateMigration(context.Context, *connect.Request[v2.InitiateMigrationRequest]) (*connect.Response[v2.InitiateMigrationResponse], error)
	PrepareForMigration(context.Context, *connect.Request[v2.PrepareForMigrationRequest]) (*connect.Response[v2.PrepareForMigrationResponse], error)
	CreateSnapshot(context.Context, *connect.Request[v2.CreateSnapshotRequest]) (*connect.Response[v2.CreateSnapshotResponse], error)
	RevertToSnapshot(context.Context, *connect.Request[v2.RevertToSnapshotRequest]) (*connect.Response[v2.RevertToSnapshotResponse], error)
	DeleteSnapshot(context.Context, *connect.Request[v2.DeleteSnapshotRequest]) (*connect.Response[v2.DeleteSnapshotResponse], error)
	// Task Management
	GetTaskStatus(context.Context, *connect.Request[v2.GetTaskStatusRequest]) (*connect.Response[v2.Task], error)
	CancelTask(context.Context, *connect.Request[v2.CancelTaskRequest]) (*connect.Response[v2.CancelTaskResponse], error)
	// Configuration Management (Host-level)
	ConfigureNetwork(context.Context, *connect.Request[v2.ConfigureNetworkRequest]) (*connect.Response[v2.ConfigureNetworkResponse], error)
	ConfigureStorage(context.Context, *connect.Request[v2.ConfigureStorageRequest]) (*connect.Response[v2.ConfigureStorageResponse], error)
	ConfigureTime(context.Context, *connect.Request[v2.ConfigureTimeRequest]) (*connect.Response[v2.ConfigureTimeResponse], error)
	SetMaintenanceMode(context.Context, *connect.Request[v2.SetMaintenanceModeRequest]) (*connect.Response[v2.SetMaintenanceModeResponse], error)
	UpdateHost(context.Context, *connect.Request[v2.UpdateHostRequest]) (*connect.Response[v2.UpdateHostResponse], error)
	// Retrieves a list of available items in the content library.
	GetContentLibraryItems(context.Context, *connect.Request[v2.GetContentLibraryItemsRequest]) (*connect.Response[v2.GetContentLibraryItemsResponse], error)
	// Uploads an item to the content library.
	UploadContentLibraryItem(context.Context, *connect.ClientStream[v2.UploadContentLibraryItemRequest]) (*connect.Response[v2.UploadContentLibraryItemResponse], error)
	// Deletes an item from the content library.
	DeleteContentLibraryItem(context.Context, *connect.Request[v2.DeleteContentLibraryItemRequest]) (*connect.Response[v2.DeleteContentLibraryItemResponse], error)
	// Retrieves a list of available datastores.
	GetDatastores(context.Context, *connect.Request[v2.GetDatastoresRequest]) (*connect.Response[v2.GetDatastoresResponse], error)
	// Retrieves details about a specific datastore.
	GetDatastore(context.Context, *connect.Request[v2.GetDatastoreRequest]) (*connect.Response[v2.GetDatastoreResponse], error)
	// Creates a new datastore.
	CreateDatastore(context.Context, *connect.Request[v2.CreateDatastoreRequest]) (*connect.Response[v2.CreateDatastoreResponse], error)
	// Deletes a datastore.
	DeleteDatastore(context.Context, *connect.Request[v2.DeleteDatastoreRequest]) (*connect.Response[v2.DeleteDatastoreResponse], error)
	// Retrieves a list of available networks.
	GetNetworks(context.Context, *connect.Request[v2.GetNetworksRequest]) (*connect.Response[v2.GetNetworksResponse], error)
	// Retrieves details about a specific network.
	GetNetwork(context.Context, *connect.Request[v2.GetNetworkRequest]) (*connect.Response[v2.GetNetworkResponse], error)
	// Creates a new network.
	CreateNetwork(context.Context, *connect.Request[v2.CreateNetworkRequest]) (*connect.Response[v2.CreateNetworkResponse], error)
	// Deletes a network.
	DeleteNetwork(context.Context, *connect.Request[v2.DeleteNetworkRequest]) (*connect.Response[v2.DeleteNetworkResponse], error)
	// Attaches an ISO image from the content library to a VM.
	AttachIso(context.Context, *connect.Request[v2.AttachIsoRequest]) (*connect.Response[v2.AttachIsoResponse], error)
	// Detaches an ISO image from a VM.
	DetachIso(context.Context, *connect.Request[v2.DetachIsoRequest]) (*connect.Response[v2.DetachIsoResponse], error)
	// Clones a VM from a template in the content library.
	CloneVmFromTemplate(context.Context, *connect.Request[v2.CloneVmFromTemplateRequest]) (*connect.Response[v2.CloneVmFromTemplateResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceRegisterHostHandler := connect.NewUnaryHandler(
		AgentServiceRegisterHostProcedure,
		svc.RegisterHost,
		connect.WithSchema(agentServiceRegisterHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceHeartbeatHandler := connect.NewUnaryHandler(
		AgentServiceHeartbeatProcedure,
		svc.Heartbeat,
		connect.WithSchema(agentServiceHeartbeatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetHostStatusHandler := connect.NewUnaryHandler(
		AgentServiceGetHostStatusProcedure,
		svc.GetHostStatus,
		connect.WithSchema(agentServiceGetHostStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceCreateVMHandler := connect.NewUnaryHandler(
		AgentServiceCreateVMProcedure,
		svc.CreateVM,
		connect.WithSchema(agentServiceCreateVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetVMDetailsHandler := connect.NewUnaryHandler(
		AgentServiceGetVMDetailsProcedure,
		svc.GetVMDetails,
		connect.WithSchema(agentServiceGetVMDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUpdateVMHandler := connect.NewUnaryHandler(
		AgentServiceUpdateVMProcedure,
		svc.UpdateVM,
		connect.WithSchema(agentServiceUpdateVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDeleteVMHandler := connect.NewUnaryHandler(
		AgentServiceDeleteVMProcedure,
		svc.DeleteVM,
		connect.WithSchema(agentServiceDeleteVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceStartVMHandler := connect.NewUnaryHandler(
		AgentServiceStartVMProcedure,
		svc.StartVM,
		connect.WithSchema(agentServiceStartVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceStopVMHandler := connect.NewUnaryHandler(
		AgentServiceStopVMProcedure,
		svc.StopVM,
		connect.WithSchema(agentServiceStopVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceForceStopVMHandler := connect.NewUnaryHandler(
		AgentServiceForceStopVMProcedure,
		svc.ForceStopVM,
		connect.WithSchema(agentServiceForceStopVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceRebootVMHandler := connect.NewUnaryHandler(
		AgentServiceRebootVMProcedure,
		svc.RebootVM,
		connect.WithSchema(agentServiceRebootVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServicePauseVMHandler := connect.NewUnaryHandler(
		AgentServicePauseVMProcedure,
		svc.PauseVM,
		connect.WithSchema(agentServicePauseVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceResumeVMHandler := connect.NewUnaryHandler(
		AgentServiceResumeVMProcedure,
		svc.ResumeVM,
		connect.WithSchema(agentServiceResumeVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceInitiateMigrationHandler := connect.NewUnaryHandler(
		AgentServiceInitiateMigrationProcedure,
		svc.InitiateMigration,
		connect.WithSchema(agentServiceInitiateMigrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServicePrepareForMigrationHandler := connect.NewUnaryHandler(
		AgentServicePrepareForMigrationProcedure,
		svc.PrepareForMigration,
		connect.WithSchema(agentServicePrepareForMigrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceCreateSnapshotHandler := connect.NewUnaryHandler(
		AgentServiceCreateSnapshotProcedure,
		svc.CreateSnapshot,
		connect.WithSchema(agentServiceCreateSnapshotMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceRevertToSnapshotHandler := connect.NewUnaryHandler(
		AgentServiceRevertToSnapshotProcedure,
		svc.RevertToSnapshot,
		connect.WithSchema(agentServiceRevertToSnapshotMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDeleteSnapshotHandler := connect.NewUnaryHandler(
		AgentServiceDeleteSnapshotProcedure,
		svc.DeleteSnapshot,
		connect.WithSchema(agentServiceDeleteSnapshotMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetTaskStatusHandler := connect.NewUnaryHandler(
		AgentServiceGetTaskStatusProcedure,
		svc.GetTaskStatus,
		connect.WithSchema(agentServiceGetTaskStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceCancelTaskHandler := connect.NewUnaryHandler(
		AgentServiceCancelTaskProcedure,
		svc.CancelTask,
		connect.WithSchema(agentServiceCancelTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceConfigureNetworkHandler := connect.NewUnaryHandler(
		AgentServiceConfigureNetworkProcedure,
		svc.ConfigureNetwork,
		connect.WithSchema(agentServiceConfigureNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceConfigureStorageHandler := connect.NewUnaryHandler(
		AgentServiceConfigureStorageProcedure,
		svc.ConfigureStorage,
		connect.WithSchema(agentServiceConfigureStorageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceConfigureTimeHandler := connect.NewUnaryHandler(
		AgentServiceConfigureTimeProcedure,
		svc.ConfigureTime,
		connect.WithSchema(agentServiceConfigureTimeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceSetMaintenanceModeHandler := connect.NewUnaryHandler(
		AgentServiceSetMaintenanceModeProcedure,
		svc.SetMaintenanceMode,
		connect.WithSchema(agentServiceSetMaintenanceModeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUpdateHostHandler := connect.NewUnaryHandler(
		AgentServiceUpdateHostProcedure,
		svc.UpdateHost,
		connect.WithSchema(agentServiceUpdateHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetContentLibraryItemsHandler := connect.NewUnaryHandler(
		AgentServiceGetContentLibraryItemsProcedure,
		svc.GetContentLibraryItems,
		connect.WithSchema(agentServiceGetContentLibraryItemsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUploadContentLibraryItemHandler := connect.NewClientStreamHandler(
		AgentServiceUploadContentLibraryItemProcedure,
		svc.UploadContentLibraryItem,
		connect.WithSchema(agentServiceUploadContentLibraryItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDeleteContentLibraryItemHandler := connect.NewUnaryHandler(
		AgentServiceDeleteContentLibraryItemProcedure,
		svc.DeleteContentLibraryItem,
		connect.WithSchema(agentServiceDeleteContentLibraryItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetDatastoresHandler := connect.NewUnaryHandler(
		AgentServiceGetDatastoresProcedure,
		svc.GetDatastores,
		connect.WithSchema(agentServiceGetDatastoresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetDatastoreHandler := connect.NewUnaryHandler(
		AgentServiceGetDatastoreProcedure,
		svc.GetDatastore,
		connect.WithSchema(agentServiceGetDatastoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceCreateDatastoreHandler := connect.NewUnaryHandler(
		AgentServiceCreateDatastoreProcedure,
		svc.CreateDatastore,
		connect.WithSchema(agentServiceCreateDatastoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDeleteDatastoreHandler := connect.NewUnaryHandler(
		AgentServiceDeleteDatastoreProcedure,
		svc.DeleteDatastore,
		connect.WithSchema(agentServiceDeleteDatastoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetNetworksHandler := connect.NewUnaryHandler(
		AgentServiceGetNetworksProcedure,
		svc.GetNetworks,
		connect.WithSchema(agentServiceGetNetworksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetNetworkHandler := connect.NewUnaryHandler(
		AgentServiceGetNetworkProcedure,
		svc.GetNetwork,
		connect.WithSchema(agentServiceGetNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceCreateNetworkHandler := connect.NewUnaryHandler(
		AgentServiceCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(agentServiceCreateNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDeleteNetworkHandler := connect.NewUnaryHandler(
		AgentServiceDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(agentServiceDeleteNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceAttachIsoHandler := connect.NewUnaryHandler(
		AgentServiceAttachIsoProcedure,
		svc.AttachIso,
		connect.WithSchema(agentServiceAttachIsoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDetachIsoHandler := connect.NewUnaryHandler(
		AgentServiceDetachIsoProcedure,
		svc.DetachIso,
		connect.WithSchema(agentServiceDetachIsoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceCloneVmFromTemplateHandler := connect.NewUnaryHandler(
		AgentServiceCloneVmFromTemplateProcedure,
		svc.CloneVmFromTemplate,
		connect.WithSchema(agentServiceCloneVmFromTemplateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.agent.v2.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceRegisterHostProcedure:
			agentServiceRegisterHostHandler.ServeHTTP(w, r)
		case AgentServiceHeartbeatProcedure:
			agentServiceHeartbeatHandler.ServeHTTP(w, r)
		case AgentServiceGetHostStatusProcedure:
			agentServiceGetHostStatusHandler.ServeHTTP(w, r)
		case AgentServiceCreateVMProcedure:
			agentServiceCreateVMHandler.ServeHTTP(w, r)
		case AgentServiceGetVMDetailsProcedure:
			agentServiceGetVMDetailsHandler.ServeHTTP(w, r)
		case AgentServiceUpdateVMProcedure:
			agentServiceUpdateVMHandler.ServeHTTP(w, r)
		case AgentServiceDeleteVMProcedure:
			agentServiceDeleteVMHandler.ServeHTTP(w, r)
		case AgentServiceStartVMProcedure:
			agentServiceStartVMHandler.ServeHTTP(w, r)
		case AgentServiceStopVMProcedure:
			agentServiceStopVMHandler.ServeHTTP(w, r)
		case AgentServiceForceStopVMProcedure:
			agentServiceForceStopVMHandler.ServeHTTP(w, r)
		case AgentServiceRebootVMProcedure:
			agentServiceRebootVMHandler.ServeHTTP(w, r)
		case AgentServicePauseVMProcedure:
			agentServicePauseVMHandler.ServeHTTP(w, r)
		case AgentServiceResumeVMProcedure:
			agentServiceResumeVMHandler.ServeHTTP(w, r)
		case AgentServiceInitiateMigrationProcedure:
			agentServiceInitiateMigrationHandler.ServeHTTP(w, r)
		case AgentServicePrepareForMigrationProcedure:
			agentServicePrepareForMigrationHandler.ServeHTTP(w, r)
		case AgentServiceCreateSnapshotProcedure:
			agentServiceCreateSnapshotHandler.ServeHTTP(w, r)
		case AgentServiceRevertToSnapshotProcedure:
			agentServiceRevertToSnapshotHandler.ServeHTTP(w, r)
		case AgentServiceDeleteSnapshotProcedure:
			agentServiceDeleteSnapshotHandler.ServeHTTP(w, r)
		case AgentServiceGetTaskStatusProcedure:
			agentServiceGetTaskStatusHandler.ServeHTTP(w, r)
		case AgentServiceCancelTaskProcedure:
			agentServiceCancelTaskHandler.ServeHTTP(w, r)
		case AgentServiceConfigureNetworkProcedure:
			agentServiceConfigureNetworkHandler.ServeHTTP(w, r)
		case AgentServiceConfigureStorageProcedure:
			agentServiceConfigureStorageHandler.ServeHTTP(w, r)
		case AgentServiceConfigureTimeProcedure:
			agentServiceConfigureTimeHandler.ServeHTTP(w, r)
		case AgentServiceSetMaintenanceModeProcedure:
			agentServiceSetMaintenanceModeHandler.ServeHTTP(w, r)
		case AgentServiceUpdateHostProcedure:
			agentServiceUpdateHostHandler.ServeHTTP(w, r)
		case AgentServiceGetContentLibraryItemsProcedure:
			agentServiceGetContentLibraryItemsHandler.ServeHTTP(w, r)
		case AgentServiceUploadContentLibraryItemProcedure:
			agentServiceUploadContentLibraryItemHandler.ServeHTTP(w, r)
		case AgentServiceDeleteContentLibraryItemProcedure:
			agentServiceDeleteContentLibraryItemHandler.ServeHTTP(w, r)
		case AgentServiceGetDatastoresProcedure:
			agentServiceGetDatastoresHandler.ServeHTTP(w, r)
		case AgentServiceGetDatastoreProcedure:
			agentServiceGetDatastoreHandler.ServeHTTP(w, r)
		case AgentServiceCreateDatastoreProcedure:
			agentServiceCreateDatastoreHandler.ServeHTTP(w, r)
		case AgentServiceDeleteDatastoreProcedure:
			agentServiceDeleteDatastoreHandler.ServeHTTP(w, r)
		case AgentServiceGetNetworksProcedure:
			agentServiceGetNetworksHandler.ServeHTTP(w, r)
		case AgentServiceGetNetworkProcedure:
			agentServiceGetNetworkHandler.ServeHTTP(w, r)
		case AgentServiceCreateNetworkProcedure:
			agentServiceCreateNetworkHandler.ServeHTTP(w, r)
		case AgentServiceDeleteNetworkProcedure:
			agentServiceDeleteNetworkHandler.ServeHTTP(w, r)
		case AgentServiceAttachIsoProcedure:
			agentServiceAttachIsoHandler.ServeHTTP(w, r)
		case AgentServiceDetachIsoProcedure:
			agentServiceDetachIsoHandler.ServeHTTP(w, r)
		case AgentServiceCloneVmFromTemplateProcedure:
			agentServiceCloneVmFromTemplateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) RegisterHost(context.Context, *connect.Request[v2.RegisterHostRequest]) (*connect.Response[v2.RegisterHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.RegisterHost is not implemented"))
}

func (UnimplementedAgentServiceHandler) Heartbeat(context.Context, *connect.Request[v2.HeartbeatRequest]) (*connect.Response[v2.HeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.Heartbeat is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetHostStatus(context.Context, *connect.Request[v2.GetHostStatusRequest]) (*connect.Response[v2.HostStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.GetHostStatus is not implemented"))
}

func (UnimplementedAgentServiceHandler) CreateVM(context.Context, *connect.Request[v2.CreateVMRequest]) (*connect.Response[v2.CreateVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.CreateVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetVMDetails(context.Context, *connect.Request[v2.GetVMDetailsRequest]) (*connect.Response[v2.GetVMDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.GetVMDetails is not implemented"))
}

func (UnimplementedAgentServiceHandler) UpdateVM(context.Context, *connect.Request[v2.UpdateVMRequest]) (*connect.Response[v2.UpdateVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.UpdateVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) DeleteVM(context.Context, *connect.Request[v2.DeleteVMRequest]) (*connect.Response[v2.DeleteVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.DeleteVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) StartVM(context.Context, *connect.Request[v2.StartVMRequest]) (*connect.Response[v2.StartVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.StartVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) StopVM(context.Context, *connect.Request[v2.StopVMRequest]) (*connect.Response[v2.StopVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.StopVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) ForceStopVM(context.Context, *connect.Request[v2.ForceStopVMRequest]) (*connect.Response[v2.ForceStopVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.ForceStopVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) RebootVM(context.Context, *connect.Request[v2.RebootVMRequest]) (*connect.Response[v2.RebootVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.RebootVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) PauseVM(context.Context, *connect.Request[v2.PauseVMRequest]) (*connect.Response[v2.PauseVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.PauseVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) ResumeVM(context.Context, *connect.Request[v2.ResumeVMRequest]) (*connect.Response[v2.ResumeVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.ResumeVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) InitiateMigration(context.Context, *connect.Request[v2.InitiateMigrationRequest]) (*connect.Response[v2.InitiateMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.InitiateMigration is not implemented"))
}

func (UnimplementedAgentServiceHandler) PrepareForMigration(context.Context, *connect.Request[v2.PrepareForMigrationRequest]) (*connect.Response[v2.PrepareForMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.PrepareForMigration is not implemented"))
}

func (UnimplementedAgentServiceHandler) CreateSnapshot(context.Context, *connect.Request[v2.CreateSnapshotRequest]) (*connect.Response[v2.CreateSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.CreateSnapshot is not implemented"))
}

func (UnimplementedAgentServiceHandler) RevertToSnapshot(context.Context, *connect.Request[v2.RevertToSnapshotRequest]) (*connect.Response[v2.RevertToSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.RevertToSnapshot is not implemented"))
}

func (UnimplementedAgentServiceHandler) DeleteSnapshot(context.Context, *connect.Request[v2.DeleteSnapshotRequest]) (*connect.Response[v2.DeleteSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.DeleteSnapshot is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetTaskStatus(context.Context, *connect.Request[v2.GetTaskStatusRequest]) (*connect.Response[v2.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.GetTaskStatus is not implemented"))
}

func (UnimplementedAgentServiceHandler) CancelTask(context.Context, *connect.Request[v2.CancelTaskRequest]) (*connect.Response[v2.CancelTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.CancelTask is not implemented"))
}

func (UnimplementedAgentServiceHandler) ConfigureNetwork(context.Context, *connect.Request[v2.ConfigureNetworkRequest]) (*connect.Response[v2.ConfigureNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.ConfigureNetwork is not implemented"))
}

func (UnimplementedAgentServiceHandler) ConfigureStorage(context.Context, *connect.Request[v2.ConfigureStorageRequest]) (*connect.Response[v2.ConfigureStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.ConfigureStorage is not implemented"))
}

func (UnimplementedAgentServiceHandler) ConfigureTime(context.Context, *connect.Request[v2.ConfigureTimeRequest]) (*connect.Response[v2.ConfigureTimeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.ConfigureTime is not implemented"))
}

func (UnimplementedAgentServiceHandler) SetMaintenanceMode(context.Context, *connect.Request[v2.SetMaintenanceModeRequest]) (*connect.Response[v2.SetMaintenanceModeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.SetMaintenanceMode is not implemented"))
}

func (UnimplementedAgentServiceHandler) UpdateHost(context.Context, *connect.Request[v2.UpdateHostRequest]) (*connect.Response[v2.UpdateHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.UpdateHost is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetContentLibraryItems(context.Context, *connect.Request[v2.GetContentLibraryItemsRequest]) (*connect.Response[v2.GetContentLibraryItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.GetContentLibraryItems is not implemented"))
}

func (UnimplementedAgentServiceHandler) UploadContentLibraryItem(context.Context, *connect.ClientStream[v2.UploadContentLibraryItemRequest]) (*connect.Response[v2.UploadContentLibraryItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.UploadContentLibraryItem is not implemented"))
}

func (UnimplementedAgentServiceHandler) DeleteContentLibraryItem(context.Context, *connect.Request[v2.DeleteContentLibraryItemRequest]) (*connect.Response[v2.DeleteContentLibraryItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.DeleteContentLibraryItem is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetDatastores(context.Context, *connect.Request[v2.GetDatastoresRequest]) (*connect.Response[v2.GetDatastoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.GetDatastores is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetDatastore(context.Context, *connect.Request[v2.GetDatastoreRequest]) (*connect.Response[v2.GetDatastoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.GetDatastore is not implemented"))
}

func (UnimplementedAgentServiceHandler) CreateDatastore(context.Context, *connect.Request[v2.CreateDatastoreRequest]) (*connect.Response[v2.CreateDatastoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.CreateDatastore is not implemented"))
}

func (UnimplementedAgentServiceHandler) DeleteDatastore(context.Context, *connect.Request[v2.DeleteDatastoreRequest]) (*connect.Response[v2.DeleteDatastoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.DeleteDatastore is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetNetworks(context.Context, *connect.Request[v2.GetNetworksRequest]) (*connect.Response[v2.GetNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.GetNetworks is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetNetwork(context.Context, *connect.Request[v2.GetNetworkRequest]) (*connect.Response[v2.GetNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.GetNetwork is not implemented"))
}

func (UnimplementedAgentServiceHandler) CreateNetwork(context.Context, *connect.Request[v2.CreateNetworkRequest]) (*connect.Response[v2.CreateNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.CreateNetwork is not implemented"))
}

func (UnimplementedAgentServiceHandler) DeleteNetwork(context.Context, *connect.Request[v2.DeleteNetworkRequest]) (*connect.Response[v2.DeleteNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.DeleteNetwork is not implemented"))
}

func (UnimplementedAgentServiceHandler) AttachIso(context.Context, *connect.Request[v2.AttachIsoRequest]) (*connect.Response[v2.AttachIsoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.AttachIso is not implemented"))
}

func (UnimplementedAgentServiceHandler) DetachIso(context.Context, *connect.Request[v2.DetachIsoRequest]) (*connect.Response[v2.DetachIsoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.DetachIso is not implemented"))
}

func (UnimplementedAgentServiceHandler) CloneVmFromTemplate(context.Context, *connect.Request[v2.CloneVmFromTemplateRequest]) (*connect.Response[v2.CloneVmFromTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.agent.v2.AgentService.CloneVmFromTemplate is not implemented"))
}
