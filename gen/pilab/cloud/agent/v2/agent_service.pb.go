// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: pilab/cloud/agent/v2/agent_service.proto

package agentv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a generic task.
type Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                         // e.g., "pending", "running", "success", "failed"
	Progress      float32                `protobuf:"fixed32,3,opt,name=progress,proto3" json:"progress,omitempty"`                   // 0.0 to 1.0, if applicable
	StartTime     int64                  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // Unix timestamp
	EndTime       int64                  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // Unix timestamp
	Error         string                 `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`                           // Error message, if any
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *Task) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Task) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Task) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Represents CPU topology.
type CPUTopology struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockets       uint32                 `protobuf:"varint,1,opt,name=sockets,proto3" json:"sockets,omitempty"`
	Cores         uint32                 `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	Threads       uint32                 `protobuf:"varint,3,opt,name=threads,proto3" json:"threads,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPUTopology) Reset() {
	*x = CPUTopology{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUTopology) ProtoMessage() {}

func (x *CPUTopology) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUTopology.ProtoReflect.Descriptor instead.
func (*CPUTopology) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{1}
}

func (x *CPUTopology) GetSockets() uint32 {
	if x != nil {
		return x.Sockets
	}
	return 0
}

func (x *CPUTopology) GetCores() uint32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CPUTopology) GetThreads() uint32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

// Represents CPU pinning.
type CPUPinning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vcpu          uint32                 `protobuf:"varint,1,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Cpuset        string                 `protobuf:"bytes,2,opt,name=cpuset,proto3" json:"cpuset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPUPinning) Reset() {
	*x = CPUPinning{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUPinning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUPinning) ProtoMessage() {}

func (x *CPUPinning) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUPinning.ProtoReflect.Descriptor instead.
func (*CPUPinning) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{2}
}

func (x *CPUPinning) GetVcpu() uint32 {
	if x != nil {
		return x.Vcpu
	}
	return 0
}

func (x *CPUPinning) GetCpuset() string {
	if x != nil {
		return x.Cpuset
	}
	return ""
}

// Represents NUMA affinity for CPU or memory.
type NUMAAffinity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          uint32                 `protobuf:"varint,1,opt,name=node,proto3" json:"node,omitempty"`
	Cpus          string                 `protobuf:"bytes,2,opt,name=cpus,proto3" json:"cpus,omitempty"`                    // For CPU affinity, e.g., "0-1"
	Memory        string                 `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`                // For memory affinity, e.g., "2048M"
	SizeMb        uint64                 `protobuf:"varint,4,opt,name=size_mb,json=sizeMb,proto3" json:"size_mb,omitempty"` // For memory affinity, indicating size in MB
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NUMAAffinity) Reset() {
	*x = NUMAAffinity{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NUMAAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NUMAAffinity) ProtoMessage() {}

func (x *NUMAAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NUMAAffinity.ProtoReflect.Descriptor instead.
func (*NUMAAffinity) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{3}
}

func (x *NUMAAffinity) GetNode() uint32 {
	if x != nil {
		return x.Node
	}
	return 0
}

func (x *NUMAAffinity) GetCpus() string {
	if x != nil {
		return x.Cpus
	}
	return ""
}

func (x *NUMAAffinity) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *NUMAAffinity) GetSizeMb() uint64 {
	if x != nil {
		return x.SizeMb
	}
	return 0
}

// Represents CPU configuration.
type CPU struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vcpus         uint32                 `protobuf:"varint,1,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	Topology      *CPUTopology           `protobuf:"bytes,2,opt,name=topology,proto3" json:"topology,omitempty"`
	Pinning       []*CPUPinning          `protobuf:"bytes,3,rep,name=pinning,proto3" json:"pinning,omitempty"`
	Mode          string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	FeatureFlags  []string               `protobuf:"bytes,5,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
	NumaAffinity  []*NUMAAffinity        `protobuf:"bytes,6,rep,name=numa_affinity,json=numaAffinity,proto3" json:"numa_affinity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPU) Reset() {
	*x = CPU{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU) ProtoMessage() {}

func (x *CPU) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU.ProtoReflect.Descriptor instead.
func (*CPU) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{4}
}

func (x *CPU) GetVcpus() uint32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *CPU) GetTopology() *CPUTopology {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *CPU) GetPinning() []*CPUPinning {
	if x != nil {
		return x.Pinning
	}
	return nil
}

func (x *CPU) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CPU) GetFeatureFlags() []string {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *CPU) GetNumaAffinity() []*NUMAAffinity {
	if x != nil {
		return x.NumaAffinity
	}
	return nil
}

// Represents memory configuration.
type Memory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllocatedMb   uint64                 `protobuf:"varint,1,opt,name=allocated_mb,json=allocatedMb,proto3" json:"allocated_mb,omitempty"`
	Ballooning    bool                   `protobuf:"varint,2,opt,name=ballooning,proto3" json:"ballooning,omitempty"`
	HugePages     bool                   `protobuf:"varint,3,opt,name=huge_pages,json=hugePages,proto3" json:"huge_pages,omitempty"`
	NumaAffinity  []*NUMAAffinity        `protobuf:"bytes,4,rep,name=numa_affinity,json=numaAffinity,proto3" json:"numa_affinity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Memory) Reset() {
	*x = Memory{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{5}
}

func (x *Memory) GetAllocatedMb() uint64 {
	if x != nil {
		return x.AllocatedMb
	}
	return 0
}

func (x *Memory) GetBallooning() bool {
	if x != nil {
		return x.Ballooning
	}
	return false
}

func (x *Memory) GetHugePages() bool {
	if x != nil {
		return x.HugePages
	}
	return false
}

func (x *Memory) GetNumaAffinity() []*NUMAAffinity {
	if x != nil {
		return x.NumaAffinity
	}
	return nil
}

// Represents QoS settings for disk or network interface.
type QOSSettings struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ReadIops         uint64                 `protobuf:"varint,1,opt,name=read_iops,json=readIops,proto3" json:"read_iops,omitempty"`
	WriteIops        uint64                 `protobuf:"varint,2,opt,name=write_iops,json=writeIops,proto3" json:"write_iops,omitempty"`
	IngressBandwidth string                 `protobuf:"bytes,3,opt,name=ingress_bandwidth,json=ingressBandwidth,proto3" json:"ingress_bandwidth,omitempty"`
	EgressBandwidth  string                 `protobuf:"bytes,4,opt,name=egress_bandwidth,json=egressBandwidth,proto3" json:"egress_bandwidth,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QOSSettings) Reset() {
	*x = QOSSettings{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QOSSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QOSSettings) ProtoMessage() {}

func (x *QOSSettings) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QOSSettings.ProtoReflect.Descriptor instead.
func (*QOSSettings) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{6}
}

func (x *QOSSettings) GetReadIops() uint64 {
	if x != nil {
		return x.ReadIops
	}
	return 0
}

func (x *QOSSettings) GetWriteIops() uint64 {
	if x != nil {
		return x.WriteIops
	}
	return 0
}

func (x *QOSSettings) GetIngressBandwidth() string {
	if x != nil {
		return x.IngressBandwidth
	}
	return ""
}

func (x *QOSSettings) GetEgressBandwidth() string {
	if x != nil {
		return x.EgressBandwidth
	}
	return ""
}

// Represents disk encryption settings.
type DiskEncryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskEncryption) Reset() {
	*x = DiskEncryption{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskEncryption) ProtoMessage() {}

func (x *DiskEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskEncryption.ProtoReflect.Descriptor instead.
func (*DiskEncryption) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{7}
}

func (x *DiskEncryption) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Represents a disk.
type Disk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Datastore     string                 `protobuf:"bytes,2,opt,name=datastore,proto3" json:"datastore,omitempty"`
	Format        string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	SizeGb        uint64                 `protobuf:"varint,4,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Bus           string                 `protobuf:"bytes,5,opt,name=bus,proto3" json:"bus,omitempty"`
	IopsLimit     uint64                 `protobuf:"varint,6,opt,name=iops_limit,json=iopsLimit,proto3" json:"iops_limit,omitempty"`
	QosSettings   *QOSSettings           `protobuf:"bytes,7,opt,name=qos_settings,json=qosSettings,proto3" json:"qos_settings,omitempty"`
	Encryption    *DiskEncryption        `protobuf:"bytes,8,opt,name=encryption,proto3" json:"encryption,omitempty"`
	BackingFile   string                 `protobuf:"bytes,9,opt,name=backing_file,json=backingFile,proto3" json:"backing_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disk) Reset() {
	*x = Disk{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{8}
}

func (x *Disk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Disk) GetDatastore() string {
	if x != nil {
		return x.Datastore
	}
	return ""
}

func (x *Disk) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Disk) GetSizeGb() uint64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *Disk) GetBus() string {
	if x != nil {
		return x.Bus
	}
	return ""
}

func (x *Disk) GetIopsLimit() uint64 {
	if x != nil {
		return x.IopsLimit
	}
	return 0
}

func (x *Disk) GetQosSettings() *QOSSettings {
	if x != nil {
		return x.QosSettings
	}
	return nil
}

func (x *Disk) GetEncryption() *DiskEncryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *Disk) GetBackingFile() string {
	if x != nil {
		return x.BackingFile
	}
	return ""
}

// Represents a storage adapter.
type StorageAdapter struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Controllers    uint32                 `protobuf:"varint,2,opt,name=controllers,proto3" json:"controllers,omitempty"`
	ControllerType string                 `protobuf:"bytes,3,opt,name=controller_type,json=controllerType,proto3" json:"controller_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StorageAdapter) Reset() {
	*x = StorageAdapter{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageAdapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageAdapter) ProtoMessage() {}

func (x *StorageAdapter) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageAdapter.ProtoReflect.Descriptor instead.
func (*StorageAdapter) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{9}
}

func (x *StorageAdapter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StorageAdapter) GetControllers() uint32 {
	if x != nil {
		return x.Controllers
	}
	return 0
}

func (x *StorageAdapter) GetControllerType() string {
	if x != nil {
		return x.ControllerType
	}
	return ""
}

// Represents storage configuration.
type Storage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Disks         []*Disk                `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
	Adapters      []*StorageAdapter      `protobuf:"bytes,2,rep,name=adapters,proto3" json:"adapters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Storage) Reset() {
	*x = Storage{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{10}
}

func (x *Storage) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *Storage) GetAdapters() []*StorageAdapter {
	if x != nil {
		return x.Adapters
	}
	return nil
}

// Represents a network interface.
type NetworkInterface struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VirtualNetwork string                 `protobuf:"bytes,2,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty"`
	MacAddress     string                 `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Model          string                 `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	QosSettings    *QOSSettings           `protobuf:"bytes,5,opt,name=qos_settings,json=qosSettings,proto3" json:"qos_settings,omitempty"`
	PciPassthrough string                 `protobuf:"bytes,6,opt,name=pci_passthrough,json=pciPassthrough,proto3" json:"pci_passthrough,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{11}
}

func (x *NetworkInterface) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkInterface) GetVirtualNetwork() string {
	if x != nil {
		return x.VirtualNetwork
	}
	return ""
}

func (x *NetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterface) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *NetworkInterface) GetQosSettings() *QOSSettings {
	if x != nil {
		return x.QosSettings
	}
	return nil
}

func (x *NetworkInterface) GetPciPassthrough() string {
	if x != nil {
		return x.PciPassthrough
	}
	return ""
}

// Represents network configuration.
type Network struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interfaces    []*NetworkInterface    `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Network) Reset() {
	*x = Network{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{12}
}

func (x *Network) GetInterfaces() []*NetworkInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// Represents BIOS configuration.
type BIOS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	BootOrder     []string               `protobuf:"bytes,2,rep,name=boot_order,json=bootOrder,proto3" json:"boot_order,omitempty"`
	SecureBoot    bool                   `protobuf:"varint,3,opt,name=secure_boot,json=secureBoot,proto3" json:"secure_boot,omitempty"`
	Vtpm          bool                   `protobuf:"varint,4,opt,name=vtpm,proto3" json:"vtpm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BIOS) Reset() {
	*x = BIOS{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BIOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BIOS) ProtoMessage() {}

func (x *BIOS) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BIOS.ProtoReflect.Descriptor instead.
func (*BIOS) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{13}
}

func (x *BIOS) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BIOS) GetBootOrder() []string {
	if x != nil {
		return x.BootOrder
	}
	return nil
}

func (x *BIOS) GetSecureBoot() bool {
	if x != nil {
		return x.SecureBoot
	}
	return false
}

func (x *BIOS) GetVtpm() bool {
	if x != nil {
		return x.Vtpm
	}
	return false
}

// Represents input devices.
type InputDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // e.g. "usb", "ps2"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputDevice) Reset() {
	*x = InputDevice{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDevice) ProtoMessage() {}

func (x *InputDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDevice.ProtoReflect.Descriptor instead.
func (*InputDevice) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{14}
}

func (x *InputDevice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Input struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Keyboard              *InputDevice           `protobuf:"bytes,1,opt,name=keyboard,proto3" json:"keyboard,omitempty"`
	Mouse                 *InputDevice           `protobuf:"bytes,2,opt,name=mouse,proto3" json:"mouse,omitempty"`
	UsbPassthroughDevices []string               `protobuf:"bytes,3,rep,name=usb_passthrough_devices,json=usbPassthroughDevices,proto3" json:"usb_passthrough_devices,omitempty"`
	SerialPorts           []*SerialPort          `protobuf:"bytes,4,rep,name=serial_ports,json=serialPorts,proto3" json:"serial_ports,omitempty"`
	ParallelPorts         []string               `protobuf:"bytes,5,rep,name=parallel_ports,json=parallelPorts,proto3" json:"parallel_ports,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Input) Reset() {
	*x = Input{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{15}
}

func (x *Input) GetKeyboard() *InputDevice {
	if x != nil {
		return x.Keyboard
	}
	return nil
}

func (x *Input) GetMouse() *InputDevice {
	if x != nil {
		return x.Mouse
	}
	return nil
}

func (x *Input) GetUsbPassthroughDevices() []string {
	if x != nil {
		return x.UsbPassthroughDevices
	}
	return nil
}

func (x *Input) GetSerialPorts() []*SerialPort {
	if x != nil {
		return x.SerialPorts
	}
	return nil
}

func (x *Input) GetParallelPorts() []string {
	if x != nil {
		return x.ParallelPorts
	}
	return nil
}

type SerialPort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        string                 `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerialPort) Reset() {
	*x = SerialPort{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerialPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialPort) ProtoMessage() {}

func (x *SerialPort) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialPort.ProtoReflect.Descriptor instead.
func (*SerialPort) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{16}
}

func (x *SerialPort) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

// Represents video configuration.
type Video struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Adapter         string                 `protobuf:"bytes,1,opt,name=adapter,proto3" json:"adapter,omitempty"`
	VramMb          uint32                 `protobuf:"varint,2,opt,name=vram_mb,json=vramMb,proto3" json:"vram_mb,omitempty"`
	Acceleration_3D bool                   `protobuf:"varint,3,opt,name=acceleration_3d,json=acceleration3d,proto3" json:"acceleration_3d,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Video) Reset() {
	*x = Video{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{17}
}

func (x *Video) GetAdapter() string {
	if x != nil {
		return x.Adapter
	}
	return ""
}

func (x *Video) GetVramMb() uint32 {
	if x != nil {
		return x.VramMb
	}
	return 0
}

func (x *Video) GetAcceleration_3D() bool {
	if x != nil {
		return x.Acceleration_3D
	}
	return false
}

// Represents QoS limits for a specific disk.
type DiskQOSLimit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DiskId        string                 `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	ReadIops      uint64                 `protobuf:"varint,2,opt,name=read_iops,json=readIops,proto3" json:"read_iops,omitempty"`
	WriteIops     uint64                 `protobuf:"varint,3,opt,name=write_iops,json=writeIops,proto3" json:"write_iops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskQOSLimit) Reset() {
	*x = DiskQOSLimit{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskQOSLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskQOSLimit) ProtoMessage() {}

func (x *DiskQOSLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskQOSLimit.ProtoReflect.Descriptor instead.
func (*DiskQOSLimit) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{18}
}

func (x *DiskQOSLimit) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *DiskQOSLimit) GetReadIops() uint64 {
	if x != nil {
		return x.ReadIops
	}
	return 0
}

func (x *DiskQOSLimit) GetWriteIops() uint64 {
	if x != nil {
		return x.WriteIops
	}
	return 0
}

// Represents QoS limits for a specific network interface.
type NetworkQOSLimit struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	InterfaceId      string                 `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	IngressBandwidth string                 `protobuf:"bytes,2,opt,name=ingress_bandwidth,json=ingressBandwidth,proto3" json:"ingress_bandwidth,omitempty"`
	EgressBandwidth  string                 `protobuf:"bytes,3,opt,name=egress_bandwidth,json=egressBandwidth,proto3" json:"egress_bandwidth,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetworkQOSLimit) Reset() {
	*x = NetworkQOSLimit{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkQOSLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkQOSLimit) ProtoMessage() {}

func (x *NetworkQOSLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkQOSLimit.ProtoReflect.Descriptor instead.
func (*NetworkQOSLimit) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{19}
}

func (x *NetworkQOSLimit) GetInterfaceId() string {
	if x != nil {
		return x.InterfaceId
	}
	return ""
}

func (x *NetworkQOSLimit) GetIngressBandwidth() string {
	if x != nil {
		return x.IngressBandwidth
	}
	return ""
}

func (x *NetworkQOSLimit) GetEgressBandwidth() string {
	if x != nil {
		return x.EgressBandwidth
	}
	return ""
}

// Represents overall QoS configuration.
type QoS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpuShares     uint32                 `protobuf:"varint,1,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
	MemoryLimitMb uint64                 `protobuf:"varint,2,opt,name=memory_limit_mb,json=memoryLimitMb,proto3" json:"memory_limit_mb,omitempty"`
	DiskLimits    []*DiskQOSLimit        `protobuf:"bytes,3,rep,name=disk_limits,json=diskLimits,proto3" json:"disk_limits,omitempty"`
	NetworkLimits []*NetworkQOSLimit     `protobuf:"bytes,4,rep,name=network_limits,json=networkLimits,proto3" json:"network_limits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QoS) Reset() {
	*x = QoS{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QoS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoS) ProtoMessage() {}

func (x *QoS) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoS.ProtoReflect.Descriptor instead.
func (*QoS) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{20}
}

func (x *QoS) GetCpuShares() uint32 {
	if x != nil {
		return x.CpuShares
	}
	return 0
}

func (x *QoS) GetMemoryLimitMb() uint64 {
	if x != nil {
		return x.MemoryLimitMb
	}
	return 0
}

func (x *QoS) GetDiskLimits() []*DiskQOSLimit {
	if x != nil {
		return x.DiskLimits
	}
	return nil
}

func (x *QoS) GetNetworkLimits() []*NetworkQOSLimit {
	if x != nil {
		return x.NetworkLimits
	}
	return nil
}

// Represents a virtual machine.
type VirtualMachine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	OsType        string                 `protobuf:"bytes,4,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	OsVersion     string                 `protobuf:"bytes,5,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Cpu           *CPU                   `protobuf:"bytes,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        *Memory                `protobuf:"bytes,7,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage       *Storage               `protobuf:"bytes,8,opt,name=storage,proto3" json:"storage,omitempty"`
	Network       *Network               `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	Bios          *BIOS                  `protobuf:"bytes,10,opt,name=bios,proto3" json:"bios,omitempty"`
	Input         *Input                 `protobuf:"bytes,11,opt,name=input,proto3" json:"input,omitempty"`
	Video         *Video                 `protobuf:"bytes,12,opt,name=video,proto3" json:"video,omitempty"`
	Qos           *QoS                   `protobuf:"bytes,13,opt,name=qos,proto3" json:"qos,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualMachine) Reset() {
	*x = VirtualMachine{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachine) ProtoMessage() {}

func (x *VirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachine.ProtoReflect.Descriptor instead.
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{21}
}

func (x *VirtualMachine) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualMachine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualMachine) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *VirtualMachine) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *VirtualMachine) GetCpu() *CPU {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *VirtualMachine) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *VirtualMachine) GetStorage() *Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *VirtualMachine) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *VirtualMachine) GetBios() *BIOS {
	if x != nil {
		return x.Bios
	}
	return nil
}

func (x *VirtualMachine) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *VirtualMachine) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *VirtualMachine) GetQos() *QoS {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *VirtualMachine) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Represents host status metrics.
type HostStatus struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CpuLoad            float32                `protobuf:"fixed32,1,opt,name=cpu_load,json=cpuLoad,proto3" json:"cpu_load,omitempty"`
	MemoryUsageMb      uint64                 `protobuf:"varint,2,opt,name=memory_usage_mb,json=memoryUsageMb,proto3" json:"memory_usage_mb,omitempty"`
	NetworkUtilization float32                `protobuf:"fixed32,3,opt,name=network_utilization,json=networkUtilization,proto3" json:"network_utilization,omitempty"`
	StorageUtilization float32                `protobuf:"fixed32,4,opt,name=storage_utilization,json=storageUtilization,proto3" json:"storage_utilization,omitempty"`
	Uptime             uint64                 `protobuf:"varint,5,opt,name=uptime,proto3" json:"uptime,omitempty"` // Seconds
	Metadata           map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HostStatus) Reset() {
	*x = HostStatus{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostStatus) ProtoMessage() {}

func (x *HostStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostStatus.ProtoReflect.Descriptor instead.
func (*HostStatus) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{22}
}

func (x *HostStatus) GetCpuLoad() float32 {
	if x != nil {
		return x.CpuLoad
	}
	return 0
}

func (x *HostStatus) GetMemoryUsageMb() uint64 {
	if x != nil {
		return x.MemoryUsageMb
	}
	return 0
}

func (x *HostStatus) GetNetworkUtilization() float32 {
	if x != nil {
		return x.NetworkUtilization
	}
	return 0
}

func (x *HostStatus) GetStorageUtilization() float32 {
	if x != nil {
		return x.StorageUtilization
	}
	return 0
}

func (x *HostStatus) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *HostStatus) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CloneVMImageFromMinioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinioBucket   string                 `protobuf:"bytes,1,opt,name=minio_bucket,json=minioBucket,proto3" json:"minio_bucket,omitempty"`
	MinioObject   string                 `protobuf:"bytes,2,opt,name=minio_object,json=minioObject,proto3" json:"minio_object,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneVMImageFromMinioRequest) Reset() {
	*x = CloneVMImageFromMinioRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneVMImageFromMinioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneVMImageFromMinioRequest) ProtoMessage() {}

func (x *CloneVMImageFromMinioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneVMImageFromMinioRequest.ProtoReflect.Descriptor instead.
func (*CloneVMImageFromMinioRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{23}
}

func (x *CloneVMImageFromMinioRequest) GetMinioBucket() string {
	if x != nil {
		return x.MinioBucket
	}
	return ""
}

func (x *CloneVMImageFromMinioRequest) GetMinioObject() string {
	if x != nil {
		return x.MinioObject
	}
	return ""
}

type CloneVMImageFromMinioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneVMImageFromMinioResponse) Reset() {
	*x = CloneVMImageFromMinioResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneVMImageFromMinioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneVMImageFromMinioResponse) ProtoMessage() {}

func (x *CloneVMImageFromMinioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneVMImageFromMinioResponse.ProtoReflect.Descriptor instead.
func (*CloneVMImageFromMinioResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{24}
}

func (x *CloneVMImageFromMinioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Host Management Messages
type RegisterHostRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DirectorAddress string                 `protobuf:"bytes,1,opt,name=director_address,json=directorAddress,proto3" json:"director_address,omitempty"`
	IpAddress       string                 `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Username        string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"` // Or other authentication credentials
	Password        string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Metadata        map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RegisterHostRequest) Reset() {
	*x = RegisterHostRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHostRequest) ProtoMessage() {}

func (x *RegisterHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHostRequest.ProtoReflect.Descriptor instead.
func (*RegisterHostRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{25}
}

func (x *RegisterHostRequest) GetDirectorAddress() string {
	if x != nil {
		return x.DirectorAddress
	}
	return ""
}

func (x *RegisterHostRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *RegisterHostRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterHostRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterHostRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RegisterHostResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AgentWelcome  string                 `protobuf:"bytes,3,opt,name=agent_welcome,json=agentWelcome,proto3" json:"agent_welcome,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterHostResponse) Reset() {
	*x = RegisterHostResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHostResponse) ProtoMessage() {}

func (x *RegisterHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHostResponse.ProtoReflect.Descriptor instead.
func (*RegisterHostResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{26}
}

func (x *RegisterHostResponse) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *RegisterHostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegisterHostResponse) GetAgentWelcome() string {
	if x != nil {
		return x.AgentWelcome
	}
	return ""
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{27}
}

func (x *HeartbeatRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // "OK", "MAINTENANCE", etc.
	Tasks         []*Task                `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`   // New tasks assigned by the Orchestrator
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{28}
}

func (x *HeartbeatResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HeartbeatResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetHostStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHostStatusRequest) Reset() {
	*x = GetHostStatusRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHostStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostStatusRequest) ProtoMessage() {}

func (x *GetHostStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostStatusRequest.ProtoReflect.Descriptor instead.
func (*GetHostStatusRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetHostStatusRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

// VM Management Messages
type CreateVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vm            *VirtualMachine        `protobuf:"bytes,1,opt,name=vm,proto3" json:"vm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVMRequest) Reset() {
	*x = CreateVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest) ProtoMessage() {}

func (x *CreateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest.ProtoReflect.Descriptor instead.
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{30}
}

func (x *CreateVMRequest) GetVm() *VirtualMachine {
	if x != nil {
		return x.Vm
	}
	return nil
}

type CreateVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVMResponse) Reset() {
	*x = CreateVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMResponse) ProtoMessage() {}

func (x *CreateVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMResponse.ProtoReflect.Descriptor instead.
func (*CreateVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{31}
}

func (x *CreateVMResponse) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *CreateVMResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetVMDetailsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVMDetailsRequest) Reset() {
	*x = GetVMDetailsRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVMDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMDetailsRequest) ProtoMessage() {}

func (x *GetVMDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetVMDetailsRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetVMDetailsRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type GetVMDetailsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vm            *VirtualMachine        `protobuf:"bytes,1,opt,name=vm,proto3" json:"vm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVMDetailsResponse) Reset() {
	*x = GetVMDetailsResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVMDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMDetailsResponse) ProtoMessage() {}

func (x *GetVMDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetVMDetailsResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetVMDetailsResponse) GetVm() *VirtualMachine {
	if x != nil {
		return x.Vm
	}
	return nil
}

type UpdateVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	VmObject      *VirtualMachine        `protobuf:"bytes,2,opt,name=vm_object,json=vmObject,proto3" json:"vm_object,omitempty"` // Update the whole VM object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVMRequest) Reset() {
	*x = UpdateVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMRequest) ProtoMessage() {}

func (x *UpdateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMRequest.ProtoReflect.Descriptor instead.
func (*UpdateVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *UpdateVMRequest) GetVmObject() *VirtualMachine {
	if x != nil {
		return x.VmObject
	}
	return nil
}

type UpdateVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVMResponse) Reset() {
	*x = UpdateVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMResponse) ProtoMessage() {}

func (x *UpdateVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMResponse.ProtoReflect.Descriptor instead.
func (*UpdateVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateVMResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVMRequest) Reset() {
	*x = DeleteVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVMRequest) ProtoMessage() {}

func (x *DeleteVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVMRequest.ProtoReflect.Descriptor instead.
func (*DeleteVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type DeleteVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVMResponse) Reset() {
	*x = DeleteVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVMResponse) ProtoMessage() {}

func (x *DeleteVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVMResponse.ProtoReflect.Descriptor instead.
func (*DeleteVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteVMResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type StartVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartVMRequest) Reset() {
	*x = StartVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMRequest) ProtoMessage() {}

func (x *StartVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMRequest.ProtoReflect.Descriptor instead.
func (*StartVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{38}
}

func (x *StartVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type StartVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartVMResponse) Reset() {
	*x = StartVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMResponse) ProtoMessage() {}

func (x *StartVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMResponse.ProtoReflect.Descriptor instead.
func (*StartVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{39}
}

func (x *StartVMResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type StopVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopVMRequest) Reset() {
	*x = StopVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMRequest) ProtoMessage() {}

func (x *StopVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMRequest.ProtoReflect.Descriptor instead.
func (*StopVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{40}
}

func (x *StopVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type StopVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopVMResponse) Reset() {
	*x = StopVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMResponse) ProtoMessage() {}

func (x *StopVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMResponse.ProtoReflect.Descriptor instead.
func (*StopVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{41}
}

func (x *StopVMResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type ForceStopVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForceStopVMRequest) Reset() {
	*x = ForceStopVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceStopVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceStopVMRequest) ProtoMessage() {}

func (x *ForceStopVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceStopVMRequest.ProtoReflect.Descriptor instead.
func (*ForceStopVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{42}
}

func (x *ForceStopVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type ForceStopVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForceStopVMResponse) Reset() {
	*x = ForceStopVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceStopVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceStopVMResponse) ProtoMessage() {}

func (x *ForceStopVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceStopVMResponse.ProtoReflect.Descriptor instead.
func (*ForceStopVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{43}
}

func (x *ForceStopVMResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type RebootVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebootVMRequest) Reset() {
	*x = RebootVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebootVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootVMRequest) ProtoMessage() {}

func (x *RebootVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootVMRequest.ProtoReflect.Descriptor instead.
func (*RebootVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{44}
}

func (x *RebootVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type RebootVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebootVMResponse) Reset() {
	*x = RebootVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebootVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootVMResponse) ProtoMessage() {}

func (x *RebootVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootVMResponse.ProtoReflect.Descriptor instead.
func (*RebootVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{45}
}

func (x *RebootVMResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type PauseVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseVMRequest) Reset() {
	*x = PauseVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseVMRequest) ProtoMessage() {}

func (x *PauseVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseVMRequest.ProtoReflect.Descriptor instead.
func (*PauseVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{46}
}

func (x *PauseVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type PauseVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseVMResponse) Reset() {
	*x = PauseVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseVMResponse) ProtoMessage() {}

func (x *PauseVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseVMResponse.ProtoReflect.Descriptor instead.
func (*PauseVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{47}
}

func (x *PauseVMResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type ResumeVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeVMRequest) Reset() {
	*x = ResumeVMRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVMRequest) ProtoMessage() {}

func (x *ResumeVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVMRequest.ProtoReflect.Descriptor instead.
func (*ResumeVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{48}
}

func (x *ResumeVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type ResumeVMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeVMResponse) Reset() {
	*x = ResumeVMResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVMResponse) ProtoMessage() {}

func (x *ResumeVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVMResponse.ProtoReflect.Descriptor instead.
func (*ResumeVMResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{49}
}

func (x *ResumeVMResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type InitiateMigrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	TargetHost    string                 `protobuf:"bytes,2,opt,name=target_host,json=targetHost,proto3" json:"target_host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateMigrationRequest) Reset() {
	*x = InitiateMigrationRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateMigrationRequest) ProtoMessage() {}

func (x *InitiateMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateMigrationRequest.ProtoReflect.Descriptor instead.
func (*InitiateMigrationRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{50}
}

func (x *InitiateMigrationRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *InitiateMigrationRequest) GetTargetHost() string {
	if x != nil {
		return x.TargetHost
	}
	return ""
}

type InitiateMigrationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateMigrationResponse) Reset() {
	*x = InitiateMigrationResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateMigrationResponse) ProtoMessage() {}

func (x *InitiateMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateMigrationResponse.ProtoReflect.Descriptor instead.
func (*InitiateMigrationResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{51}
}

func (x *InitiateMigrationResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type PrepareForMigrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	SourceHost    string                 `protobuf:"bytes,2,opt,name=source_host,json=sourceHost,proto3" json:"source_host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareForMigrationRequest) Reset() {
	*x = PrepareForMigrationRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareForMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareForMigrationRequest) ProtoMessage() {}

func (x *PrepareForMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareForMigrationRequest.ProtoReflect.Descriptor instead.
func (*PrepareForMigrationRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{52}
}

func (x *PrepareForMigrationRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *PrepareForMigrationRequest) GetSourceHost() string {
	if x != nil {
		return x.SourceHost
	}
	return ""
}

type PrepareForMigrationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareForMigrationResponse) Reset() {
	*x = PrepareForMigrationResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareForMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareForMigrationResponse) ProtoMessage() {}

func (x *PrepareForMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareForMigrationResponse.ProtoReflect.Descriptor instead.
func (*PrepareForMigrationResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{53}
}

func (x *PrepareForMigrationResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type CreateSnapshotRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	SnapshotName  string                 `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSnapshotRequest) Reset() {
	*x = CreateSnapshotRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotRequest) ProtoMessage() {}

func (x *CreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{54}
}

func (x *CreateSnapshotRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *CreateSnapshotRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *CreateSnapshotRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateSnapshotResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SnapshotId    string                 `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSnapshotResponse) Reset() {
	*x = CreateSnapshotResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotResponse) ProtoMessage() {}

func (x *CreateSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{55}
}

func (x *CreateSnapshotResponse) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *CreateSnapshotResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RevertToSnapshotRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	SnapshotId    string                 `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertToSnapshotRequest) Reset() {
	*x = RevertToSnapshotRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertToSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertToSnapshotRequest) ProtoMessage() {}

func (x *RevertToSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertToSnapshotRequest.ProtoReflect.Descriptor instead.
func (*RevertToSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{56}
}

func (x *RevertToSnapshotRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *RevertToSnapshotRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

type RevertToSnapshotResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertToSnapshotResponse) Reset() {
	*x = RevertToSnapshotResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertToSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertToSnapshotResponse) ProtoMessage() {}

func (x *RevertToSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertToSnapshotResponse.ProtoReflect.Descriptor instead.
func (*RevertToSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{57}
}

func (x *RevertToSnapshotResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteSnapshotRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	SnapshotId    string                 `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSnapshotRequest) Reset() {
	*x = DeleteSnapshotRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSnapshotRequest) ProtoMessage() {}

func (x *DeleteSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteSnapshotRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *DeleteSnapshotRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

type DeleteSnapshotResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSnapshotResponse) Reset() {
	*x = DeleteSnapshotResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSnapshotResponse) ProtoMessage() {}

func (x *DeleteSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteSnapshotResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

// Task Management Messages
type GetTaskStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStatusRequest) Reset() {
	*x = GetTaskStatusRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStatusRequest) ProtoMessage() {}

func (x *GetTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{60}
}

func (x *GetTaskStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type CancelTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskRequest) Reset() {
	*x = CancelTaskRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskRequest) ProtoMessage() {}

func (x *CancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{61}
}

func (x *CancelTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type CancelTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskResponse) Reset() {
	*x = CancelTaskResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskResponse) ProtoMessage() {}

func (x *CancelTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskResponse.ProtoReflect.Descriptor instead.
func (*CancelTaskResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{62}
}

func (x *CancelTaskResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

// Configuration Management Messages
type ConfigureNetworkRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	HostId string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// ... network configuration details (e.g., enable/disable interfaces, OVS
	// settings)
	//
	// Types that are valid to be assigned to ConfigType:
	//
	//	*ConfigureNetworkRequest_NetworkInterface
	//	*ConfigureNetworkRequest_OvsConfig
	ConfigType    isConfigureNetworkRequest_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureNetworkRequest) Reset() {
	*x = ConfigureNetworkRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureNetworkRequest) ProtoMessage() {}

func (x *ConfigureNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureNetworkRequest.ProtoReflect.Descriptor instead.
func (*ConfigureNetworkRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{63}
}

func (x *ConfigureNetworkRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ConfigureNetworkRequest) GetConfigType() isConfigureNetworkRequest_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *ConfigureNetworkRequest) GetNetworkInterface() *NetworkInterface {
	if x != nil {
		if x, ok := x.ConfigType.(*ConfigureNetworkRequest_NetworkInterface); ok {
			return x.NetworkInterface
		}
	}
	return nil
}

func (x *ConfigureNetworkRequest) GetOvsConfig() string {
	if x != nil {
		if x, ok := x.ConfigType.(*ConfigureNetworkRequest_OvsConfig); ok {
			return x.OvsConfig
		}
	}
	return ""
}

type isConfigureNetworkRequest_ConfigType interface {
	isConfigureNetworkRequest_ConfigType()
}

type ConfigureNetworkRequest_NetworkInterface struct {
	NetworkInterface *NetworkInterface `protobuf:"bytes,2,opt,name=network_interface,json=networkInterface,proto3,oneof"`
}

type ConfigureNetworkRequest_OvsConfig struct {
	OvsConfig string `protobuf:"bytes,3,opt,name=ovs_config,json=ovsConfig,proto3,oneof"` // other network-specific config
}

func (*ConfigureNetworkRequest_NetworkInterface) isConfigureNetworkRequest_ConfigType() {}

func (*ConfigureNetworkRequest_OvsConfig) isConfigureNetworkRequest_ConfigType() {}

type ConfigureNetworkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureNetworkResponse) Reset() {
	*x = ConfigureNetworkResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureNetworkResponse) ProtoMessage() {}

func (x *ConfigureNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureNetworkResponse.ProtoReflect.Descriptor instead.
func (*ConfigureNetworkResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{64}
}

func (x *ConfigureNetworkResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type ConfigureStorageRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	HostId string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// ... storage configuration details (e.g., LVM, NFS, iSCSI)
	//
	// Types that are valid to be assigned to ConfigType:
	//
	//	*ConfigureStorageRequest_LvmVolume
	//	*ConfigureStorageRequest_NfsShare
	//	*ConfigureStorageRequest_IscsiTarget
	ConfigType    isConfigureStorageRequest_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureStorageRequest) Reset() {
	*x = ConfigureStorageRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureStorageRequest) ProtoMessage() {}

func (x *ConfigureStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureStorageRequest.ProtoReflect.Descriptor instead.
func (*ConfigureStorageRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{65}
}

func (x *ConfigureStorageRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ConfigureStorageRequest) GetConfigType() isConfigureStorageRequest_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *ConfigureStorageRequest) GetLvmVolume() *LVMVolume {
	if x != nil {
		if x, ok := x.ConfigType.(*ConfigureStorageRequest_LvmVolume); ok {
			return x.LvmVolume
		}
	}
	return nil
}

func (x *ConfigureStorageRequest) GetNfsShare() *NFSShare {
	if x != nil {
		if x, ok := x.ConfigType.(*ConfigureStorageRequest_NfsShare); ok {
			return x.NfsShare
		}
	}
	return nil
}

func (x *ConfigureStorageRequest) GetIscsiTarget() *ISCSITarget {
	if x != nil {
		if x, ok := x.ConfigType.(*ConfigureStorageRequest_IscsiTarget); ok {
			return x.IscsiTarget
		}
	}
	return nil
}

type isConfigureStorageRequest_ConfigType interface {
	isConfigureStorageRequest_ConfigType()
}

type ConfigureStorageRequest_LvmVolume struct {
	LvmVolume *LVMVolume `protobuf:"bytes,2,opt,name=lvm_volume,json=lvmVolume,proto3,oneof"`
}

type ConfigureStorageRequest_NfsShare struct {
	NfsShare *NFSShare `protobuf:"bytes,3,opt,name=nfs_share,json=nfsShare,proto3,oneof"`
}

type ConfigureStorageRequest_IscsiTarget struct {
	IscsiTarget *ISCSITarget `protobuf:"bytes,4,opt,name=iscsi_target,json=iscsiTarget,proto3,oneof"`
}

func (*ConfigureStorageRequest_LvmVolume) isConfigureStorageRequest_ConfigType() {}

func (*ConfigureStorageRequest_NfsShare) isConfigureStorageRequest_ConfigType() {}

func (*ConfigureStorageRequest_IscsiTarget) isConfigureStorageRequest_ConfigType() {}

type ConfigureStorageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureStorageResponse) Reset() {
	*x = ConfigureStorageResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureStorageResponse) ProtoMessage() {}

func (x *ConfigureStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureStorageResponse.ProtoReflect.Descriptor instead.
func (*ConfigureStorageResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{66}
}

func (x *ConfigureStorageResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type ConfigureTimeRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	HostId string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// ... time configuration details (e.g., NTP servers, timezone)
	//
	// Types that are valid to be assigned to ConfigType:
	//
	//	*ConfigureTimeRequest_NtpServer
	//	*ConfigureTimeRequest_Timezone
	ConfigType    isConfigureTimeRequest_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureTimeRequest) Reset() {
	*x = ConfigureTimeRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureTimeRequest) ProtoMessage() {}

func (x *ConfigureTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureTimeRequest.ProtoReflect.Descriptor instead.
func (*ConfigureTimeRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{67}
}

func (x *ConfigureTimeRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ConfigureTimeRequest) GetConfigType() isConfigureTimeRequest_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *ConfigureTimeRequest) GetNtpServer() string {
	if x != nil {
		if x, ok := x.ConfigType.(*ConfigureTimeRequest_NtpServer); ok {
			return x.NtpServer
		}
	}
	return ""
}

func (x *ConfigureTimeRequest) GetTimezone() string {
	if x != nil {
		if x, ok := x.ConfigType.(*ConfigureTimeRequest_Timezone); ok {
			return x.Timezone
		}
	}
	return ""
}

type isConfigureTimeRequest_ConfigType interface {
	isConfigureTimeRequest_ConfigType()
}

type ConfigureTimeRequest_NtpServer struct {
	NtpServer string `protobuf:"bytes,2,opt,name=ntp_server,json=ntpServer,proto3,oneof"`
}

type ConfigureTimeRequest_Timezone struct {
	Timezone string `protobuf:"bytes,3,opt,name=timezone,proto3,oneof"`
}

func (*ConfigureTimeRequest_NtpServer) isConfigureTimeRequest_ConfigType() {}

func (*ConfigureTimeRequest_Timezone) isConfigureTimeRequest_ConfigType() {}

type ConfigureTimeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureTimeResponse) Reset() {
	*x = ConfigureTimeResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureTimeResponse) ProtoMessage() {}

func (x *ConfigureTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureTimeResponse.ProtoReflect.Descriptor instead.
func (*ConfigureTimeResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{68}
}

func (x *ConfigureTimeResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type SetMaintenanceModeRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	HostId           string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	EnterMaintenance bool                   `protobuf:"varint,2,opt,name=enter_maintenance,json=enterMaintenance,proto3" json:"enter_maintenance,omitempty"` // true to enter, false to exit
	EvacuateVms      bool                   `protobuf:"varint,3,opt,name=evacuate_vms,json=evacuateVms,proto3" json:"evacuate_vms,omitempty"`                // Whether to evacuate VMs before entering maintenance
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SetMaintenanceModeRequest) Reset() {
	*x = SetMaintenanceModeRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMaintenanceModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMaintenanceModeRequest) ProtoMessage() {}

func (x *SetMaintenanceModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMaintenanceModeRequest.ProtoReflect.Descriptor instead.
func (*SetMaintenanceModeRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{69}
}

func (x *SetMaintenanceModeRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *SetMaintenanceModeRequest) GetEnterMaintenance() bool {
	if x != nil {
		return x.EnterMaintenance
	}
	return false
}

func (x *SetMaintenanceModeRequest) GetEvacuateVms() bool {
	if x != nil {
		return x.EvacuateVms
	}
	return false
}

type SetMaintenanceModeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetMaintenanceModeResponse) Reset() {
	*x = SetMaintenanceModeResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMaintenanceModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMaintenanceModeResponse) ProtoMessage() {}

func (x *SetMaintenanceModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMaintenanceModeResponse.ProtoReflect.Descriptor instead.
func (*SetMaintenanceModeResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{70}
}

func (x *SetMaintenanceModeResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateHostRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHostRequest) Reset() {
	*x = UpdateHostRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostRequest) ProtoMessage() {}

func (x *UpdateHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostRequest.ProtoReflect.Descriptor instead.
func (*UpdateHostRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateHostRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type UpdateHostResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *emptypb.Empty         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHostResponse) Reset() {
	*x = UpdateHostResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostResponse) ProtoMessage() {}

func (x *UpdateHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostResponse.ProtoReflect.Descriptor instead.
func (*UpdateHostResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateHostResponse) GetMessage() *emptypb.Empty {
	if x != nil {
		return x.Message
	}
	return nil
}

// Additional messages for config types
type LVMVolume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VgName        string                 `protobuf:"bytes,1,opt,name=vg_name,json=vgName,proto3" json:"vg_name,omitempty"`
	LvName        string                 `protobuf:"bytes,2,opt,name=lv_name,json=lvName,proto3" json:"lv_name,omitempty"`
	Size          string                 `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"` // e.g., "10G"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LVMVolume) Reset() {
	*x = LVMVolume{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LVMVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LVMVolume) ProtoMessage() {}

func (x *LVMVolume) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LVMVolume.ProtoReflect.Descriptor instead.
func (*LVMVolume) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{73}
}

func (x *LVMVolume) GetVgName() string {
	if x != nil {
		return x.VgName
	}
	return ""
}

func (x *LVMVolume) GetLvName() string {
	if x != nil {
		return x.LvName
	}
	return ""
}

func (x *LVMVolume) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type NFSShare struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        string                 `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	MountPoint    string                 `protobuf:"bytes,3,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"` // ... other NFS properties
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NFSShare) Reset() {
	*x = NFSShare{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NFSShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFSShare) ProtoMessage() {}

func (x *NFSShare) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFSShare.ProtoReflect.Descriptor instead.
func (*NFSShare) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{74}
}

func (x *NFSShare) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *NFSShare) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *NFSShare) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

type ISCSITarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Portal        string                 `protobuf:"bytes,1,opt,name=portal,proto3" json:"portal,omitempty"`
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Lun           string                 `protobuf:"bytes,3,opt,name=lun,proto3" json:"lun,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ISCSITarget) Reset() {
	*x = ISCSITarget{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ISCSITarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISCSITarget) ProtoMessage() {}

func (x *ISCSITarget) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISCSITarget.ProtoReflect.Descriptor instead.
func (*ISCSITarget) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{75}
}

func (x *ISCSITarget) GetPortal() string {
	if x != nil {
		return x.Portal
	}
	return ""
}

func (x *ISCSITarget) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ISCSITarget) GetLun() string {
	if x != nil {
		return x.Lun
	}
	return ""
}

// Content Library Management
type GetContentLibraryItemsRequest struct {
	state  protoimpl.MessageState                `protogen:"open.v1"`
	Filter *GetContentLibraryItemsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Pagination (optional).
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContentLibraryItemsRequest) Reset() {
	*x = GetContentLibraryItemsRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContentLibraryItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentLibraryItemsRequest) ProtoMessage() {}

func (x *GetContentLibraryItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentLibraryItemsRequest.ProtoReflect.Descriptor instead.
func (*GetContentLibraryItemsRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{76}
}

func (x *GetContentLibraryItemsRequest) GetFilter() *GetContentLibraryItemsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetContentLibraryItemsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContentLibraryItemsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetContentLibraryItemsResponse struct {
	state protoimpl.MessageState                               `protogen:"open.v1"`
	Items []*GetContentLibraryItemsResponse_ContentLibraryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Pagination (optional).
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContentLibraryItemsResponse) Reset() {
	*x = GetContentLibraryItemsResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContentLibraryItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentLibraryItemsResponse) ProtoMessage() {}

func (x *GetContentLibraryItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentLibraryItemsResponse.ProtoReflect.Descriptor instead.
func (*GetContentLibraryItemsResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{77}
}

func (x *GetContentLibraryItemsResponse) GetItems() []*GetContentLibraryItemsResponse_ContentLibraryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetContentLibraryItemsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UploadContentLibraryItemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*UploadContentLibraryItemRequest_Metadata
	//	*UploadContentLibraryItemRequest_ChunkData
	Request       isUploadContentLibraryItemRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadContentLibraryItemRequest) Reset() {
	*x = UploadContentLibraryItemRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadContentLibraryItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadContentLibraryItemRequest) ProtoMessage() {}

func (x *UploadContentLibraryItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadContentLibraryItemRequest.ProtoReflect.Descriptor instead.
func (*UploadContentLibraryItemRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{78}
}

func (x *UploadContentLibraryItemRequest) GetRequest() isUploadContentLibraryItemRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *UploadContentLibraryItemRequest) GetMetadata() *ContentLibraryItemInfo {
	if x != nil {
		if x, ok := x.Request.(*UploadContentLibraryItemRequest_Metadata); ok {
			return x.Metadata
		}
	}
	return nil
}

func (x *UploadContentLibraryItemRequest) GetChunkData() []byte {
	if x != nil {
		if x, ok := x.Request.(*UploadContentLibraryItemRequest_ChunkData); ok {
			return x.ChunkData
		}
	}
	return nil
}

type isUploadContentLibraryItemRequest_Request interface {
	isUploadContentLibraryItemRequest_Request()
}

type UploadContentLibraryItemRequest_Metadata struct {
	Metadata *ContentLibraryItemInfo `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type UploadContentLibraryItemRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*UploadContentLibraryItemRequest_Metadata) isUploadContentLibraryItemRequest_Request() {}

func (*UploadContentLibraryItemRequest_ChunkData) isUploadContentLibraryItemRequest_Request() {}

type ContentLibraryItemInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // "iso", "template"
	Tags          map[string]string      `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContentLibraryItemInfo) Reset() {
	*x = ContentLibraryItemInfo{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentLibraryItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentLibraryItemInfo) ProtoMessage() {}

func (x *ContentLibraryItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentLibraryItemInfo.ProtoReflect.Descriptor instead.
func (*ContentLibraryItemInfo) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{79}
}

func (x *ContentLibraryItemInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContentLibraryItemInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContentLibraryItemInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UploadContentLibraryItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // Unique identifier of the uploaded item.
	Checksum      string                 `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"` // Checksum of the uploaded item.
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadContentLibraryItemResponse) Reset() {
	*x = UploadContentLibraryItemResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadContentLibraryItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadContentLibraryItemResponse) ProtoMessage() {}

func (x *UploadContentLibraryItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadContentLibraryItemResponse.ProtoReflect.Descriptor instead.
func (*UploadContentLibraryItemResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{80}
}

func (x *UploadContentLibraryItemResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadContentLibraryItemResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *UploadContentLibraryItemResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteContentLibraryItemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the item to delete.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteContentLibraryItemRequest) Reset() {
	*x = DeleteContentLibraryItemRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteContentLibraryItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContentLibraryItemRequest) ProtoMessage() {}

func (x *DeleteContentLibraryItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContentLibraryItemRequest.ProtoReflect.Descriptor instead.
func (*DeleteContentLibraryItemRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteContentLibraryItemRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteContentLibraryItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteContentLibraryItemResponse) Reset() {
	*x = DeleteContentLibraryItemResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteContentLibraryItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContentLibraryItemResponse) ProtoMessage() {}

func (x *DeleteContentLibraryItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContentLibraryItemResponse.ProtoReflect.Descriptor instead.
func (*DeleteContentLibraryItemResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{82}
}

func (x *DeleteContentLibraryItemResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetDatastoresRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pagination (optional).
	PageSize      int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDatastoresRequest) Reset() {
	*x = GetDatastoresRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatastoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatastoresRequest) ProtoMessage() {}

func (x *GetDatastoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatastoresRequest.ProtoReflect.Descriptor instead.
func (*GetDatastoresRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{83}
}

func (x *GetDatastoresRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDatastoresRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetDatastoresResponse struct {
	state      protoimpl.MessageState             `protogen:"open.v1"`
	Datastores []*GetDatastoresResponse_Datastore `protobuf:"bytes,1,rep,name=datastores,proto3" json:"datastores,omitempty"`
	// Pagination (optional).
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDatastoresResponse) Reset() {
	*x = GetDatastoresResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatastoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatastoresResponse) ProtoMessage() {}

func (x *GetDatastoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatastoresResponse.ProtoReflect.Descriptor instead.
func (*GetDatastoresResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{84}
}

func (x *GetDatastoresResponse) GetDatastores() []*GetDatastoresResponse_Datastore {
	if x != nil {
		return x.Datastores
	}
	return nil
}

func (x *GetDatastoresResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetDatastoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the datastore.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDatastoreRequest) Reset() {
	*x = GetDatastoreRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatastoreRequest) ProtoMessage() {}

func (x *GetDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatastoreRequest.ProtoReflect.Descriptor instead.
func (*GetDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{85}
}

func (x *GetDatastoreRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDatastoreResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Datastore     *GetDatastoreResponse_Datastore `protobuf:"bytes,1,opt,name=datastore,proto3" json:"datastore,omitempty"`
	Error         *Error                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDatastoreResponse) Reset() {
	*x = GetDatastoreResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatastoreResponse) ProtoMessage() {}

func (x *GetDatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatastoreResponse.ProtoReflect.Descriptor instead.
func (*GetDatastoreResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{86}
}

func (x *GetDatastoreResponse) GetDatastore() *GetDatastoreResponse_Datastore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

func (x *GetDatastoreResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateDatastoreRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // "lvm", "nfs", "directory"
	// Connection details (e.g., server address, path for NFS, device path
	ConnectionInfo map[string]string `protobuf:"bytes,3,rep,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateDatastoreRequest) Reset() {
	*x = CreateDatastoreRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatastoreRequest) ProtoMessage() {}

func (x *CreateDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatastoreRequest.ProtoReflect.Descriptor instead.
func (*CreateDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{87}
}

func (x *CreateDatastoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDatastoreRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateDatastoreRequest) GetConnectionInfo() map[string]string {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

type CreateDatastoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the created datastore.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDatastoreResponse) Reset() {
	*x = CreateDatastoreResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatastoreResponse) ProtoMessage() {}

func (x *CreateDatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatastoreResponse.ProtoReflect.Descriptor instead.
func (*CreateDatastoreResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{88}
}

func (x *CreateDatastoreResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateDatastoreResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteDatastoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the datastore to delete.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDatastoreRequest) Reset() {
	*x = DeleteDatastoreRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatastoreRequest) ProtoMessage() {}

func (x *DeleteDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatastoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{89}
}

func (x *DeleteDatastoreRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDatastoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDatastoreResponse) Reset() {
	*x = DeleteDatastoreResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatastoreResponse) ProtoMessage() {}

func (x *DeleteDatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatastoreResponse.ProtoReflect.Descriptor instead.
func (*DeleteDatastoreResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteDatastoreResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetNetworksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pagination (optional).
	PageSize      int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworksRequest) Reset() {
	*x = GetNetworksRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworksRequest) ProtoMessage() {}

func (x *GetNetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworksRequest.ProtoReflect.Descriptor instead.
func (*GetNetworksRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{91}
}

func (x *GetNetworksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetNetworksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type NetworkDefinition struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the network.
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type           string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                                                                     // "bridge", "ovs"
	BridgeName     string                 `protobuf:"bytes,4,opt,name=bridge_name,json=bridgeName,proto3" json:"bridge_name,omitempty"`                                                                                       // Name of the bridge device (if applicable).
	ConnectionInfo map[string]string      `protobuf:"bytes,5,rep,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // For example: DHCP ranges, etc
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkDefinition) Reset() {
	*x = NetworkDefinition{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDefinition) ProtoMessage() {}

func (x *NetworkDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDefinition.ProtoReflect.Descriptor instead.
func (*NetworkDefinition) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{92}
}

func (x *NetworkDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkDefinition) GetBridgeName() string {
	if x != nil {
		return x.BridgeName
	}
	return ""
}

func (x *NetworkDefinition) GetConnectionInfo() map[string]string {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

type GetNetworksResponse struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Networks []*NetworkDefinition   `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// Pagination (optional).
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworksResponse) Reset() {
	*x = GetNetworksResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworksResponse) ProtoMessage() {}

func (x *GetNetworksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworksResponse.ProtoReflect.Descriptor instead.
func (*GetNetworksResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{93}
}

func (x *GetNetworksResponse) GetNetworks() []*NetworkDefinition {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *GetNetworksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the network.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkRequest) Reset() {
	*x = GetNetworkRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkRequest) ProtoMessage() {}

func (x *GetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{94}
}

func (x *GetNetworkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetNetworkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       *NetworkDefinition     `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkResponse) Reset() {
	*x = GetNetworkResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkResponse) ProtoMessage() {}

func (x *GetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{95}
}

func (x *GetNetworkResponse) GetNetwork() *NetworkDefinition {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *GetNetworkResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                               // "bridge", "ovs"
	BridgeName    string                 `protobuf:"bytes,3,opt,name=bridge_name,json=bridgeName,proto3" json:"bridge_name,omitempty"` // Name of the bridge device (if applicable).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNetworkRequest) Reset() {
	*x = CreateNetworkRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest) ProtoMessage() {}

func (x *CreateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{96}
}

func (x *CreateNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNetworkRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateNetworkRequest) GetBridgeName() string {
	if x != nil {
		return x.BridgeName
	}
	return ""
}

type CreateNetworkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the created network.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNetworkResponse) Reset() {
	*x = CreateNetworkResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkResponse) ProtoMessage() {}

func (x *CreateNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkResponse.ProtoReflect.Descriptor instead.
func (*CreateNetworkResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{97}
}

func (x *CreateNetworkResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateNetworkResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the network to delete.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNetworkRequest) Reset() {
	*x = DeleteNetworkRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkRequest) ProtoMessage() {}

func (x *DeleteNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkRequest.ProtoReflect.Descriptor instead.
func (*DeleteNetworkRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{98}
}

func (x *DeleteNetworkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteNetworkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNetworkResponse) Reset() {
	*x = DeleteNetworkResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkResponse) ProtoMessage() {}

func (x *DeleteNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkResponse.ProtoReflect.Descriptor instead.
func (*DeleteNetworkResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{99}
}

func (x *DeleteNetworkResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AttachIsoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	IsoId         string                 `protobuf:"bytes,2,opt,name=iso_id,json=isoId,proto3" json:"iso_id,omitempty"` // from content library item
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachIsoRequest) Reset() {
	*x = AttachIsoRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachIsoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachIsoRequest) ProtoMessage() {}

func (x *AttachIsoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachIsoRequest.ProtoReflect.Descriptor instead.
func (*AttachIsoRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{100}
}

func (x *AttachIsoRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *AttachIsoRequest) GetIsoId() string {
	if x != nil {
		return x.IsoId
	}
	return ""
}

type AttachIsoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachIsoResponse) Reset() {
	*x = AttachIsoResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachIsoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachIsoResponse) ProtoMessage() {}

func (x *AttachIsoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachIsoResponse.ProtoReflect.Descriptor instead.
func (*AttachIsoResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{101}
}

func (x *AttachIsoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type DetachIsoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	IsoId         string                 `protobuf:"bytes,2,opt,name=iso_id,json=isoId,proto3" json:"iso_id,omitempty"` // from content library item
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DetachIsoRequest) Reset() {
	*x = DetachIsoRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetachIsoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachIsoRequest) ProtoMessage() {}

func (x *DetachIsoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachIsoRequest.ProtoReflect.Descriptor instead.
func (*DetachIsoRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{102}
}

func (x *DetachIsoRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *DetachIsoRequest) GetIsoId() string {
	if x != nil {
		return x.IsoId
	}
	return ""
}

type DetachIsoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DetachIsoResponse) Reset() {
	*x = DetachIsoResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetachIsoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachIsoResponse) ProtoMessage() {}

func (x *DetachIsoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachIsoResponse.ProtoReflect.Descriptor instead.
func (*DetachIsoResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{103}
}

func (x *DetachIsoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CloneVmFromTemplateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TemplateId    string                 `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	VmName        string                 `protobuf:"bytes,2,opt,name=vm_name,json=vmName,proto3" json:"vm_name,omitempty"`
	DatastoreId   string                 `protobuf:"bytes,3,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
	VmOverrides   map[string]string      `protobuf:"bytes,4,rep,name=vm_overrides,json=vmOverrides,proto3" json:"vm_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Allows overriding certain VM properties from the template, like CPU,
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneVmFromTemplateRequest) Reset() {
	*x = CloneVmFromTemplateRequest{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneVmFromTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneVmFromTemplateRequest) ProtoMessage() {}

func (x *CloneVmFromTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneVmFromTemplateRequest.ProtoReflect.Descriptor instead.
func (*CloneVmFromTemplateRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{104}
}

func (x *CloneVmFromTemplateRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *CloneVmFromTemplateRequest) GetVmName() string {
	if x != nil {
		return x.VmName
	}
	return ""
}

func (x *CloneVmFromTemplateRequest) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

func (x *CloneVmFromTemplateRequest) GetVmOverrides() map[string]string {
	if x != nil {
		return x.VmOverrides
	}
	return nil
}

type CloneVmFromTemplateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneVmFromTemplateResponse) Reset() {
	*x = CloneVmFromTemplateResponse{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneVmFromTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneVmFromTemplateResponse) ProtoMessage() {}

func (x *CloneVmFromTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneVmFromTemplateResponse.ProtoReflect.Descriptor instead.
func (*CloneVmFromTemplateResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{105}
}

func (x *CloneVmFromTemplateResponse) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *CloneVmFromTemplateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details       string                 `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{106}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// Filter criteria (optional).
type GetContentLibraryItemsRequest_Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                                                           // "iso", "template", etc.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                           // Filter by name (can include wildcards).
	Tags          map[string]string      `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Filter by tags (key-value pairs).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContentLibraryItemsRequest_Filter) Reset() {
	*x = GetContentLibraryItemsRequest_Filter{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContentLibraryItemsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentLibraryItemsRequest_Filter) ProtoMessage() {}

func (x *GetContentLibraryItemsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentLibraryItemsRequest_Filter.ProtoReflect.Descriptor instead.
func (*GetContentLibraryItemsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{76, 0}
}

func (x *GetContentLibraryItemsRequest_Filter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetContentLibraryItemsRequest_Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetContentLibraryItemsRequest_Filter) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetContentLibraryItemsResponse_ContentLibraryItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the item.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                           // "iso", "template", etc.
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                                                                          // Size of the item in bytes.
	CreatedAt     string                 `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                // Timestamp of creation.
	UpdatedAt     string                 `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                // Timestamp of last update.
	Tags          map[string]string      `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Tags associated with the item.
	Checksum      string                 `protobuf:"bytes,8,opt,name=checksum,proto3" json:"checksum,omitempty"`                                                                   // Checksum of the item for integrity verification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) Reset() {
	*x = GetContentLibraryItemsResponse_ContentLibraryItem{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentLibraryItemsResponse_ContentLibraryItem) ProtoMessage() {}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentLibraryItemsResponse_ContentLibraryItem.ProtoReflect.Descriptor instead.
func (*GetContentLibraryItemsResponse_ContentLibraryItem) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{77, 0}
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetContentLibraryItemsResponse_ContentLibraryItem) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

type GetDatastoresResponse_Datastore struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the datastore.
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type              string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                     // "lvm", "nfs", "directory", "iscsi", "ceph"
	TotalCapacity     int64                  `protobuf:"varint,4,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`             // Total capacity in bytes.
	AvailableCapacity int64                  `protobuf:"varint,5,opt,name=available_capacity,json=availableCapacity,proto3" json:"available_capacity,omitempty"` // Available capacity in bytes.
	SupportedFormats  []string               `protobuf:"bytes,6,rep,name=supported_formats,json=supportedFormats,proto3" json:"supported_formats,omitempty"`     // "qcow2", "raw", etc.
	IsLocal           bool                   `protobuf:"varint,7,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`                               // Indicates whether the datastore is local to the host.
	// Connection details (e.g., server address, path for NFS).
	ConnectionInfo map[string]string `protobuf:"bytes,8,rep,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetDatastoresResponse_Datastore) Reset() {
	*x = GetDatastoresResponse_Datastore{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatastoresResponse_Datastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatastoresResponse_Datastore) ProtoMessage() {}

func (x *GetDatastoresResponse_Datastore) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatastoresResponse_Datastore.ProtoReflect.Descriptor instead.
func (*GetDatastoresResponse_Datastore) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{84, 0}
}

func (x *GetDatastoresResponse_Datastore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDatastoresResponse_Datastore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDatastoresResponse_Datastore) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetDatastoresResponse_Datastore) GetTotalCapacity() int64 {
	if x != nil {
		return x.TotalCapacity
	}
	return 0
}

func (x *GetDatastoresResponse_Datastore) GetAvailableCapacity() int64 {
	if x != nil {
		return x.AvailableCapacity
	}
	return 0
}

func (x *GetDatastoresResponse_Datastore) GetSupportedFormats() []string {
	if x != nil {
		return x.SupportedFormats
	}
	return nil
}

func (x *GetDatastoresResponse_Datastore) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *GetDatastoresResponse_Datastore) GetConnectionInfo() map[string]string {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

type GetDatastoreResponse_Datastore struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier of the datastore.
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type              string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                                                                     // "lvm", "nfs", "directory", "iscsi", "ceph"
	TotalCapacity     int64                  `protobuf:"varint,4,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`                                                                             // Total capacity in bytes.
	AvailableCapacity int64                  `protobuf:"varint,5,opt,name=available_capacity,json=availableCapacity,proto3" json:"available_capacity,omitempty"`                                                                 // Available capacity in bytes.
	SupportedFormats  []string               `protobuf:"bytes,6,rep,name=supported_formats,json=supportedFormats,proto3" json:"supported_formats,omitempty"`                                                                     // "qcow2", "raw", etc.
	IsLocal           bool                   `protobuf:"varint,7,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`                                                                                               // Indicates whether the datastore is local to the host.
	ConnectionInfo    map[string]string      `protobuf:"bytes,8,rep,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Connection details (e.g., server address, path for NFS).
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetDatastoreResponse_Datastore) Reset() {
	*x = GetDatastoreResponse_Datastore{}
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatastoreResponse_Datastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatastoreResponse_Datastore) ProtoMessage() {}

func (x *GetDatastoreResponse_Datastore) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatastoreResponse_Datastore.ProtoReflect.Descriptor instead.
func (*GetDatastoreResponse_Datastore) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP(), []int{86, 0}
}

func (x *GetDatastoreResponse_Datastore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDatastoreResponse_Datastore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDatastoreResponse_Datastore) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetDatastoreResponse_Datastore) GetTotalCapacity() int64 {
	if x != nil {
		return x.TotalCapacity
	}
	return 0
}

func (x *GetDatastoreResponse_Datastore) GetAvailableCapacity() int64 {
	if x != nil {
		return x.AvailableCapacity
	}
	return 0
}

func (x *GetDatastoreResponse_Datastore) GetSupportedFormats() []string {
	if x != nil {
		return x.SupportedFormats
	}
	return nil
}

func (x *GetDatastoreResponse_Datastore) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *GetDatastoreResponse_Datastore) GetConnectionInfo() map[string]string {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

var File_pilab_cloud_agent_v2_agent_service_proto protoreflect.FileDescriptor

var file_pilab_cloud_agent_v2_agent_service_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x57, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x0a,
	0x43, 0x50, 0x55, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x63,
	0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x63, 0x70, 0x75, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x70, 0x75, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x70, 0x75, 0x73, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x0c, 0x4e, 0x55, 0x4d, 0x41, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x22,
	0x98, 0x02, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x12, 0x3d, 0x0a,
	0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x50, 0x55, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x3a, 0x0a, 0x07,
	0x70, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x50, 0x55, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x70, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x47, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x61, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x4e, 0x55, 0x4d, 0x41, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x75,
	0x6d, 0x61, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x06, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x6c,
	0x6f, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61,
	0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x75, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x75,
	0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x61, 0x5f,
	0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x55, 0x4d, 0x41, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x61, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x51, 0x4f, 0x53, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x22, 0x2a, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0xc5, 0x02, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6f,
	0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x69, 0x6f, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x71, 0x6f, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x4f, 0x53, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0b, 0x71, 0x6f, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x44, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x6f, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7d, 0x0a, 0x07, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x44, 0x0a,
	0x0c, 0x71, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x4f, 0x53, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x71, 0x6f, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x63, 0x69, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x63,
	0x69, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x22, 0x51, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22,
	0x6e, 0x0a, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x74, 0x70, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x74, 0x70, 0x6d, 0x22,
	0x21, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x6d,
	0x6f, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x6d,
	0x6f, 0x75, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x73, 0x62, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x75, 0x73, 0x62, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x24, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x63,
	0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x76, 0x72, 0x61, 0x6d, 0x4d, 0x62, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x33, 0x64, 0x22, 0x63, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x6b, 0x51, 0x4f, 0x53, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x51, 0x4f, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xdf, 0x01, 0x0a, 0x03, 0x51, 0x6f, 0x53, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x70, 0x75, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x62, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x51, 0x4f, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x51, 0x4f, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xb3, 0x05, 0x0a, 0x0e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x50, 0x55, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x2e, 0x0a, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x49, 0x4f, 0x53, 0x52, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x2b, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x6f, 0x53, 0x52, 0x03, 0x71,
	0x6f, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd2, 0x02, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x63, 0x70, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x62, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x56, 0x4d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69,
	0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6f,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x69, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x39, 0x0a, 0x1d, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x53, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x6e, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x22, 0x2b, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5d,
	0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x2f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x47,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x02, 0x76, 0x6d, 0x22, 0x41, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x76,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x56, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x02, 0x76, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x02, 0x76, 0x6d, 0x22, 0x69, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09,
	0x76, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x76, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x44, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x22, 0x44, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x24, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x76, 0x6d, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x12, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x76, 0x6d, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a,
	0x0f, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x76, 0x6d, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x10, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x0e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d,
	0x49, 0x64, 0x22, 0x43, 0x0a, 0x0f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x22,
	0x44, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x1b, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x53, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x54,
	0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x54, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x2f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x2c, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x46,
	0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x11, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x76, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x76, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x4c, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x8a, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x76, 0x6d, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x56, 0x4d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x76,
	0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x66, 0x73, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x4e, 0x46, 0x53, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x66,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x73, 0x63, 0x73, 0x69, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x69, 0x53, 0x43, 0x53, 0x49, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x69, 0x73, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x6e, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x61,
	0x63, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x65, 0x76, 0x61, 0x63, 0x75, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x73, 0x22, 0x4e, 0x0a, 0x1a,
	0x53, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x51, 0x0a, 0x09, 0x4c, 0x56, 0x4d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x76, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x76, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x57, 0x0a, 0x08, 0x4e, 0x46, 0x53, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x4f,
	0x0a, 0x0b, 0x69, 0x53, 0x43, 0x53, 0x49, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x75, 0x6e, 0x22,
	0xf5, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0xc3, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x04, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0xda, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x65, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99,
	0x01, 0x0a, 0x1f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x31, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x20, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb1, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x98, 0x03,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x12, 0x72, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xb7, 0x04, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a,
	0x97, 0x03, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x12, 0x71, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x4c, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x64, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x5f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x26,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x73, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x6f,
	0x49, 0x64, 0x22, 0x46, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x73, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x10, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x49, 0x73, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x6f, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x11, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x49, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x9f, 0x02, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x56, 0x6d, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x64,
	0x0a, 0x0c, 0x76, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x56, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x56, 0x6d, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xdc, 0x20, 0x0a,
	0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a,
	0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x56, 0x4d, 0x12, 0x24, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x06, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x12, 0x23, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x12, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x08, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x07, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x56, 0x4d, 0x12, 0x24, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56,
	0x4d, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x46, 0x6f, 0x72, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x54, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2b,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x79, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x35, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x35, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x09, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x73, 0x6f, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x73, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x49, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x09, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x49, 0x73, 0x6f, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x49, 0x73, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x49, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a,
	0x13, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x56, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x56, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x56, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67,
	0x6f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x68, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x76, 0x69, 0x72, 0x74, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32,
	0x3b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pilab_cloud_agent_v2_agent_service_proto_rawDescOnce sync.Once
	file_pilab_cloud_agent_v2_agent_service_proto_rawDescData []byte
)

func file_pilab_cloud_agent_v2_agent_service_proto_rawDescGZIP() []byte {
	file_pilab_cloud_agent_v2_agent_service_proto_rawDescOnce.Do(func() {
		file_pilab_cloud_agent_v2_agent_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pilab_cloud_agent_v2_agent_service_proto_rawDesc), len(file_pilab_cloud_agent_v2_agent_service_proto_rawDesc)))
	})
	return file_pilab_cloud_agent_v2_agent_service_proto_rawDescData
}

var file_pilab_cloud_agent_v2_agent_service_proto_msgTypes = make([]protoimpl.MessageInfo, 122)
var file_pilab_cloud_agent_v2_agent_service_proto_goTypes = []any{
	(*Task)(nil),                                 // 0: pilab.cloud.agent.v2.Task
	(*CPUTopology)(nil),                          // 1: pilab.cloud.agent.v2.CPUTopology
	(*CPUPinning)(nil),                           // 2: pilab.cloud.agent.v2.CPUPinning
	(*NUMAAffinity)(nil),                         // 3: pilab.cloud.agent.v2.NUMAAffinity
	(*CPU)(nil),                                  // 4: pilab.cloud.agent.v2.CPU
	(*Memory)(nil),                               // 5: pilab.cloud.agent.v2.Memory
	(*QOSSettings)(nil),                          // 6: pilab.cloud.agent.v2.QOSSettings
	(*DiskEncryption)(nil),                       // 7: pilab.cloud.agent.v2.DiskEncryption
	(*Disk)(nil),                                 // 8: pilab.cloud.agent.v2.Disk
	(*StorageAdapter)(nil),                       // 9: pilab.cloud.agent.v2.StorageAdapter
	(*Storage)(nil),                              // 10: pilab.cloud.agent.v2.Storage
	(*NetworkInterface)(nil),                     // 11: pilab.cloud.agent.v2.NetworkInterface
	(*Network)(nil),                              // 12: pilab.cloud.agent.v2.Network
	(*BIOS)(nil),                                 // 13: pilab.cloud.agent.v2.BIOS
	(*InputDevice)(nil),                          // 14: pilab.cloud.agent.v2.InputDevice
	(*Input)(nil),                                // 15: pilab.cloud.agent.v2.Input
	(*SerialPort)(nil),                           // 16: pilab.cloud.agent.v2.SerialPort
	(*Video)(nil),                                // 17: pilab.cloud.agent.v2.Video
	(*DiskQOSLimit)(nil),                         // 18: pilab.cloud.agent.v2.DiskQOSLimit
	(*NetworkQOSLimit)(nil),                      // 19: pilab.cloud.agent.v2.NetworkQOSLimit
	(*QoS)(nil),                                  // 20: pilab.cloud.agent.v2.QoS
	(*VirtualMachine)(nil),                       // 21: pilab.cloud.agent.v2.VirtualMachine
	(*HostStatus)(nil),                           // 22: pilab.cloud.agent.v2.HostStatus
	(*CloneVMImageFromMinioRequest)(nil),         // 23: pilab.cloud.agent.v2.CloneVMImageFromMinioRequest
	(*CloneVMImageFromMinioResponse)(nil),        // 24: pilab.cloud.agent.v2.CloneVMImageFromMinioResponse
	(*RegisterHostRequest)(nil),                  // 25: pilab.cloud.agent.v2.RegisterHostRequest
	(*RegisterHostResponse)(nil),                 // 26: pilab.cloud.agent.v2.RegisterHostResponse
	(*HeartbeatRequest)(nil),                     // 27: pilab.cloud.agent.v2.HeartbeatRequest
	(*HeartbeatResponse)(nil),                    // 28: pilab.cloud.agent.v2.HeartbeatResponse
	(*GetHostStatusRequest)(nil),                 // 29: pilab.cloud.agent.v2.GetHostStatusRequest
	(*CreateVMRequest)(nil),                      // 30: pilab.cloud.agent.v2.CreateVMRequest
	(*CreateVMResponse)(nil),                     // 31: pilab.cloud.agent.v2.CreateVMResponse
	(*GetVMDetailsRequest)(nil),                  // 32: pilab.cloud.agent.v2.GetVMDetailsRequest
	(*GetVMDetailsResponse)(nil),                 // 33: pilab.cloud.agent.v2.GetVMDetailsResponse
	(*UpdateVMRequest)(nil),                      // 34: pilab.cloud.agent.v2.UpdateVMRequest
	(*UpdateVMResponse)(nil),                     // 35: pilab.cloud.agent.v2.UpdateVMResponse
	(*DeleteVMRequest)(nil),                      // 36: pilab.cloud.agent.v2.DeleteVMRequest
	(*DeleteVMResponse)(nil),                     // 37: pilab.cloud.agent.v2.DeleteVMResponse
	(*StartVMRequest)(nil),                       // 38: pilab.cloud.agent.v2.StartVMRequest
	(*StartVMResponse)(nil),                      // 39: pilab.cloud.agent.v2.StartVMResponse
	(*StopVMRequest)(nil),                        // 40: pilab.cloud.agent.v2.StopVMRequest
	(*StopVMResponse)(nil),                       // 41: pilab.cloud.agent.v2.StopVMResponse
	(*ForceStopVMRequest)(nil),                   // 42: pilab.cloud.agent.v2.ForceStopVMRequest
	(*ForceStopVMResponse)(nil),                  // 43: pilab.cloud.agent.v2.ForceStopVMResponse
	(*RebootVMRequest)(nil),                      // 44: pilab.cloud.agent.v2.RebootVMRequest
	(*RebootVMResponse)(nil),                     // 45: pilab.cloud.agent.v2.RebootVMResponse
	(*PauseVMRequest)(nil),                       // 46: pilab.cloud.agent.v2.PauseVMRequest
	(*PauseVMResponse)(nil),                      // 47: pilab.cloud.agent.v2.PauseVMResponse
	(*ResumeVMRequest)(nil),                      // 48: pilab.cloud.agent.v2.ResumeVMRequest
	(*ResumeVMResponse)(nil),                     // 49: pilab.cloud.agent.v2.ResumeVMResponse
	(*InitiateMigrationRequest)(nil),             // 50: pilab.cloud.agent.v2.InitiateMigrationRequest
	(*InitiateMigrationResponse)(nil),            // 51: pilab.cloud.agent.v2.InitiateMigrationResponse
	(*PrepareForMigrationRequest)(nil),           // 52: pilab.cloud.agent.v2.PrepareForMigrationRequest
	(*PrepareForMigrationResponse)(nil),          // 53: pilab.cloud.agent.v2.PrepareForMigrationResponse
	(*CreateSnapshotRequest)(nil),                // 54: pilab.cloud.agent.v2.CreateSnapshotRequest
	(*CreateSnapshotResponse)(nil),               // 55: pilab.cloud.agent.v2.CreateSnapshotResponse
	(*RevertToSnapshotRequest)(nil),              // 56: pilab.cloud.agent.v2.RevertToSnapshotRequest
	(*RevertToSnapshotResponse)(nil),             // 57: pilab.cloud.agent.v2.RevertToSnapshotResponse
	(*DeleteSnapshotRequest)(nil),                // 58: pilab.cloud.agent.v2.DeleteSnapshotRequest
	(*DeleteSnapshotResponse)(nil),               // 59: pilab.cloud.agent.v2.DeleteSnapshotResponse
	(*GetTaskStatusRequest)(nil),                 // 60: pilab.cloud.agent.v2.GetTaskStatusRequest
	(*CancelTaskRequest)(nil),                    // 61: pilab.cloud.agent.v2.CancelTaskRequest
	(*CancelTaskResponse)(nil),                   // 62: pilab.cloud.agent.v2.CancelTaskResponse
	(*ConfigureNetworkRequest)(nil),              // 63: pilab.cloud.agent.v2.ConfigureNetworkRequest
	(*ConfigureNetworkResponse)(nil),             // 64: pilab.cloud.agent.v2.ConfigureNetworkResponse
	(*ConfigureStorageRequest)(nil),              // 65: pilab.cloud.agent.v2.ConfigureStorageRequest
	(*ConfigureStorageResponse)(nil),             // 66: pilab.cloud.agent.v2.ConfigureStorageResponse
	(*ConfigureTimeRequest)(nil),                 // 67: pilab.cloud.agent.v2.ConfigureTimeRequest
	(*ConfigureTimeResponse)(nil),                // 68: pilab.cloud.agent.v2.ConfigureTimeResponse
	(*SetMaintenanceModeRequest)(nil),            // 69: pilab.cloud.agent.v2.SetMaintenanceModeRequest
	(*SetMaintenanceModeResponse)(nil),           // 70: pilab.cloud.agent.v2.SetMaintenanceModeResponse
	(*UpdateHostRequest)(nil),                    // 71: pilab.cloud.agent.v2.UpdateHostRequest
	(*UpdateHostResponse)(nil),                   // 72: pilab.cloud.agent.v2.UpdateHostResponse
	(*LVMVolume)(nil),                            // 73: pilab.cloud.agent.v2.LVMVolume
	(*NFSShare)(nil),                             // 74: pilab.cloud.agent.v2.NFSShare
	(*ISCSITarget)(nil),                          // 75: pilab.cloud.agent.v2.iSCSITarget
	(*GetContentLibraryItemsRequest)(nil),        // 76: pilab.cloud.agent.v2.GetContentLibraryItemsRequest
	(*GetContentLibraryItemsResponse)(nil),       // 77: pilab.cloud.agent.v2.GetContentLibraryItemsResponse
	(*UploadContentLibraryItemRequest)(nil),      // 78: pilab.cloud.agent.v2.UploadContentLibraryItemRequest
	(*ContentLibraryItemInfo)(nil),               // 79: pilab.cloud.agent.v2.ContentLibraryItemInfo
	(*UploadContentLibraryItemResponse)(nil),     // 80: pilab.cloud.agent.v2.UploadContentLibraryItemResponse
	(*DeleteContentLibraryItemRequest)(nil),      // 81: pilab.cloud.agent.v2.DeleteContentLibraryItemRequest
	(*DeleteContentLibraryItemResponse)(nil),     // 82: pilab.cloud.agent.v2.DeleteContentLibraryItemResponse
	(*GetDatastoresRequest)(nil),                 // 83: pilab.cloud.agent.v2.GetDatastoresRequest
	(*GetDatastoresResponse)(nil),                // 84: pilab.cloud.agent.v2.GetDatastoresResponse
	(*GetDatastoreRequest)(nil),                  // 85: pilab.cloud.agent.v2.GetDatastoreRequest
	(*GetDatastoreResponse)(nil),                 // 86: pilab.cloud.agent.v2.GetDatastoreResponse
	(*CreateDatastoreRequest)(nil),               // 87: pilab.cloud.agent.v2.CreateDatastoreRequest
	(*CreateDatastoreResponse)(nil),              // 88: pilab.cloud.agent.v2.CreateDatastoreResponse
	(*DeleteDatastoreRequest)(nil),               // 89: pilab.cloud.agent.v2.DeleteDatastoreRequest
	(*DeleteDatastoreResponse)(nil),              // 90: pilab.cloud.agent.v2.DeleteDatastoreResponse
	(*GetNetworksRequest)(nil),                   // 91: pilab.cloud.agent.v2.GetNetworksRequest
	(*NetworkDefinition)(nil),                    // 92: pilab.cloud.agent.v2.NetworkDefinition
	(*GetNetworksResponse)(nil),                  // 93: pilab.cloud.agent.v2.GetNetworksResponse
	(*GetNetworkRequest)(nil),                    // 94: pilab.cloud.agent.v2.GetNetworkRequest
	(*GetNetworkResponse)(nil),                   // 95: pilab.cloud.agent.v2.GetNetworkResponse
	(*CreateNetworkRequest)(nil),                 // 96: pilab.cloud.agent.v2.CreateNetworkRequest
	(*CreateNetworkResponse)(nil),                // 97: pilab.cloud.agent.v2.CreateNetworkResponse
	(*DeleteNetworkRequest)(nil),                 // 98: pilab.cloud.agent.v2.DeleteNetworkRequest
	(*DeleteNetworkResponse)(nil),                // 99: pilab.cloud.agent.v2.DeleteNetworkResponse
	(*AttachIsoRequest)(nil),                     // 100: pilab.cloud.agent.v2.AttachIsoRequest
	(*AttachIsoResponse)(nil),                    // 101: pilab.cloud.agent.v2.AttachIsoResponse
	(*DetachIsoRequest)(nil),                     // 102: pilab.cloud.agent.v2.DetachIsoRequest
	(*DetachIsoResponse)(nil),                    // 103: pilab.cloud.agent.v2.DetachIsoResponse
	(*CloneVmFromTemplateRequest)(nil),           // 104: pilab.cloud.agent.v2.CloneVmFromTemplateRequest
	(*CloneVmFromTemplateResponse)(nil),          // 105: pilab.cloud.agent.v2.CloneVmFromTemplateResponse
	(*Error)(nil),                                // 106: pilab.cloud.agent.v2.Error
	nil,                                          // 107: pilab.cloud.agent.v2.VirtualMachine.MetadataEntry
	nil,                                          // 108: pilab.cloud.agent.v2.HostStatus.MetadataEntry
	nil,                                          // 109: pilab.cloud.agent.v2.RegisterHostRequest.MetadataEntry
	(*GetContentLibraryItemsRequest_Filter)(nil), // 110: pilab.cloud.agent.v2.GetContentLibraryItemsRequest.Filter
	nil, // 111: pilab.cloud.agent.v2.GetContentLibraryItemsRequest.Filter.TagsEntry
	(*GetContentLibraryItemsResponse_ContentLibraryItem)(nil), // 112: pilab.cloud.agent.v2.GetContentLibraryItemsResponse.ContentLibraryItem
	nil,                                     // 113: pilab.cloud.agent.v2.GetContentLibraryItemsResponse.ContentLibraryItem.TagsEntry
	nil,                                     // 114: pilab.cloud.agent.v2.ContentLibraryItemInfo.TagsEntry
	(*GetDatastoresResponse_Datastore)(nil), // 115: pilab.cloud.agent.v2.GetDatastoresResponse.Datastore
	nil,                                     // 116: pilab.cloud.agent.v2.GetDatastoresResponse.Datastore.ConnectionInfoEntry
	(*GetDatastoreResponse_Datastore)(nil),  // 117: pilab.cloud.agent.v2.GetDatastoreResponse.Datastore
	nil,                                     // 118: pilab.cloud.agent.v2.GetDatastoreResponse.Datastore.ConnectionInfoEntry
	nil,                                     // 119: pilab.cloud.agent.v2.CreateDatastoreRequest.ConnectionInfoEntry
	nil,                                     // 120: pilab.cloud.agent.v2.NetworkDefinition.ConnectionInfoEntry
	nil,                                     // 121: pilab.cloud.agent.v2.CloneVmFromTemplateRequest.VmOverridesEntry
	(*emptypb.Empty)(nil),                   // 122: google.protobuf.Empty
}
var file_pilab_cloud_agent_v2_agent_service_proto_depIdxs = []int32{
	1,   // 0: pilab.cloud.agent.v2.CPU.topology:type_name -> pilab.cloud.agent.v2.CPUTopology
	2,   // 1: pilab.cloud.agent.v2.CPU.pinning:type_name -> pilab.cloud.agent.v2.CPUPinning
	3,   // 2: pilab.cloud.agent.v2.CPU.numa_affinity:type_name -> pilab.cloud.agent.v2.NUMAAffinity
	3,   // 3: pilab.cloud.agent.v2.Memory.numa_affinity:type_name -> pilab.cloud.agent.v2.NUMAAffinity
	6,   // 4: pilab.cloud.agent.v2.Disk.qos_settings:type_name -> pilab.cloud.agent.v2.QOSSettings
	7,   // 5: pilab.cloud.agent.v2.Disk.encryption:type_name -> pilab.cloud.agent.v2.DiskEncryption
	8,   // 6: pilab.cloud.agent.v2.Storage.disks:type_name -> pilab.cloud.agent.v2.Disk
	9,   // 7: pilab.cloud.agent.v2.Storage.adapters:type_name -> pilab.cloud.agent.v2.StorageAdapter
	6,   // 8: pilab.cloud.agent.v2.NetworkInterface.qos_settings:type_name -> pilab.cloud.agent.v2.QOSSettings
	11,  // 9: pilab.cloud.agent.v2.Network.interfaces:type_name -> pilab.cloud.agent.v2.NetworkInterface
	14,  // 10: pilab.cloud.agent.v2.Input.keyboard:type_name -> pilab.cloud.agent.v2.InputDevice
	14,  // 11: pilab.cloud.agent.v2.Input.mouse:type_name -> pilab.cloud.agent.v2.InputDevice
	16,  // 12: pilab.cloud.agent.v2.Input.serial_ports:type_name -> pilab.cloud.agent.v2.SerialPort
	18,  // 13: pilab.cloud.agent.v2.QoS.disk_limits:type_name -> pilab.cloud.agent.v2.DiskQOSLimit
	19,  // 14: pilab.cloud.agent.v2.QoS.network_limits:type_name -> pilab.cloud.agent.v2.NetworkQOSLimit
	4,   // 15: pilab.cloud.agent.v2.VirtualMachine.cpu:type_name -> pilab.cloud.agent.v2.CPU
	5,   // 16: pilab.cloud.agent.v2.VirtualMachine.memory:type_name -> pilab.cloud.agent.v2.Memory
	10,  // 17: pilab.cloud.agent.v2.VirtualMachine.storage:type_name -> pilab.cloud.agent.v2.Storage
	12,  // 18: pilab.cloud.agent.v2.VirtualMachine.network:type_name -> pilab.cloud.agent.v2.Network
	13,  // 19: pilab.cloud.agent.v2.VirtualMachine.bios:type_name -> pilab.cloud.agent.v2.BIOS
	15,  // 20: pilab.cloud.agent.v2.VirtualMachine.input:type_name -> pilab.cloud.agent.v2.Input
	17,  // 21: pilab.cloud.agent.v2.VirtualMachine.video:type_name -> pilab.cloud.agent.v2.Video
	20,  // 22: pilab.cloud.agent.v2.VirtualMachine.qos:type_name -> pilab.cloud.agent.v2.QoS
	107, // 23: pilab.cloud.agent.v2.VirtualMachine.metadata:type_name -> pilab.cloud.agent.v2.VirtualMachine.MetadataEntry
	108, // 24: pilab.cloud.agent.v2.HostStatus.metadata:type_name -> pilab.cloud.agent.v2.HostStatus.MetadataEntry
	109, // 25: pilab.cloud.agent.v2.RegisterHostRequest.metadata:type_name -> pilab.cloud.agent.v2.RegisterHostRequest.MetadataEntry
	0,   // 26: pilab.cloud.agent.v2.HeartbeatResponse.tasks:type_name -> pilab.cloud.agent.v2.Task
	21,  // 27: pilab.cloud.agent.v2.CreateVMRequest.vm:type_name -> pilab.cloud.agent.v2.VirtualMachine
	21,  // 28: pilab.cloud.agent.v2.GetVMDetailsResponse.vm:type_name -> pilab.cloud.agent.v2.VirtualMachine
	21,  // 29: pilab.cloud.agent.v2.UpdateVMRequest.vm_object:type_name -> pilab.cloud.agent.v2.VirtualMachine
	122, // 30: pilab.cloud.agent.v2.UpdateVMResponse.message:type_name -> google.protobuf.Empty
	122, // 31: pilab.cloud.agent.v2.DeleteVMResponse.message:type_name -> google.protobuf.Empty
	122, // 32: pilab.cloud.agent.v2.StartVMResponse.message:type_name -> google.protobuf.Empty
	122, // 33: pilab.cloud.agent.v2.StopVMResponse.message:type_name -> google.protobuf.Empty
	122, // 34: pilab.cloud.agent.v2.ForceStopVMResponse.message:type_name -> google.protobuf.Empty
	122, // 35: pilab.cloud.agent.v2.RebootVMResponse.message:type_name -> google.protobuf.Empty
	122, // 36: pilab.cloud.agent.v2.PauseVMResponse.message:type_name -> google.protobuf.Empty
	122, // 37: pilab.cloud.agent.v2.ResumeVMResponse.message:type_name -> google.protobuf.Empty
	122, // 38: pilab.cloud.agent.v2.InitiateMigrationResponse.message:type_name -> google.protobuf.Empty
	122, // 39: pilab.cloud.agent.v2.PrepareForMigrationResponse.message:type_name -> google.protobuf.Empty
	122, // 40: pilab.cloud.agent.v2.RevertToSnapshotResponse.message:type_name -> google.protobuf.Empty
	122, // 41: pilab.cloud.agent.v2.DeleteSnapshotResponse.message:type_name -> google.protobuf.Empty
	122, // 42: pilab.cloud.agent.v2.CancelTaskResponse.message:type_name -> google.protobuf.Empty
	11,  // 43: pilab.cloud.agent.v2.ConfigureNetworkRequest.network_interface:type_name -> pilab.cloud.agent.v2.NetworkInterface
	122, // 44: pilab.cloud.agent.v2.ConfigureNetworkResponse.message:type_name -> google.protobuf.Empty
	73,  // 45: pilab.cloud.agent.v2.ConfigureStorageRequest.lvm_volume:type_name -> pilab.cloud.agent.v2.LVMVolume
	74,  // 46: pilab.cloud.agent.v2.ConfigureStorageRequest.nfs_share:type_name -> pilab.cloud.agent.v2.NFSShare
	75,  // 47: pilab.cloud.agent.v2.ConfigureStorageRequest.iscsi_target:type_name -> pilab.cloud.agent.v2.iSCSITarget
	122, // 48: pilab.cloud.agent.v2.ConfigureStorageResponse.message:type_name -> google.protobuf.Empty
	122, // 49: pilab.cloud.agent.v2.ConfigureTimeResponse.message:type_name -> google.protobuf.Empty
	122, // 50: pilab.cloud.agent.v2.SetMaintenanceModeResponse.message:type_name -> google.protobuf.Empty
	122, // 51: pilab.cloud.agent.v2.UpdateHostResponse.message:type_name -> google.protobuf.Empty
	110, // 52: pilab.cloud.agent.v2.GetContentLibraryItemsRequest.filter:type_name -> pilab.cloud.agent.v2.GetContentLibraryItemsRequest.Filter
	112, // 53: pilab.cloud.agent.v2.GetContentLibraryItemsResponse.items:type_name -> pilab.cloud.agent.v2.GetContentLibraryItemsResponse.ContentLibraryItem
	79,  // 54: pilab.cloud.agent.v2.UploadContentLibraryItemRequest.metadata:type_name -> pilab.cloud.agent.v2.ContentLibraryItemInfo
	114, // 55: pilab.cloud.agent.v2.ContentLibraryItemInfo.tags:type_name -> pilab.cloud.agent.v2.ContentLibraryItemInfo.TagsEntry
	106, // 56: pilab.cloud.agent.v2.UploadContentLibraryItemResponse.error:type_name -> pilab.cloud.agent.v2.Error
	106, // 57: pilab.cloud.agent.v2.DeleteContentLibraryItemResponse.error:type_name -> pilab.cloud.agent.v2.Error
	115, // 58: pilab.cloud.agent.v2.GetDatastoresResponse.datastores:type_name -> pilab.cloud.agent.v2.GetDatastoresResponse.Datastore
	117, // 59: pilab.cloud.agent.v2.GetDatastoreResponse.datastore:type_name -> pilab.cloud.agent.v2.GetDatastoreResponse.Datastore
	106, // 60: pilab.cloud.agent.v2.GetDatastoreResponse.error:type_name -> pilab.cloud.agent.v2.Error
	119, // 61: pilab.cloud.agent.v2.CreateDatastoreRequest.connection_info:type_name -> pilab.cloud.agent.v2.CreateDatastoreRequest.ConnectionInfoEntry
	106, // 62: pilab.cloud.agent.v2.CreateDatastoreResponse.error:type_name -> pilab.cloud.agent.v2.Error
	106, // 63: pilab.cloud.agent.v2.DeleteDatastoreResponse.error:type_name -> pilab.cloud.agent.v2.Error
	120, // 64: pilab.cloud.agent.v2.NetworkDefinition.connection_info:type_name -> pilab.cloud.agent.v2.NetworkDefinition.ConnectionInfoEntry
	92,  // 65: pilab.cloud.agent.v2.GetNetworksResponse.networks:type_name -> pilab.cloud.agent.v2.NetworkDefinition
	92,  // 66: pilab.cloud.agent.v2.GetNetworkResponse.network:type_name -> pilab.cloud.agent.v2.NetworkDefinition
	106, // 67: pilab.cloud.agent.v2.GetNetworkResponse.error:type_name -> pilab.cloud.agent.v2.Error
	106, // 68: pilab.cloud.agent.v2.CreateNetworkResponse.error:type_name -> pilab.cloud.agent.v2.Error
	106, // 69: pilab.cloud.agent.v2.DeleteNetworkResponse.error:type_name -> pilab.cloud.agent.v2.Error
	106, // 70: pilab.cloud.agent.v2.AttachIsoResponse.error:type_name -> pilab.cloud.agent.v2.Error
	106, // 71: pilab.cloud.agent.v2.DetachIsoResponse.error:type_name -> pilab.cloud.agent.v2.Error
	121, // 72: pilab.cloud.agent.v2.CloneVmFromTemplateRequest.vm_overrides:type_name -> pilab.cloud.agent.v2.CloneVmFromTemplateRequest.VmOverridesEntry
	106, // 73: pilab.cloud.agent.v2.CloneVmFromTemplateResponse.error:type_name -> pilab.cloud.agent.v2.Error
	111, // 74: pilab.cloud.agent.v2.GetContentLibraryItemsRequest.Filter.tags:type_name -> pilab.cloud.agent.v2.GetContentLibraryItemsRequest.Filter.TagsEntry
	113, // 75: pilab.cloud.agent.v2.GetContentLibraryItemsResponse.ContentLibraryItem.tags:type_name -> pilab.cloud.agent.v2.GetContentLibraryItemsResponse.ContentLibraryItem.TagsEntry
	116, // 76: pilab.cloud.agent.v2.GetDatastoresResponse.Datastore.connection_info:type_name -> pilab.cloud.agent.v2.GetDatastoresResponse.Datastore.ConnectionInfoEntry
	118, // 77: pilab.cloud.agent.v2.GetDatastoreResponse.Datastore.connection_info:type_name -> pilab.cloud.agent.v2.GetDatastoreResponse.Datastore.ConnectionInfoEntry
	25,  // 78: pilab.cloud.agent.v2.AgentService.RegisterHost:input_type -> pilab.cloud.agent.v2.RegisterHostRequest
	27,  // 79: pilab.cloud.agent.v2.AgentService.Heartbeat:input_type -> pilab.cloud.agent.v2.HeartbeatRequest
	29,  // 80: pilab.cloud.agent.v2.AgentService.GetHostStatus:input_type -> pilab.cloud.agent.v2.GetHostStatusRequest
	30,  // 81: pilab.cloud.agent.v2.AgentService.CreateVM:input_type -> pilab.cloud.agent.v2.CreateVMRequest
	32,  // 82: pilab.cloud.agent.v2.AgentService.GetVMDetails:input_type -> pilab.cloud.agent.v2.GetVMDetailsRequest
	34,  // 83: pilab.cloud.agent.v2.AgentService.UpdateVM:input_type -> pilab.cloud.agent.v2.UpdateVMRequest
	36,  // 84: pilab.cloud.agent.v2.AgentService.DeleteVM:input_type -> pilab.cloud.agent.v2.DeleteVMRequest
	38,  // 85: pilab.cloud.agent.v2.AgentService.StartVM:input_type -> pilab.cloud.agent.v2.StartVMRequest
	40,  // 86: pilab.cloud.agent.v2.AgentService.StopVM:input_type -> pilab.cloud.agent.v2.StopVMRequest
	42,  // 87: pilab.cloud.agent.v2.AgentService.ForceStopVM:input_type -> pilab.cloud.agent.v2.ForceStopVMRequest
	44,  // 88: pilab.cloud.agent.v2.AgentService.RebootVM:input_type -> pilab.cloud.agent.v2.RebootVMRequest
	46,  // 89: pilab.cloud.agent.v2.AgentService.PauseVM:input_type -> pilab.cloud.agent.v2.PauseVMRequest
	48,  // 90: pilab.cloud.agent.v2.AgentService.ResumeVM:input_type -> pilab.cloud.agent.v2.ResumeVMRequest
	50,  // 91: pilab.cloud.agent.v2.AgentService.InitiateMigration:input_type -> pilab.cloud.agent.v2.InitiateMigrationRequest
	52,  // 92: pilab.cloud.agent.v2.AgentService.PrepareForMigration:input_type -> pilab.cloud.agent.v2.PrepareForMigrationRequest
	54,  // 93: pilab.cloud.agent.v2.AgentService.CreateSnapshot:input_type -> pilab.cloud.agent.v2.CreateSnapshotRequest
	56,  // 94: pilab.cloud.agent.v2.AgentService.RevertToSnapshot:input_type -> pilab.cloud.agent.v2.RevertToSnapshotRequest
	58,  // 95: pilab.cloud.agent.v2.AgentService.DeleteSnapshot:input_type -> pilab.cloud.agent.v2.DeleteSnapshotRequest
	60,  // 96: pilab.cloud.agent.v2.AgentService.GetTaskStatus:input_type -> pilab.cloud.agent.v2.GetTaskStatusRequest
	61,  // 97: pilab.cloud.agent.v2.AgentService.CancelTask:input_type -> pilab.cloud.agent.v2.CancelTaskRequest
	63,  // 98: pilab.cloud.agent.v2.AgentService.ConfigureNetwork:input_type -> pilab.cloud.agent.v2.ConfigureNetworkRequest
	65,  // 99: pilab.cloud.agent.v2.AgentService.ConfigureStorage:input_type -> pilab.cloud.agent.v2.ConfigureStorageRequest
	67,  // 100: pilab.cloud.agent.v2.AgentService.ConfigureTime:input_type -> pilab.cloud.agent.v2.ConfigureTimeRequest
	69,  // 101: pilab.cloud.agent.v2.AgentService.SetMaintenanceMode:input_type -> pilab.cloud.agent.v2.SetMaintenanceModeRequest
	71,  // 102: pilab.cloud.agent.v2.AgentService.UpdateHost:input_type -> pilab.cloud.agent.v2.UpdateHostRequest
	76,  // 103: pilab.cloud.agent.v2.AgentService.GetContentLibraryItems:input_type -> pilab.cloud.agent.v2.GetContentLibraryItemsRequest
	78,  // 104: pilab.cloud.agent.v2.AgentService.UploadContentLibraryItem:input_type -> pilab.cloud.agent.v2.UploadContentLibraryItemRequest
	81,  // 105: pilab.cloud.agent.v2.AgentService.DeleteContentLibraryItem:input_type -> pilab.cloud.agent.v2.DeleteContentLibraryItemRequest
	83,  // 106: pilab.cloud.agent.v2.AgentService.GetDatastores:input_type -> pilab.cloud.agent.v2.GetDatastoresRequest
	85,  // 107: pilab.cloud.agent.v2.AgentService.GetDatastore:input_type -> pilab.cloud.agent.v2.GetDatastoreRequest
	87,  // 108: pilab.cloud.agent.v2.AgentService.CreateDatastore:input_type -> pilab.cloud.agent.v2.CreateDatastoreRequest
	89,  // 109: pilab.cloud.agent.v2.AgentService.DeleteDatastore:input_type -> pilab.cloud.agent.v2.DeleteDatastoreRequest
	91,  // 110: pilab.cloud.agent.v2.AgentService.GetNetworks:input_type -> pilab.cloud.agent.v2.GetNetworksRequest
	94,  // 111: pilab.cloud.agent.v2.AgentService.GetNetwork:input_type -> pilab.cloud.agent.v2.GetNetworkRequest
	96,  // 112: pilab.cloud.agent.v2.AgentService.CreateNetwork:input_type -> pilab.cloud.agent.v2.CreateNetworkRequest
	98,  // 113: pilab.cloud.agent.v2.AgentService.DeleteNetwork:input_type -> pilab.cloud.agent.v2.DeleteNetworkRequest
	100, // 114: pilab.cloud.agent.v2.AgentService.AttachIso:input_type -> pilab.cloud.agent.v2.AttachIsoRequest
	102, // 115: pilab.cloud.agent.v2.AgentService.DetachIso:input_type -> pilab.cloud.agent.v2.DetachIsoRequest
	104, // 116: pilab.cloud.agent.v2.AgentService.CloneVmFromTemplate:input_type -> pilab.cloud.agent.v2.CloneVmFromTemplateRequest
	26,  // 117: pilab.cloud.agent.v2.AgentService.RegisterHost:output_type -> pilab.cloud.agent.v2.RegisterHostResponse
	28,  // 118: pilab.cloud.agent.v2.AgentService.Heartbeat:output_type -> pilab.cloud.agent.v2.HeartbeatResponse
	22,  // 119: pilab.cloud.agent.v2.AgentService.GetHostStatus:output_type -> pilab.cloud.agent.v2.HostStatus
	31,  // 120: pilab.cloud.agent.v2.AgentService.CreateVM:output_type -> pilab.cloud.agent.v2.CreateVMResponse
	33,  // 121: pilab.cloud.agent.v2.AgentService.GetVMDetails:output_type -> pilab.cloud.agent.v2.GetVMDetailsResponse
	35,  // 122: pilab.cloud.agent.v2.AgentService.UpdateVM:output_type -> pilab.cloud.agent.v2.UpdateVMResponse
	37,  // 123: pilab.cloud.agent.v2.AgentService.DeleteVM:output_type -> pilab.cloud.agent.v2.DeleteVMResponse
	39,  // 124: pilab.cloud.agent.v2.AgentService.StartVM:output_type -> pilab.cloud.agent.v2.StartVMResponse
	41,  // 125: pilab.cloud.agent.v2.AgentService.StopVM:output_type -> pilab.cloud.agent.v2.StopVMResponse
	43,  // 126: pilab.cloud.agent.v2.AgentService.ForceStopVM:output_type -> pilab.cloud.agent.v2.ForceStopVMResponse
	45,  // 127: pilab.cloud.agent.v2.AgentService.RebootVM:output_type -> pilab.cloud.agent.v2.RebootVMResponse
	47,  // 128: pilab.cloud.agent.v2.AgentService.PauseVM:output_type -> pilab.cloud.agent.v2.PauseVMResponse
	49,  // 129: pilab.cloud.agent.v2.AgentService.ResumeVM:output_type -> pilab.cloud.agent.v2.ResumeVMResponse
	51,  // 130: pilab.cloud.agent.v2.AgentService.InitiateMigration:output_type -> pilab.cloud.agent.v2.InitiateMigrationResponse
	53,  // 131: pilab.cloud.agent.v2.AgentService.PrepareForMigration:output_type -> pilab.cloud.agent.v2.PrepareForMigrationResponse
	55,  // 132: pilab.cloud.agent.v2.AgentService.CreateSnapshot:output_type -> pilab.cloud.agent.v2.CreateSnapshotResponse
	57,  // 133: pilab.cloud.agent.v2.AgentService.RevertToSnapshot:output_type -> pilab.cloud.agent.v2.RevertToSnapshotResponse
	59,  // 134: pilab.cloud.agent.v2.AgentService.DeleteSnapshot:output_type -> pilab.cloud.agent.v2.DeleteSnapshotResponse
	0,   // 135: pilab.cloud.agent.v2.AgentService.GetTaskStatus:output_type -> pilab.cloud.agent.v2.Task
	62,  // 136: pilab.cloud.agent.v2.AgentService.CancelTask:output_type -> pilab.cloud.agent.v2.CancelTaskResponse
	64,  // 137: pilab.cloud.agent.v2.AgentService.ConfigureNetwork:output_type -> pilab.cloud.agent.v2.ConfigureNetworkResponse
	66,  // 138: pilab.cloud.agent.v2.AgentService.ConfigureStorage:output_type -> pilab.cloud.agent.v2.ConfigureStorageResponse
	68,  // 139: pilab.cloud.agent.v2.AgentService.ConfigureTime:output_type -> pilab.cloud.agent.v2.ConfigureTimeResponse
	70,  // 140: pilab.cloud.agent.v2.AgentService.SetMaintenanceMode:output_type -> pilab.cloud.agent.v2.SetMaintenanceModeResponse
	72,  // 141: pilab.cloud.agent.v2.AgentService.UpdateHost:output_type -> pilab.cloud.agent.v2.UpdateHostResponse
	77,  // 142: pilab.cloud.agent.v2.AgentService.GetContentLibraryItems:output_type -> pilab.cloud.agent.v2.GetContentLibraryItemsResponse
	80,  // 143: pilab.cloud.agent.v2.AgentService.UploadContentLibraryItem:output_type -> pilab.cloud.agent.v2.UploadContentLibraryItemResponse
	82,  // 144: pilab.cloud.agent.v2.AgentService.DeleteContentLibraryItem:output_type -> pilab.cloud.agent.v2.DeleteContentLibraryItemResponse
	84,  // 145: pilab.cloud.agent.v2.AgentService.GetDatastores:output_type -> pilab.cloud.agent.v2.GetDatastoresResponse
	86,  // 146: pilab.cloud.agent.v2.AgentService.GetDatastore:output_type -> pilab.cloud.agent.v2.GetDatastoreResponse
	88,  // 147: pilab.cloud.agent.v2.AgentService.CreateDatastore:output_type -> pilab.cloud.agent.v2.CreateDatastoreResponse
	90,  // 148: pilab.cloud.agent.v2.AgentService.DeleteDatastore:output_type -> pilab.cloud.agent.v2.DeleteDatastoreResponse
	93,  // 149: pilab.cloud.agent.v2.AgentService.GetNetworks:output_type -> pilab.cloud.agent.v2.GetNetworksResponse
	95,  // 150: pilab.cloud.agent.v2.AgentService.GetNetwork:output_type -> pilab.cloud.agent.v2.GetNetworkResponse
	97,  // 151: pilab.cloud.agent.v2.AgentService.CreateNetwork:output_type -> pilab.cloud.agent.v2.CreateNetworkResponse
	99,  // 152: pilab.cloud.agent.v2.AgentService.DeleteNetwork:output_type -> pilab.cloud.agent.v2.DeleteNetworkResponse
	101, // 153: pilab.cloud.agent.v2.AgentService.AttachIso:output_type -> pilab.cloud.agent.v2.AttachIsoResponse
	103, // 154: pilab.cloud.agent.v2.AgentService.DetachIso:output_type -> pilab.cloud.agent.v2.DetachIsoResponse
	105, // 155: pilab.cloud.agent.v2.AgentService.CloneVmFromTemplate:output_type -> pilab.cloud.agent.v2.CloneVmFromTemplateResponse
	117, // [117:156] is the sub-list for method output_type
	78,  // [78:117] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_pilab_cloud_agent_v2_agent_service_proto_init() }
func file_pilab_cloud_agent_v2_agent_service_proto_init() {
	if File_pilab_cloud_agent_v2_agent_service_proto != nil {
		return
	}
	file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[63].OneofWrappers = []any{
		(*ConfigureNetworkRequest_NetworkInterface)(nil),
		(*ConfigureNetworkRequest_OvsConfig)(nil),
	}
	file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[65].OneofWrappers = []any{
		(*ConfigureStorageRequest_LvmVolume)(nil),
		(*ConfigureStorageRequest_NfsShare)(nil),
		(*ConfigureStorageRequest_IscsiTarget)(nil),
	}
	file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[67].OneofWrappers = []any{
		(*ConfigureTimeRequest_NtpServer)(nil),
		(*ConfigureTimeRequest_Timezone)(nil),
	}
	file_pilab_cloud_agent_v2_agent_service_proto_msgTypes[78].OneofWrappers = []any{
		(*UploadContentLibraryItemRequest_Metadata)(nil),
		(*UploadContentLibraryItemRequest_ChunkData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pilab_cloud_agent_v2_agent_service_proto_rawDesc), len(file_pilab_cloud_agent_v2_agent_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   122,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilab_cloud_agent_v2_agent_service_proto_goTypes,
		DependencyIndexes: file_pilab_cloud_agent_v2_agent_service_proto_depIdxs,
		MessageInfos:      file_pilab_cloud_agent_v2_agent_service_proto_msgTypes,
	}.Build()
	File_pilab_cloud_agent_v2_agent_service_proto = out.File
	file_pilab_cloud_agent_v2_agent_service_proto_goTypes = nil
	file_pilab_cloud_agent_v2_agent_service_proto_depIdxs = nil
}
