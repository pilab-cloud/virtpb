// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/agent/v2/agent_service.proto

package agentv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_RegisterHost_FullMethodName             = "/pilab.cloud.agent.v2.AgentService/RegisterHost"
	AgentService_Heartbeat_FullMethodName                = "/pilab.cloud.agent.v2.AgentService/Heartbeat"
	AgentService_GetHostStatus_FullMethodName            = "/pilab.cloud.agent.v2.AgentService/GetHostStatus"
	AgentService_CreateVM_FullMethodName                 = "/pilab.cloud.agent.v2.AgentService/CreateVM"
	AgentService_GetVMDetails_FullMethodName             = "/pilab.cloud.agent.v2.AgentService/GetVMDetails"
	AgentService_UpdateVM_FullMethodName                 = "/pilab.cloud.agent.v2.AgentService/UpdateVM"
	AgentService_DeleteVM_FullMethodName                 = "/pilab.cloud.agent.v2.AgentService/DeleteVM"
	AgentService_StartVM_FullMethodName                  = "/pilab.cloud.agent.v2.AgentService/StartVM"
	AgentService_StopVM_FullMethodName                   = "/pilab.cloud.agent.v2.AgentService/StopVM"
	AgentService_ForceStopVM_FullMethodName              = "/pilab.cloud.agent.v2.AgentService/ForceStopVM"
	AgentService_RebootVM_FullMethodName                 = "/pilab.cloud.agent.v2.AgentService/RebootVM"
	AgentService_PauseVM_FullMethodName                  = "/pilab.cloud.agent.v2.AgentService/PauseVM"
	AgentService_ResumeVM_FullMethodName                 = "/pilab.cloud.agent.v2.AgentService/ResumeVM"
	AgentService_InitiateMigration_FullMethodName        = "/pilab.cloud.agent.v2.AgentService/InitiateMigration"
	AgentService_PrepareForMigration_FullMethodName      = "/pilab.cloud.agent.v2.AgentService/PrepareForMigration"
	AgentService_CreateSnapshot_FullMethodName           = "/pilab.cloud.agent.v2.AgentService/CreateSnapshot"
	AgentService_RevertToSnapshot_FullMethodName         = "/pilab.cloud.agent.v2.AgentService/RevertToSnapshot"
	AgentService_DeleteSnapshot_FullMethodName           = "/pilab.cloud.agent.v2.AgentService/DeleteSnapshot"
	AgentService_GetTaskStatus_FullMethodName            = "/pilab.cloud.agent.v2.AgentService/GetTaskStatus"
	AgentService_CancelTask_FullMethodName               = "/pilab.cloud.agent.v2.AgentService/CancelTask"
	AgentService_ConfigureNetwork_FullMethodName         = "/pilab.cloud.agent.v2.AgentService/ConfigureNetwork"
	AgentService_ConfigureStorage_FullMethodName         = "/pilab.cloud.agent.v2.AgentService/ConfigureStorage"
	AgentService_ConfigureTime_FullMethodName            = "/pilab.cloud.agent.v2.AgentService/ConfigureTime"
	AgentService_SetMaintenanceMode_FullMethodName       = "/pilab.cloud.agent.v2.AgentService/SetMaintenanceMode"
	AgentService_UpdateHost_FullMethodName               = "/pilab.cloud.agent.v2.AgentService/UpdateHost"
	AgentService_GetContentLibraryItems_FullMethodName   = "/pilab.cloud.agent.v2.AgentService/GetContentLibraryItems"
	AgentService_UploadContentLibraryItem_FullMethodName = "/pilab.cloud.agent.v2.AgentService/UploadContentLibraryItem"
	AgentService_DeleteContentLibraryItem_FullMethodName = "/pilab.cloud.agent.v2.AgentService/DeleteContentLibraryItem"
	AgentService_GetDatastores_FullMethodName            = "/pilab.cloud.agent.v2.AgentService/GetDatastores"
	AgentService_GetDatastore_FullMethodName             = "/pilab.cloud.agent.v2.AgentService/GetDatastore"
	AgentService_CreateDatastore_FullMethodName          = "/pilab.cloud.agent.v2.AgentService/CreateDatastore"
	AgentService_DeleteDatastore_FullMethodName          = "/pilab.cloud.agent.v2.AgentService/DeleteDatastore"
	AgentService_GetNetworks_FullMethodName              = "/pilab.cloud.agent.v2.AgentService/GetNetworks"
	AgentService_GetNetwork_FullMethodName               = "/pilab.cloud.agent.v2.AgentService/GetNetwork"
	AgentService_CreateNetwork_FullMethodName            = "/pilab.cloud.agent.v2.AgentService/CreateNetwork"
	AgentService_DeleteNetwork_FullMethodName            = "/pilab.cloud.agent.v2.AgentService/DeleteNetwork"
	AgentService_AttachIso_FullMethodName                = "/pilab.cloud.agent.v2.AgentService/AttachIso"
	AgentService_DetachIso_FullMethodName                = "/pilab.cloud.agent.v2.AgentService/DetachIso"
	AgentService_CloneVmFromTemplate_FullMethodName      = "/pilab.cloud.agent.v2.AgentService/CloneVmFromTemplate"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Agent service definition.
type AgentServiceClient interface {
	// Host Management
	RegisterHost(ctx context.Context, in *RegisterHostRequest, opts ...grpc.CallOption) (*RegisterHostResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	GetHostStatus(ctx context.Context, in *GetHostStatusRequest, opts ...grpc.CallOption) (*HostStatus, error)
	// VM Management
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*CreateVMResponse, error)
	GetVMDetails(ctx context.Context, in *GetVMDetailsRequest, opts ...grpc.CallOption) (*GetVMDetailsResponse, error)
	UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*UpdateVMResponse, error)
	DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*DeleteVMResponse, error)
	StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*StartVMResponse, error)
	StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*StopVMResponse, error)
	ForceStopVM(ctx context.Context, in *ForceStopVMRequest, opts ...grpc.CallOption) (*ForceStopVMResponse, error)
	RebootVM(ctx context.Context, in *RebootVMRequest, opts ...grpc.CallOption) (*RebootVMResponse, error)
	PauseVM(ctx context.Context, in *PauseVMRequest, opts ...grpc.CallOption) (*PauseVMResponse, error)
	ResumeVM(ctx context.Context, in *ResumeVMRequest, opts ...grpc.CallOption) (*ResumeVMResponse, error)
	InitiateMigration(ctx context.Context, in *InitiateMigrationRequest, opts ...grpc.CallOption) (*InitiateMigrationResponse, error)
	PrepareForMigration(ctx context.Context, in *PrepareForMigrationRequest, opts ...grpc.CallOption) (*PrepareForMigrationResponse, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	RevertToSnapshot(ctx context.Context, in *RevertToSnapshotRequest, opts ...grpc.CallOption) (*RevertToSnapshotResponse, error)
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error)
	// Task Management
	GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*Task, error)
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error)
	// Configuration Management (Host-level)
	ConfigureNetwork(ctx context.Context, in *ConfigureNetworkRequest, opts ...grpc.CallOption) (*ConfigureNetworkResponse, error)
	ConfigureStorage(ctx context.Context, in *ConfigureStorageRequest, opts ...grpc.CallOption) (*ConfigureStorageResponse, error)
	ConfigureTime(ctx context.Context, in *ConfigureTimeRequest, opts ...grpc.CallOption) (*ConfigureTimeResponse, error)
	SetMaintenanceMode(ctx context.Context, in *SetMaintenanceModeRequest, opts ...grpc.CallOption) (*SetMaintenanceModeResponse, error)
	UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...grpc.CallOption) (*UpdateHostResponse, error)
	// Retrieves a list of available items in the content library.
	GetContentLibraryItems(ctx context.Context, in *GetContentLibraryItemsRequest, opts ...grpc.CallOption) (*GetContentLibraryItemsResponse, error)
	// Uploads an item to the content library.
	UploadContentLibraryItem(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadContentLibraryItemRequest, UploadContentLibraryItemResponse], error)
	// Deletes an item from the content library.
	DeleteContentLibraryItem(ctx context.Context, in *DeleteContentLibraryItemRequest, opts ...grpc.CallOption) (*DeleteContentLibraryItemResponse, error)
	// Retrieves a list of available datastores.
	GetDatastores(ctx context.Context, in *GetDatastoresRequest, opts ...grpc.CallOption) (*GetDatastoresResponse, error)
	// Retrieves details about a specific datastore.
	GetDatastore(ctx context.Context, in *GetDatastoreRequest, opts ...grpc.CallOption) (*GetDatastoreResponse, error)
	// Creates a new datastore.
	CreateDatastore(ctx context.Context, in *CreateDatastoreRequest, opts ...grpc.CallOption) (*CreateDatastoreResponse, error)
	// Deletes a datastore.
	DeleteDatastore(ctx context.Context, in *DeleteDatastoreRequest, opts ...grpc.CallOption) (*DeleteDatastoreResponse, error)
	// Retrieves a list of available networks.
	GetNetworks(ctx context.Context, in *GetNetworksRequest, opts ...grpc.CallOption) (*GetNetworksResponse, error)
	// Retrieves details about a specific network.
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	// Creates a new network.
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error)
	// Deletes a network.
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error)
	// Attaches an ISO image from the content library to a VM.
	AttachIso(ctx context.Context, in *AttachIsoRequest, opts ...grpc.CallOption) (*AttachIsoResponse, error)
	// Detaches an ISO image from a VM.
	DetachIso(ctx context.Context, in *DetachIsoRequest, opts ...grpc.CallOption) (*DetachIsoResponse, error)
	// Clones a VM from a template in the content library.
	CloneVmFromTemplate(ctx context.Context, in *CloneVmFromTemplateRequest, opts ...grpc.CallOption) (*CloneVmFromTemplateResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) RegisterHost(ctx context.Context, in *RegisterHostRequest, opts ...grpc.CallOption) (*RegisterHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterHostResponse)
	err := c.cc.Invoke(ctx, AgentService_RegisterHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, AgentService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetHostStatus(ctx context.Context, in *GetHostStatusRequest, opts ...grpc.CallOption) (*HostStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostStatus)
	err := c.cc.Invoke(ctx, AgentService_GetHostStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*CreateVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVMResponse)
	err := c.cc.Invoke(ctx, AgentService_CreateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetVMDetails(ctx context.Context, in *GetVMDetailsRequest, opts ...grpc.CallOption) (*GetVMDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVMDetailsResponse)
	err := c.cc.Invoke(ctx, AgentService_GetVMDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*UpdateVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVMResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*DeleteVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVMResponse)
	err := c.cc.Invoke(ctx, AgentService_DeleteVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*StartVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartVMResponse)
	err := c.cc.Invoke(ctx, AgentService_StartVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*StopVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopVMResponse)
	err := c.cc.Invoke(ctx, AgentService_StopVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ForceStopVM(ctx context.Context, in *ForceStopVMRequest, opts ...grpc.CallOption) (*ForceStopVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForceStopVMResponse)
	err := c.cc.Invoke(ctx, AgentService_ForceStopVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) RebootVM(ctx context.Context, in *RebootVMRequest, opts ...grpc.CallOption) (*RebootVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebootVMResponse)
	err := c.cc.Invoke(ctx, AgentService_RebootVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) PauseVM(ctx context.Context, in *PauseVMRequest, opts ...grpc.CallOption) (*PauseVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseVMResponse)
	err := c.cc.Invoke(ctx, AgentService_PauseVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ResumeVM(ctx context.Context, in *ResumeVMRequest, opts ...grpc.CallOption) (*ResumeVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeVMResponse)
	err := c.cc.Invoke(ctx, AgentService_ResumeVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) InitiateMigration(ctx context.Context, in *InitiateMigrationRequest, opts ...grpc.CallOption) (*InitiateMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateMigrationResponse)
	err := c.cc.Invoke(ctx, AgentService_InitiateMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) PrepareForMigration(ctx context.Context, in *PrepareForMigrationRequest, opts ...grpc.CallOption) (*PrepareForMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareForMigrationResponse)
	err := c.cc.Invoke(ctx, AgentService_PrepareForMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, AgentService_CreateSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) RevertToSnapshot(ctx context.Context, in *RevertToSnapshotRequest, opts ...grpc.CallOption) (*RevertToSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevertToSnapshotResponse)
	err := c.cc.Invoke(ctx, AgentService_RevertToSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSnapshotResponse)
	err := c.cc.Invoke(ctx, AgentService_DeleteSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, AgentService_GetTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTaskResponse)
	err := c.cc.Invoke(ctx, AgentService_CancelTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ConfigureNetwork(ctx context.Context, in *ConfigureNetworkRequest, opts ...grpc.CallOption) (*ConfigureNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureNetworkResponse)
	err := c.cc.Invoke(ctx, AgentService_ConfigureNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ConfigureStorage(ctx context.Context, in *ConfigureStorageRequest, opts ...grpc.CallOption) (*ConfigureStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureStorageResponse)
	err := c.cc.Invoke(ctx, AgentService_ConfigureStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ConfigureTime(ctx context.Context, in *ConfigureTimeRequest, opts ...grpc.CallOption) (*ConfigureTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureTimeResponse)
	err := c.cc.Invoke(ctx, AgentService_ConfigureTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SetMaintenanceMode(ctx context.Context, in *SetMaintenanceModeRequest, opts ...grpc.CallOption) (*SetMaintenanceModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMaintenanceModeResponse)
	err := c.cc.Invoke(ctx, AgentService_SetMaintenanceMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...grpc.CallOption) (*UpdateHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHostResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetContentLibraryItems(ctx context.Context, in *GetContentLibraryItemsRequest, opts ...grpc.CallOption) (*GetContentLibraryItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContentLibraryItemsResponse)
	err := c.cc.Invoke(ctx, AgentService_GetContentLibraryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UploadContentLibraryItem(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadContentLibraryItemRequest, UploadContentLibraryItemResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_UploadContentLibraryItem_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadContentLibraryItemRequest, UploadContentLibraryItemResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_UploadContentLibraryItemClient = grpc.ClientStreamingClient[UploadContentLibraryItemRequest, UploadContentLibraryItemResponse]

func (c *agentServiceClient) DeleteContentLibraryItem(ctx context.Context, in *DeleteContentLibraryItemRequest, opts ...grpc.CallOption) (*DeleteContentLibraryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteContentLibraryItemResponse)
	err := c.cc.Invoke(ctx, AgentService_DeleteContentLibraryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetDatastores(ctx context.Context, in *GetDatastoresRequest, opts ...grpc.CallOption) (*GetDatastoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatastoresResponse)
	err := c.cc.Invoke(ctx, AgentService_GetDatastores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetDatastore(ctx context.Context, in *GetDatastoreRequest, opts ...grpc.CallOption) (*GetDatastoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatastoreResponse)
	err := c.cc.Invoke(ctx, AgentService_GetDatastore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CreateDatastore(ctx context.Context, in *CreateDatastoreRequest, opts ...grpc.CallOption) (*CreateDatastoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDatastoreResponse)
	err := c.cc.Invoke(ctx, AgentService_CreateDatastore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DeleteDatastore(ctx context.Context, in *DeleteDatastoreRequest, opts ...grpc.CallOption) (*DeleteDatastoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDatastoreResponse)
	err := c.cc.Invoke(ctx, AgentService_DeleteDatastore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetNetworks(ctx context.Context, in *GetNetworksRequest, opts ...grpc.CallOption) (*GetNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworksResponse)
	err := c.cc.Invoke(ctx, AgentService_GetNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkResponse)
	err := c.cc.Invoke(ctx, AgentService_GetNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNetworkResponse)
	err := c.cc.Invoke(ctx, AgentService_CreateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNetworkResponse)
	err := c.cc.Invoke(ctx, AgentService_DeleteNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AttachIso(ctx context.Context, in *AttachIsoRequest, opts ...grpc.CallOption) (*AttachIsoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachIsoResponse)
	err := c.cc.Invoke(ctx, AgentService_AttachIso_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DetachIso(ctx context.Context, in *DetachIsoRequest, opts ...grpc.CallOption) (*DetachIsoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetachIsoResponse)
	err := c.cc.Invoke(ctx, AgentService_DetachIso_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CloneVmFromTemplate(ctx context.Context, in *CloneVmFromTemplateRequest, opts ...grpc.CallOption) (*CloneVmFromTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloneVmFromTemplateResponse)
	err := c.cc.Invoke(ctx, AgentService_CloneVmFromTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
//
// Agent service definition.
type AgentServiceServer interface {
	// Host Management
	RegisterHost(context.Context, *RegisterHostRequest) (*RegisterHostResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	GetHostStatus(context.Context, *GetHostStatusRequest) (*HostStatus, error)
	// VM Management
	CreateVM(context.Context, *CreateVMRequest) (*CreateVMResponse, error)
	GetVMDetails(context.Context, *GetVMDetailsRequest) (*GetVMDetailsResponse, error)
	UpdateVM(context.Context, *UpdateVMRequest) (*UpdateVMResponse, error)
	DeleteVM(context.Context, *DeleteVMRequest) (*DeleteVMResponse, error)
	StartVM(context.Context, *StartVMRequest) (*StartVMResponse, error)
	StopVM(context.Context, *StopVMRequest) (*StopVMResponse, error)
	ForceStopVM(context.Context, *ForceStopVMRequest) (*ForceStopVMResponse, error)
	RebootVM(context.Context, *RebootVMRequest) (*RebootVMResponse, error)
	PauseVM(context.Context, *PauseVMRequest) (*PauseVMResponse, error)
	ResumeVM(context.Context, *ResumeVMRequest) (*ResumeVMResponse, error)
	InitiateMigration(context.Context, *InitiateMigrationRequest) (*InitiateMigrationResponse, error)
	PrepareForMigration(context.Context, *PrepareForMigrationRequest) (*PrepareForMigrationResponse, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	RevertToSnapshot(context.Context, *RevertToSnapshotRequest) (*RevertToSnapshotResponse, error)
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
	// Task Management
	GetTaskStatus(context.Context, *GetTaskStatusRequest) (*Task, error)
	CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error)
	// Configuration Management (Host-level)
	ConfigureNetwork(context.Context, *ConfigureNetworkRequest) (*ConfigureNetworkResponse, error)
	ConfigureStorage(context.Context, *ConfigureStorageRequest) (*ConfigureStorageResponse, error)
	ConfigureTime(context.Context, *ConfigureTimeRequest) (*ConfigureTimeResponse, error)
	SetMaintenanceMode(context.Context, *SetMaintenanceModeRequest) (*SetMaintenanceModeResponse, error)
	UpdateHost(context.Context, *UpdateHostRequest) (*UpdateHostResponse, error)
	// Retrieves a list of available items in the content library.
	GetContentLibraryItems(context.Context, *GetContentLibraryItemsRequest) (*GetContentLibraryItemsResponse, error)
	// Uploads an item to the content library.
	UploadContentLibraryItem(grpc.ClientStreamingServer[UploadContentLibraryItemRequest, UploadContentLibraryItemResponse]) error
	// Deletes an item from the content library.
	DeleteContentLibraryItem(context.Context, *DeleteContentLibraryItemRequest) (*DeleteContentLibraryItemResponse, error)
	// Retrieves a list of available datastores.
	GetDatastores(context.Context, *GetDatastoresRequest) (*GetDatastoresResponse, error)
	// Retrieves details about a specific datastore.
	GetDatastore(context.Context, *GetDatastoreRequest) (*GetDatastoreResponse, error)
	// Creates a new datastore.
	CreateDatastore(context.Context, *CreateDatastoreRequest) (*CreateDatastoreResponse, error)
	// Deletes a datastore.
	DeleteDatastore(context.Context, *DeleteDatastoreRequest) (*DeleteDatastoreResponse, error)
	// Retrieves a list of available networks.
	GetNetworks(context.Context, *GetNetworksRequest) (*GetNetworksResponse, error)
	// Retrieves details about a specific network.
	GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error)
	// Creates a new network.
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error)
	// Deletes a network.
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error)
	// Attaches an ISO image from the content library to a VM.
	AttachIso(context.Context, *AttachIsoRequest) (*AttachIsoResponse, error)
	// Detaches an ISO image from a VM.
	DetachIso(context.Context, *DetachIsoRequest) (*DetachIsoResponse, error)
	// Clones a VM from a template in the content library.
	CloneVmFromTemplate(context.Context, *CloneVmFromTemplateRequest) (*CloneVmFromTemplateResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) RegisterHost(context.Context, *RegisterHostRequest) (*RegisterHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHost not implemented")
}
func (UnimplementedAgentServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAgentServiceServer) GetHostStatus(context.Context, *GetHostStatusRequest) (*HostStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostStatus not implemented")
}
func (UnimplementedAgentServiceServer) CreateVM(context.Context, *CreateVMRequest) (*CreateVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (UnimplementedAgentServiceServer) GetVMDetails(context.Context, *GetVMDetailsRequest) (*GetVMDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMDetails not implemented")
}
func (UnimplementedAgentServiceServer) UpdateVM(context.Context, *UpdateVMRequest) (*UpdateVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (UnimplementedAgentServiceServer) DeleteVM(context.Context, *DeleteVMRequest) (*DeleteVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (UnimplementedAgentServiceServer) StartVM(context.Context, *StartVMRequest) (*StartVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedAgentServiceServer) StopVM(context.Context, *StopVMRequest) (*StopVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (UnimplementedAgentServiceServer) ForceStopVM(context.Context, *ForceStopVMRequest) (*ForceStopVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceStopVM not implemented")
}
func (UnimplementedAgentServiceServer) RebootVM(context.Context, *RebootVMRequest) (*RebootVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootVM not implemented")
}
func (UnimplementedAgentServiceServer) PauseVM(context.Context, *PauseVMRequest) (*PauseVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseVM not implemented")
}
func (UnimplementedAgentServiceServer) ResumeVM(context.Context, *ResumeVMRequest) (*ResumeVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeVM not implemented")
}
func (UnimplementedAgentServiceServer) InitiateMigration(context.Context, *InitiateMigrationRequest) (*InitiateMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateMigration not implemented")
}
func (UnimplementedAgentServiceServer) PrepareForMigration(context.Context, *PrepareForMigrationRequest) (*PrepareForMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareForMigration not implemented")
}
func (UnimplementedAgentServiceServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedAgentServiceServer) RevertToSnapshot(context.Context, *RevertToSnapshotRequest) (*RevertToSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertToSnapshot not implemented")
}
func (UnimplementedAgentServiceServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (UnimplementedAgentServiceServer) GetTaskStatus(context.Context, *GetTaskStatusRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedAgentServiceServer) CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedAgentServiceServer) ConfigureNetwork(context.Context, *ConfigureNetworkRequest) (*ConfigureNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureNetwork not implemented")
}
func (UnimplementedAgentServiceServer) ConfigureStorage(context.Context, *ConfigureStorageRequest) (*ConfigureStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureStorage not implemented")
}
func (UnimplementedAgentServiceServer) ConfigureTime(context.Context, *ConfigureTimeRequest) (*ConfigureTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureTime not implemented")
}
func (UnimplementedAgentServiceServer) SetMaintenanceMode(context.Context, *SetMaintenanceModeRequest) (*SetMaintenanceModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaintenanceMode not implemented")
}
func (UnimplementedAgentServiceServer) UpdateHost(context.Context, *UpdateHostRequest) (*UpdateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedAgentServiceServer) GetContentLibraryItems(context.Context, *GetContentLibraryItemsRequest) (*GetContentLibraryItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentLibraryItems not implemented")
}
func (UnimplementedAgentServiceServer) UploadContentLibraryItem(grpc.ClientStreamingServer[UploadContentLibraryItemRequest, UploadContentLibraryItemResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadContentLibraryItem not implemented")
}
func (UnimplementedAgentServiceServer) DeleteContentLibraryItem(context.Context, *DeleteContentLibraryItemRequest) (*DeleteContentLibraryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContentLibraryItem not implemented")
}
func (UnimplementedAgentServiceServer) GetDatastores(context.Context, *GetDatastoresRequest) (*GetDatastoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatastores not implemented")
}
func (UnimplementedAgentServiceServer) GetDatastore(context.Context, *GetDatastoreRequest) (*GetDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatastore not implemented")
}
func (UnimplementedAgentServiceServer) CreateDatastore(context.Context, *CreateDatastoreRequest) (*CreateDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatastore not implemented")
}
func (UnimplementedAgentServiceServer) DeleteDatastore(context.Context, *DeleteDatastoreRequest) (*DeleteDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatastore not implemented")
}
func (UnimplementedAgentServiceServer) GetNetworks(context.Context, *GetNetworksRequest) (*GetNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworks not implemented")
}
func (UnimplementedAgentServiceServer) GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedAgentServiceServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedAgentServiceServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedAgentServiceServer) AttachIso(context.Context, *AttachIsoRequest) (*AttachIsoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachIso not implemented")
}
func (UnimplementedAgentServiceServer) DetachIso(context.Context, *DetachIsoRequest) (*DetachIsoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachIso not implemented")
}
func (UnimplementedAgentServiceServer) CloneVmFromTemplate(context.Context, *CloneVmFromTemplateRequest) (*CloneVmFromTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneVmFromTemplate not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_RegisterHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RegisterHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_RegisterHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RegisterHost(ctx, req.(*RegisterHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetHostStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetHostStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetHostStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetHostStatus(ctx, req.(*GetHostStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CreateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetVMDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetVMDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetVMDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetVMDetails(ctx, req.(*GetVMDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateVM(ctx, req.(*UpdateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_DeleteVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DeleteVM(ctx, req.(*DeleteVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_StartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StartVM(ctx, req.(*StartVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_StopVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StopVM(ctx, req.(*StopVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ForceStopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceStopVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ForceStopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ForceStopVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ForceStopVM(ctx, req.(*ForceStopVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_RebootVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RebootVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_RebootVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RebootVM(ctx, req.(*RebootVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_PauseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).PauseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_PauseVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).PauseVM(ctx, req.(*PauseVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ResumeVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ResumeVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ResumeVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ResumeVM(ctx, req.(*ResumeVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_InitiateMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).InitiateMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_InitiateMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).InitiateMigration(ctx, req.(*InitiateMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_PrepareForMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareForMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).PrepareForMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_PrepareForMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).PrepareForMigration(ctx, req.(*PrepareForMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_RevertToSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertToSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RevertToSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_RevertToSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RevertToSnapshot(ctx, req.(*RevertToSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_DeleteSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetTaskStatus(ctx, req.(*GetTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CancelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ConfigureNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ConfigureNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ConfigureNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ConfigureNetwork(ctx, req.(*ConfigureNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ConfigureStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ConfigureStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ConfigureStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ConfigureStorage(ctx, req.(*ConfigureStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ConfigureTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ConfigureTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ConfigureTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ConfigureTime(ctx, req.(*ConfigureTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SetMaintenanceMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaintenanceModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SetMaintenanceMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SetMaintenanceMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SetMaintenanceMode(ctx, req.(*SetMaintenanceModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateHost(ctx, req.(*UpdateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetContentLibraryItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentLibraryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetContentLibraryItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetContentLibraryItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetContentLibraryItems(ctx, req.(*GetContentLibraryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UploadContentLibraryItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).UploadContentLibraryItem(&grpc.GenericServerStream[UploadContentLibraryItemRequest, UploadContentLibraryItemResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_UploadContentLibraryItemServer = grpc.ClientStreamingServer[UploadContentLibraryItemRequest, UploadContentLibraryItemResponse]

func _AgentService_DeleteContentLibraryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContentLibraryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DeleteContentLibraryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_DeleteContentLibraryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DeleteContentLibraryItem(ctx, req.(*DeleteContentLibraryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetDatastores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatastoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetDatastores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetDatastores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetDatastores(ctx, req.(*GetDatastoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetDatastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetDatastore(ctx, req.(*GetDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CreateDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CreateDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CreateDatastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CreateDatastore(ctx, req.(*CreateDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DeleteDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DeleteDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_DeleteDatastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DeleteDatastore(ctx, req.(*DeleteDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetNetworks(ctx, req.(*GetNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AttachIso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachIsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AttachIso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_AttachIso_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AttachIso(ctx, req.(*AttachIsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DetachIso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachIsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DetachIso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_DetachIso_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DetachIso(ctx, req.(*DetachIsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CloneVmFromTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneVmFromTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CloneVmFromTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CloneVmFromTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CloneVmFromTemplate(ctx, req.(*CloneVmFromTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.cloud.agent.v2.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterHost",
			Handler:    _AgentService_RegisterHost_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _AgentService_Heartbeat_Handler,
		},
		{
			MethodName: "GetHostStatus",
			Handler:    _AgentService_GetHostStatus_Handler,
		},
		{
			MethodName: "CreateVM",
			Handler:    _AgentService_CreateVM_Handler,
		},
		{
			MethodName: "GetVMDetails",
			Handler:    _AgentService_GetVMDetails_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _AgentService_UpdateVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _AgentService_DeleteVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _AgentService_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _AgentService_StopVM_Handler,
		},
		{
			MethodName: "ForceStopVM",
			Handler:    _AgentService_ForceStopVM_Handler,
		},
		{
			MethodName: "RebootVM",
			Handler:    _AgentService_RebootVM_Handler,
		},
		{
			MethodName: "PauseVM",
			Handler:    _AgentService_PauseVM_Handler,
		},
		{
			MethodName: "ResumeVM",
			Handler:    _AgentService_ResumeVM_Handler,
		},
		{
			MethodName: "InitiateMigration",
			Handler:    _AgentService_InitiateMigration_Handler,
		},
		{
			MethodName: "PrepareForMigration",
			Handler:    _AgentService_PrepareForMigration_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _AgentService_CreateSnapshot_Handler,
		},
		{
			MethodName: "RevertToSnapshot",
			Handler:    _AgentService_RevertToSnapshot_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _AgentService_DeleteSnapshot_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _AgentService_GetTaskStatus_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _AgentService_CancelTask_Handler,
		},
		{
			MethodName: "ConfigureNetwork",
			Handler:    _AgentService_ConfigureNetwork_Handler,
		},
		{
			MethodName: "ConfigureStorage",
			Handler:    _AgentService_ConfigureStorage_Handler,
		},
		{
			MethodName: "ConfigureTime",
			Handler:    _AgentService_ConfigureTime_Handler,
		},
		{
			MethodName: "SetMaintenanceMode",
			Handler:    _AgentService_SetMaintenanceMode_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _AgentService_UpdateHost_Handler,
		},
		{
			MethodName: "GetContentLibraryItems",
			Handler:    _AgentService_GetContentLibraryItems_Handler,
		},
		{
			MethodName: "DeleteContentLibraryItem",
			Handler:    _AgentService_DeleteContentLibraryItem_Handler,
		},
		{
			MethodName: "GetDatastores",
			Handler:    _AgentService_GetDatastores_Handler,
		},
		{
			MethodName: "GetDatastore",
			Handler:    _AgentService_GetDatastore_Handler,
		},
		{
			MethodName: "CreateDatastore",
			Handler:    _AgentService_CreateDatastore_Handler,
		},
		{
			MethodName: "DeleteDatastore",
			Handler:    _AgentService_DeleteDatastore_Handler,
		},
		{
			MethodName: "GetNetworks",
			Handler:    _AgentService_GetNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _AgentService_GetNetwork_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _AgentService_CreateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _AgentService_DeleteNetwork_Handler,
		},
		{
			MethodName: "AttachIso",
			Handler:    _AgentService_AttachIso_Handler,
		},
		{
			MethodName: "DetachIso",
			Handler:    _AgentService_DetachIso_Handler,
		},
		{
			MethodName: "CloneVmFromTemplate",
			Handler:    _AgentService_CloneVmFromTemplate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadContentLibraryItem",
			Handler:       _AgentService_UploadContentLibraryItem_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pilab/cloud/agent/v2/agent_service.proto",
}
