// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/virtualization/v1/virtualization.proto

package virtualizationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VirtualizationService_CreateTenant_FullMethodName               = "/virtualization.VirtualizationService/CreateTenant"
	VirtualizationService_GetTenant_FullMethodName                  = "/virtualization.VirtualizationService/GetTenant"
	VirtualizationService_ListTenants_FullMethodName                = "/virtualization.VirtualizationService/ListTenants"
	VirtualizationService_UpdateTenant_FullMethodName               = "/virtualization.VirtualizationService/UpdateTenant"
	VirtualizationService_DeleteTenant_FullMethodName               = "/virtualization.VirtualizationService/DeleteTenant"
	VirtualizationService_CreatePortGroup_FullMethodName            = "/virtualization.VirtualizationService/CreatePortGroup"
	VirtualizationService_GetPortGroup_FullMethodName               = "/virtualization.VirtualizationService/GetPortGroup"
	VirtualizationService_ListPortGroups_FullMethodName             = "/virtualization.VirtualizationService/ListPortGroups"
	VirtualizationService_UpdatePortGroup_FullMethodName            = "/virtualization.VirtualizationService/UpdatePortGroup"
	VirtualizationService_DeletePortGroup_FullMethodName            = "/virtualization.VirtualizationService/DeletePortGroup"
	VirtualizationService_SetPortGroupSystemServices_FullMethodName = "/virtualization.VirtualizationService/SetPortGroupSystemServices"
	VirtualizationService_GetPortGroupSystemServices_FullMethodName = "/virtualization.VirtualizationService/GetPortGroupSystemServices"
	VirtualizationService_CreateNetwork_FullMethodName              = "/virtualization.VirtualizationService/CreateNetwork"
	VirtualizationService_GetNetwork_FullMethodName                 = "/virtualization.VirtualizationService/GetNetwork"
	VirtualizationService_ListNetworks_FullMethodName               = "/virtualization.VirtualizationService/ListNetworks"
	VirtualizationService_UpdateNetwork_FullMethodName              = "/virtualization.VirtualizationService/UpdateNetwork"
	VirtualizationService_DeleteNetwork_FullMethodName              = "/virtualization.VirtualizationService/DeleteNetwork"
	VirtualizationService_AttachVMToPortGroup_FullMethodName        = "/virtualization.VirtualizationService/AttachVMToPortGroup"
	VirtualizationService_DetachVMFromPortGroup_FullMethodName      = "/virtualization.VirtualizationService/DetachVMFromPortGroup"
	VirtualizationService_GetAgentStatus_FullMethodName             = "/virtualization.VirtualizationService/GetAgentStatus"
	VirtualizationService_ListAgents_FullMethodName                 = "/virtualization.VirtualizationService/ListAgents"
)

// VirtualizationServiceClient is the client API for VirtualizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main Virtualization Service
type VirtualizationServiceClient interface {
	// Tenant Management
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*Tenant, error)
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*Tenant, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*Tenant, error)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Port Group Management
	CreatePortGroup(ctx context.Context, in *CreatePortGroupRequest, opts ...grpc.CallOption) (*PortGroup, error)
	GetPortGroup(ctx context.Context, in *GetPortGroupRequest, opts ...grpc.CallOption) (*PortGroup, error)
	ListPortGroups(ctx context.Context, in *ListPortGroupsRequest, opts ...grpc.CallOption) (*ListPortGroupsResponse, error)
	UpdatePortGroup(ctx context.Context, in *UpdatePortGroupRequest, opts ...grpc.CallOption) (*PortGroup, error)
	DeletePortGroup(ctx context.Context, in *DeletePortGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetPortGroupSystemServices(ctx context.Context, in *SetPortGroupSystemServicesRequest, opts ...grpc.CallOption) (*PortGroup, error)
	GetPortGroupSystemServices(ctx context.Context, in *GetPortGroupSystemServicesRequest, opts ...grpc.CallOption) (*SystemServicesConfig, error)
	// Network (Logical Switch) Management
	// (In OVN, a Port Group is often associated with a Logical Switch)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Virtual Machine Management
	AttachVMToPortGroup(ctx context.Context, in *AttachVMToPortGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DetachVMFromPortGroup(ctx context.Context, in *DetachVMFromPortGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Agent Management
	GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error)
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
}

type virtualizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualizationServiceClient(cc grpc.ClientConnInterface) VirtualizationServiceClient {
	return &virtualizationServiceClient{cc}
}

func (c *virtualizationServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*Tenant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tenant)
	err := c.cc.Invoke(ctx, VirtualizationService_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*Tenant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tenant)
	err := c.cc.Invoke(ctx, VirtualizationService_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_ListTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*Tenant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tenant)
	err := c.cc.Invoke(ctx, VirtualizationService_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VirtualizationService_DeleteTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) CreatePortGroup(ctx context.Context, in *CreatePortGroupRequest, opts ...grpc.CallOption) (*PortGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortGroup)
	err := c.cc.Invoke(ctx, VirtualizationService_CreatePortGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) GetPortGroup(ctx context.Context, in *GetPortGroupRequest, opts ...grpc.CallOption) (*PortGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortGroup)
	err := c.cc.Invoke(ctx, VirtualizationService_GetPortGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) ListPortGroups(ctx context.Context, in *ListPortGroupsRequest, opts ...grpc.CallOption) (*ListPortGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortGroupsResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_ListPortGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) UpdatePortGroup(ctx context.Context, in *UpdatePortGroupRequest, opts ...grpc.CallOption) (*PortGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortGroup)
	err := c.cc.Invoke(ctx, VirtualizationService_UpdatePortGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) DeletePortGroup(ctx context.Context, in *DeletePortGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VirtualizationService_DeletePortGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) SetPortGroupSystemServices(ctx context.Context, in *SetPortGroupSystemServicesRequest, opts ...grpc.CallOption) (*PortGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortGroup)
	err := c.cc.Invoke(ctx, VirtualizationService_SetPortGroupSystemServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) GetPortGroupSystemServices(ctx context.Context, in *GetPortGroupSystemServicesRequest, opts ...grpc.CallOption) (*SystemServicesConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemServicesConfig)
	err := c.cc.Invoke(ctx, VirtualizationService_GetPortGroupSystemServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network)
	err := c.cc.Invoke(ctx, VirtualizationService_CreateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network)
	err := c.cc.Invoke(ctx, VirtualizationService_GetNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network)
	err := c.cc.Invoke(ctx, VirtualizationService_UpdateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VirtualizationService_DeleteNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) AttachVMToPortGroup(ctx context.Context, in *AttachVMToPortGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VirtualizationService_AttachVMToPortGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) DetachVMFromPortGroup(ctx context.Context, in *DetachVMFromPortGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VirtualizationService_DetachVMFromPortGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentStatusResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_GetAgentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_ListAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualizationServiceServer is the server API for VirtualizationService service.
// All implementations must embed UnimplementedVirtualizationServiceServer
// for forward compatibility.
//
// Main Virtualization Service
type VirtualizationServiceServer interface {
	// Tenant Management
	CreateTenant(context.Context, *CreateTenantRequest) (*Tenant, error)
	GetTenant(context.Context, *GetTenantRequest) (*Tenant, error)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*Tenant, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*emptypb.Empty, error)
	// Port Group Management
	CreatePortGroup(context.Context, *CreatePortGroupRequest) (*PortGroup, error)
	GetPortGroup(context.Context, *GetPortGroupRequest) (*PortGroup, error)
	ListPortGroups(context.Context, *ListPortGroupsRequest) (*ListPortGroupsResponse, error)
	UpdatePortGroup(context.Context, *UpdatePortGroupRequest) (*PortGroup, error)
	DeletePortGroup(context.Context, *DeletePortGroupRequest) (*emptypb.Empty, error)
	SetPortGroupSystemServices(context.Context, *SetPortGroupSystemServicesRequest) (*PortGroup, error)
	GetPortGroupSystemServices(context.Context, *GetPortGroupSystemServicesRequest) (*SystemServicesConfig, error)
	// Network (Logical Switch) Management
	// (In OVN, a Port Group is often associated with a Logical Switch)
	CreateNetwork(context.Context, *CreateNetworkRequest) (*Network, error)
	GetNetwork(context.Context, *GetNetworkRequest) (*Network, error)
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	UpdateNetwork(context.Context, *UpdateNetworkRequest) (*Network, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*emptypb.Empty, error)
	// Virtual Machine Management
	AttachVMToPortGroup(context.Context, *AttachVMToPortGroupRequest) (*emptypb.Empty, error)
	DetachVMFromPortGroup(context.Context, *DetachVMFromPortGroupRequest) (*emptypb.Empty, error)
	// Agent Management
	GetAgentStatus(context.Context, *GetAgentStatusRequest) (*AgentStatusResponse, error)
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	mustEmbedUnimplementedVirtualizationServiceServer()
}

// UnimplementedVirtualizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVirtualizationServiceServer struct{}

func (UnimplementedVirtualizationServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedVirtualizationServiceServer) GetTenant(context.Context, *GetTenantRequest) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedVirtualizationServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedVirtualizationServiceServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedVirtualizationServiceServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedVirtualizationServiceServer) CreatePortGroup(context.Context, *CreatePortGroupRequest) (*PortGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortGroup not implemented")
}
func (UnimplementedVirtualizationServiceServer) GetPortGroup(context.Context, *GetPortGroupRequest) (*PortGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortGroup not implemented")
}
func (UnimplementedVirtualizationServiceServer) ListPortGroups(context.Context, *ListPortGroupsRequest) (*ListPortGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortGroups not implemented")
}
func (UnimplementedVirtualizationServiceServer) UpdatePortGroup(context.Context, *UpdatePortGroupRequest) (*PortGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortGroup not implemented")
}
func (UnimplementedVirtualizationServiceServer) DeletePortGroup(context.Context, *DeletePortGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortGroup not implemented")
}
func (UnimplementedVirtualizationServiceServer) SetPortGroupSystemServices(context.Context, *SetPortGroupSystemServicesRequest) (*PortGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortGroupSystemServices not implemented")
}
func (UnimplementedVirtualizationServiceServer) GetPortGroupSystemServices(context.Context, *GetPortGroupSystemServicesRequest) (*SystemServicesConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortGroupSystemServices not implemented")
}
func (UnimplementedVirtualizationServiceServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedVirtualizationServiceServer) GetNetwork(context.Context, *GetNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedVirtualizationServiceServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedVirtualizationServiceServer) UpdateNetwork(context.Context, *UpdateNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedVirtualizationServiceServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedVirtualizationServiceServer) AttachVMToPortGroup(context.Context, *AttachVMToPortGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachVMToPortGroup not implemented")
}
func (UnimplementedVirtualizationServiceServer) DetachVMFromPortGroup(context.Context, *DetachVMFromPortGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachVMFromPortGroup not implemented")
}
func (UnimplementedVirtualizationServiceServer) GetAgentStatus(context.Context, *GetAgentStatusRequest) (*AgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentStatus not implemented")
}
func (UnimplementedVirtualizationServiceServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedVirtualizationServiceServer) mustEmbedUnimplementedVirtualizationServiceServer() {}
func (UnimplementedVirtualizationServiceServer) testEmbeddedByValue()                               {}

// UnsafeVirtualizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualizationServiceServer will
// result in compilation errors.
type UnsafeVirtualizationServiceServer interface {
	mustEmbedUnimplementedVirtualizationServiceServer()
}

func RegisterVirtualizationServiceServer(s grpc.ServiceRegistrar, srv VirtualizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedVirtualizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VirtualizationService_ServiceDesc, srv)
}

func _VirtualizationService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_CreatePortGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).CreatePortGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_CreatePortGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).CreatePortGroup(ctx, req.(*CreatePortGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_GetPortGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).GetPortGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_GetPortGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).GetPortGroup(ctx, req.(*GetPortGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_ListPortGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).ListPortGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_ListPortGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).ListPortGroups(ctx, req.(*ListPortGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_UpdatePortGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).UpdatePortGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_UpdatePortGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).UpdatePortGroup(ctx, req.(*UpdatePortGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_DeletePortGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).DeletePortGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_DeletePortGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).DeletePortGroup(ctx, req.(*DeletePortGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_SetPortGroupSystemServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortGroupSystemServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).SetPortGroupSystemServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_SetPortGroupSystemServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).SetPortGroupSystemServices(ctx, req.(*SetPortGroupSystemServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_GetPortGroupSystemServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortGroupSystemServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).GetPortGroupSystemServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_GetPortGroupSystemServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).GetPortGroupSystemServices(ctx, req.(*GetPortGroupSystemServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_GetNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_UpdateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).UpdateNetwork(ctx, req.(*UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_AttachVMToPortGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachVMToPortGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).AttachVMToPortGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_AttachVMToPortGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).AttachVMToPortGroup(ctx, req.(*AttachVMToPortGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_DetachVMFromPortGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachVMFromPortGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).DetachVMFromPortGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_DetachVMFromPortGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).DetachVMFromPortGroup(ctx, req.(*DetachVMFromPortGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_GetAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).GetAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_GetAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).GetAgentStatus(ctx, req.(*GetAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualizationService_ServiceDesc is the grpc.ServiceDesc for VirtualizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "virtualization.VirtualizationService",
	HandlerType: (*VirtualizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTenant",
			Handler:    _VirtualizationService_CreateTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _VirtualizationService_GetTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _VirtualizationService_ListTenants_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _VirtualizationService_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _VirtualizationService_DeleteTenant_Handler,
		},
		{
			MethodName: "CreatePortGroup",
			Handler:    _VirtualizationService_CreatePortGroup_Handler,
		},
		{
			MethodName: "GetPortGroup",
			Handler:    _VirtualizationService_GetPortGroup_Handler,
		},
		{
			MethodName: "ListPortGroups",
			Handler:    _VirtualizationService_ListPortGroups_Handler,
		},
		{
			MethodName: "UpdatePortGroup",
			Handler:    _VirtualizationService_UpdatePortGroup_Handler,
		},
		{
			MethodName: "DeletePortGroup",
			Handler:    _VirtualizationService_DeletePortGroup_Handler,
		},
		{
			MethodName: "SetPortGroupSystemServices",
			Handler:    _VirtualizationService_SetPortGroupSystemServices_Handler,
		},
		{
			MethodName: "GetPortGroupSystemServices",
			Handler:    _VirtualizationService_GetPortGroupSystemServices_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _VirtualizationService_CreateNetwork_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _VirtualizationService_GetNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _VirtualizationService_ListNetworks_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _VirtualizationService_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _VirtualizationService_DeleteNetwork_Handler,
		},
		{
			MethodName: "AttachVMToPortGroup",
			Handler:    _VirtualizationService_AttachVMToPortGroup_Handler,
		},
		{
			MethodName: "DetachVMFromPortGroup",
			Handler:    _VirtualizationService_DetachVMFromPortGroup_Handler,
		},
		{
			MethodName: "GetAgentStatus",
			Handler:    _VirtualizationService_GetAgentStatus_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _VirtualizationService_ListAgents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pilab/cloud/virtualization/v1/virtualization.proto",
}
