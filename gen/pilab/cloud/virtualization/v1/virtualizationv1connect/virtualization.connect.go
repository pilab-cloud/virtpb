// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/virtualization/v1/virtualization.proto

package virtualizationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/virtualization/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VirtualizationServiceName is the fully-qualified name of the VirtualizationService service.
	VirtualizationServiceName = "virtualization.VirtualizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VirtualizationServiceCreateTenantProcedure is the fully-qualified name of the
	// VirtualizationService's CreateTenant RPC.
	VirtualizationServiceCreateTenantProcedure = "/virtualization.VirtualizationService/CreateTenant"
	// VirtualizationServiceGetTenantProcedure is the fully-qualified name of the
	// VirtualizationService's GetTenant RPC.
	VirtualizationServiceGetTenantProcedure = "/virtualization.VirtualizationService/GetTenant"
	// VirtualizationServiceListTenantsProcedure is the fully-qualified name of the
	// VirtualizationService's ListTenants RPC.
	VirtualizationServiceListTenantsProcedure = "/virtualization.VirtualizationService/ListTenants"
	// VirtualizationServiceUpdateTenantProcedure is the fully-qualified name of the
	// VirtualizationService's UpdateTenant RPC.
	VirtualizationServiceUpdateTenantProcedure = "/virtualization.VirtualizationService/UpdateTenant"
	// VirtualizationServiceDeleteTenantProcedure is the fully-qualified name of the
	// VirtualizationService's DeleteTenant RPC.
	VirtualizationServiceDeleteTenantProcedure = "/virtualization.VirtualizationService/DeleteTenant"
	// VirtualizationServiceCreatePortGroupProcedure is the fully-qualified name of the
	// VirtualizationService's CreatePortGroup RPC.
	VirtualizationServiceCreatePortGroupProcedure = "/virtualization.VirtualizationService/CreatePortGroup"
	// VirtualizationServiceGetPortGroupProcedure is the fully-qualified name of the
	// VirtualizationService's GetPortGroup RPC.
	VirtualizationServiceGetPortGroupProcedure = "/virtualization.VirtualizationService/GetPortGroup"
	// VirtualizationServiceListPortGroupsProcedure is the fully-qualified name of the
	// VirtualizationService's ListPortGroups RPC.
	VirtualizationServiceListPortGroupsProcedure = "/virtualization.VirtualizationService/ListPortGroups"
	// VirtualizationServiceUpdatePortGroupProcedure is the fully-qualified name of the
	// VirtualizationService's UpdatePortGroup RPC.
	VirtualizationServiceUpdatePortGroupProcedure = "/virtualization.VirtualizationService/UpdatePortGroup"
	// VirtualizationServiceDeletePortGroupProcedure is the fully-qualified name of the
	// VirtualizationService's DeletePortGroup RPC.
	VirtualizationServiceDeletePortGroupProcedure = "/virtualization.VirtualizationService/DeletePortGroup"
	// VirtualizationServiceSetPortGroupSystemServicesProcedure is the fully-qualified name of the
	// VirtualizationService's SetPortGroupSystemServices RPC.
	VirtualizationServiceSetPortGroupSystemServicesProcedure = "/virtualization.VirtualizationService/SetPortGroupSystemServices"
	// VirtualizationServiceGetPortGroupSystemServicesProcedure is the fully-qualified name of the
	// VirtualizationService's GetPortGroupSystemServices RPC.
	VirtualizationServiceGetPortGroupSystemServicesProcedure = "/virtualization.VirtualizationService/GetPortGroupSystemServices"
	// VirtualizationServiceCreateNetworkProcedure is the fully-qualified name of the
	// VirtualizationService's CreateNetwork RPC.
	VirtualizationServiceCreateNetworkProcedure = "/virtualization.VirtualizationService/CreateNetwork"
	// VirtualizationServiceGetNetworkProcedure is the fully-qualified name of the
	// VirtualizationService's GetNetwork RPC.
	VirtualizationServiceGetNetworkProcedure = "/virtualization.VirtualizationService/GetNetwork"
	// VirtualizationServiceListNetworksProcedure is the fully-qualified name of the
	// VirtualizationService's ListNetworks RPC.
	VirtualizationServiceListNetworksProcedure = "/virtualization.VirtualizationService/ListNetworks"
	// VirtualizationServiceUpdateNetworkProcedure is the fully-qualified name of the
	// VirtualizationService's UpdateNetwork RPC.
	VirtualizationServiceUpdateNetworkProcedure = "/virtualization.VirtualizationService/UpdateNetwork"
	// VirtualizationServiceDeleteNetworkProcedure is the fully-qualified name of the
	// VirtualizationService's DeleteNetwork RPC.
	VirtualizationServiceDeleteNetworkProcedure = "/virtualization.VirtualizationService/DeleteNetwork"
	// VirtualizationServiceAttachVMToPortGroupProcedure is the fully-qualified name of the
	// VirtualizationService's AttachVMToPortGroup RPC.
	VirtualizationServiceAttachVMToPortGroupProcedure = "/virtualization.VirtualizationService/AttachVMToPortGroup"
	// VirtualizationServiceDetachVMFromPortGroupProcedure is the fully-qualified name of the
	// VirtualizationService's DetachVMFromPortGroup RPC.
	VirtualizationServiceDetachVMFromPortGroupProcedure = "/virtualization.VirtualizationService/DetachVMFromPortGroup"
	// VirtualizationServiceGetAgentStatusProcedure is the fully-qualified name of the
	// VirtualizationService's GetAgentStatus RPC.
	VirtualizationServiceGetAgentStatusProcedure = "/virtualization.VirtualizationService/GetAgentStatus"
	// VirtualizationServiceListAgentsProcedure is the fully-qualified name of the
	// VirtualizationService's ListAgents RPC.
	VirtualizationServiceListAgentsProcedure = "/virtualization.VirtualizationService/ListAgents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	virtualizationServiceServiceDescriptor                          = v1.File_pilab_cloud_virtualization_v1_virtualization_proto.Services().ByName("VirtualizationService")
	virtualizationServiceCreateTenantMethodDescriptor               = virtualizationServiceServiceDescriptor.Methods().ByName("CreateTenant")
	virtualizationServiceGetTenantMethodDescriptor                  = virtualizationServiceServiceDescriptor.Methods().ByName("GetTenant")
	virtualizationServiceListTenantsMethodDescriptor                = virtualizationServiceServiceDescriptor.Methods().ByName("ListTenants")
	virtualizationServiceUpdateTenantMethodDescriptor               = virtualizationServiceServiceDescriptor.Methods().ByName("UpdateTenant")
	virtualizationServiceDeleteTenantMethodDescriptor               = virtualizationServiceServiceDescriptor.Methods().ByName("DeleteTenant")
	virtualizationServiceCreatePortGroupMethodDescriptor            = virtualizationServiceServiceDescriptor.Methods().ByName("CreatePortGroup")
	virtualizationServiceGetPortGroupMethodDescriptor               = virtualizationServiceServiceDescriptor.Methods().ByName("GetPortGroup")
	virtualizationServiceListPortGroupsMethodDescriptor             = virtualizationServiceServiceDescriptor.Methods().ByName("ListPortGroups")
	virtualizationServiceUpdatePortGroupMethodDescriptor            = virtualizationServiceServiceDescriptor.Methods().ByName("UpdatePortGroup")
	virtualizationServiceDeletePortGroupMethodDescriptor            = virtualizationServiceServiceDescriptor.Methods().ByName("DeletePortGroup")
	virtualizationServiceSetPortGroupSystemServicesMethodDescriptor = virtualizationServiceServiceDescriptor.Methods().ByName("SetPortGroupSystemServices")
	virtualizationServiceGetPortGroupSystemServicesMethodDescriptor = virtualizationServiceServiceDescriptor.Methods().ByName("GetPortGroupSystemServices")
	virtualizationServiceCreateNetworkMethodDescriptor              = virtualizationServiceServiceDescriptor.Methods().ByName("CreateNetwork")
	virtualizationServiceGetNetworkMethodDescriptor                 = virtualizationServiceServiceDescriptor.Methods().ByName("GetNetwork")
	virtualizationServiceListNetworksMethodDescriptor               = virtualizationServiceServiceDescriptor.Methods().ByName("ListNetworks")
	virtualizationServiceUpdateNetworkMethodDescriptor              = virtualizationServiceServiceDescriptor.Methods().ByName("UpdateNetwork")
	virtualizationServiceDeleteNetworkMethodDescriptor              = virtualizationServiceServiceDescriptor.Methods().ByName("DeleteNetwork")
	virtualizationServiceAttachVMToPortGroupMethodDescriptor        = virtualizationServiceServiceDescriptor.Methods().ByName("AttachVMToPortGroup")
	virtualizationServiceDetachVMFromPortGroupMethodDescriptor      = virtualizationServiceServiceDescriptor.Methods().ByName("DetachVMFromPortGroup")
	virtualizationServiceGetAgentStatusMethodDescriptor             = virtualizationServiceServiceDescriptor.Methods().ByName("GetAgentStatus")
	virtualizationServiceListAgentsMethodDescriptor                 = virtualizationServiceServiceDescriptor.Methods().ByName("ListAgents")
)

// VirtualizationServiceClient is a client for the virtualization.VirtualizationService service.
type VirtualizationServiceClient interface {
	// Tenant Management
	CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.Tenant], error)
	GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.Tenant], error)
	ListTenants(context.Context, *connect.Request[v1.ListTenantsRequest]) (*connect.Response[v1.ListTenantsResponse], error)
	UpdateTenant(context.Context, *connect.Request[v1.UpdateTenantRequest]) (*connect.Response[v1.Tenant], error)
	DeleteTenant(context.Context, *connect.Request[v1.DeleteTenantRequest]) (*connect.Response[emptypb.Empty], error)
	// Port Group Management
	CreatePortGroup(context.Context, *connect.Request[v1.CreatePortGroupRequest]) (*connect.Response[v1.PortGroup], error)
	GetPortGroup(context.Context, *connect.Request[v1.GetPortGroupRequest]) (*connect.Response[v1.PortGroup], error)
	ListPortGroups(context.Context, *connect.Request[v1.ListPortGroupsRequest]) (*connect.Response[v1.ListPortGroupsResponse], error)
	UpdatePortGroup(context.Context, *connect.Request[v1.UpdatePortGroupRequest]) (*connect.Response[v1.PortGroup], error)
	DeletePortGroup(context.Context, *connect.Request[v1.DeletePortGroupRequest]) (*connect.Response[emptypb.Empty], error)
	SetPortGroupSystemServices(context.Context, *connect.Request[v1.SetPortGroupSystemServicesRequest]) (*connect.Response[v1.PortGroup], error)
	GetPortGroupSystemServices(context.Context, *connect.Request[v1.GetPortGroupSystemServicesRequest]) (*connect.Response[v1.SystemServicesConfig], error)
	// Network (Logical Switch) Management
	// (In OVN, a Port Group is often associated with a Logical Switch)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error)
	GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.Network], error)
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.Network], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Management
	AttachVMToPortGroup(context.Context, *connect.Request[v1.AttachVMToPortGroupRequest]) (*connect.Response[emptypb.Empty], error)
	DetachVMFromPortGroup(context.Context, *connect.Request[v1.DetachVMFromPortGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// Agent Management
	GetAgentStatus(context.Context, *connect.Request[v1.GetAgentStatusRequest]) (*connect.Response[v1.AgentStatusResponse], error)
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error)
}

// NewVirtualizationServiceClient constructs a client for the virtualization.VirtualizationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVirtualizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VirtualizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &virtualizationServiceClient{
		createTenant: connect.NewClient[v1.CreateTenantRequest, v1.Tenant](
			httpClient,
			baseURL+VirtualizationServiceCreateTenantProcedure,
			connect.WithSchema(virtualizationServiceCreateTenantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTenant: connect.NewClient[v1.GetTenantRequest, v1.Tenant](
			httpClient,
			baseURL+VirtualizationServiceGetTenantProcedure,
			connect.WithSchema(virtualizationServiceGetTenantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTenants: connect.NewClient[v1.ListTenantsRequest, v1.ListTenantsResponse](
			httpClient,
			baseURL+VirtualizationServiceListTenantsProcedure,
			connect.WithSchema(virtualizationServiceListTenantsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTenant: connect.NewClient[v1.UpdateTenantRequest, v1.Tenant](
			httpClient,
			baseURL+VirtualizationServiceUpdateTenantProcedure,
			connect.WithSchema(virtualizationServiceUpdateTenantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTenant: connect.NewClient[v1.DeleteTenantRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualizationServiceDeleteTenantProcedure,
			connect.WithSchema(virtualizationServiceDeleteTenantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPortGroup: connect.NewClient[v1.CreatePortGroupRequest, v1.PortGroup](
			httpClient,
			baseURL+VirtualizationServiceCreatePortGroupProcedure,
			connect.WithSchema(virtualizationServiceCreatePortGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPortGroup: connect.NewClient[v1.GetPortGroupRequest, v1.PortGroup](
			httpClient,
			baseURL+VirtualizationServiceGetPortGroupProcedure,
			connect.WithSchema(virtualizationServiceGetPortGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPortGroups: connect.NewClient[v1.ListPortGroupsRequest, v1.ListPortGroupsResponse](
			httpClient,
			baseURL+VirtualizationServiceListPortGroupsProcedure,
			connect.WithSchema(virtualizationServiceListPortGroupsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePortGroup: connect.NewClient[v1.UpdatePortGroupRequest, v1.PortGroup](
			httpClient,
			baseURL+VirtualizationServiceUpdatePortGroupProcedure,
			connect.WithSchema(virtualizationServiceUpdatePortGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePortGroup: connect.NewClient[v1.DeletePortGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualizationServiceDeletePortGroupProcedure,
			connect.WithSchema(virtualizationServiceDeletePortGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPortGroupSystemServices: connect.NewClient[v1.SetPortGroupSystemServicesRequest, v1.PortGroup](
			httpClient,
			baseURL+VirtualizationServiceSetPortGroupSystemServicesProcedure,
			connect.WithSchema(virtualizationServiceSetPortGroupSystemServicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPortGroupSystemServices: connect.NewClient[v1.GetPortGroupSystemServicesRequest, v1.SystemServicesConfig](
			httpClient,
			baseURL+VirtualizationServiceGetPortGroupSystemServicesProcedure,
			connect.WithSchema(virtualizationServiceGetPortGroupSystemServicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createNetwork: connect.NewClient[v1.CreateNetworkRequest, v1.Network](
			httpClient,
			baseURL+VirtualizationServiceCreateNetworkProcedure,
			connect.WithSchema(virtualizationServiceCreateNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetwork: connect.NewClient[v1.GetNetworkRequest, v1.Network](
			httpClient,
			baseURL+VirtualizationServiceGetNetworkProcedure,
			connect.WithSchema(virtualizationServiceGetNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNetworks: connect.NewClient[v1.ListNetworksRequest, v1.ListNetworksResponse](
			httpClient,
			baseURL+VirtualizationServiceListNetworksProcedure,
			connect.WithSchema(virtualizationServiceListNetworksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNetwork: connect.NewClient[v1.UpdateNetworkRequest, v1.Network](
			httpClient,
			baseURL+VirtualizationServiceUpdateNetworkProcedure,
			connect.WithSchema(virtualizationServiceUpdateNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v1.DeleteNetworkRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualizationServiceDeleteNetworkProcedure,
			connect.WithSchema(virtualizationServiceDeleteNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		attachVMToPortGroup: connect.NewClient[v1.AttachVMToPortGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualizationServiceAttachVMToPortGroupProcedure,
			connect.WithSchema(virtualizationServiceAttachVMToPortGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		detachVMFromPortGroup: connect.NewClient[v1.DetachVMFromPortGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualizationServiceDetachVMFromPortGroupProcedure,
			connect.WithSchema(virtualizationServiceDetachVMFromPortGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAgentStatus: connect.NewClient[v1.GetAgentStatusRequest, v1.AgentStatusResponse](
			httpClient,
			baseURL+VirtualizationServiceGetAgentStatusProcedure,
			connect.WithSchema(virtualizationServiceGetAgentStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAgents: connect.NewClient[v1.ListAgentsRequest, v1.ListAgentsResponse](
			httpClient,
			baseURL+VirtualizationServiceListAgentsProcedure,
			connect.WithSchema(virtualizationServiceListAgentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// virtualizationServiceClient implements VirtualizationServiceClient.
type virtualizationServiceClient struct {
	createTenant               *connect.Client[v1.CreateTenantRequest, v1.Tenant]
	getTenant                  *connect.Client[v1.GetTenantRequest, v1.Tenant]
	listTenants                *connect.Client[v1.ListTenantsRequest, v1.ListTenantsResponse]
	updateTenant               *connect.Client[v1.UpdateTenantRequest, v1.Tenant]
	deleteTenant               *connect.Client[v1.DeleteTenantRequest, emptypb.Empty]
	createPortGroup            *connect.Client[v1.CreatePortGroupRequest, v1.PortGroup]
	getPortGroup               *connect.Client[v1.GetPortGroupRequest, v1.PortGroup]
	listPortGroups             *connect.Client[v1.ListPortGroupsRequest, v1.ListPortGroupsResponse]
	updatePortGroup            *connect.Client[v1.UpdatePortGroupRequest, v1.PortGroup]
	deletePortGroup            *connect.Client[v1.DeletePortGroupRequest, emptypb.Empty]
	setPortGroupSystemServices *connect.Client[v1.SetPortGroupSystemServicesRequest, v1.PortGroup]
	getPortGroupSystemServices *connect.Client[v1.GetPortGroupSystemServicesRequest, v1.SystemServicesConfig]
	createNetwork              *connect.Client[v1.CreateNetworkRequest, v1.Network]
	getNetwork                 *connect.Client[v1.GetNetworkRequest, v1.Network]
	listNetworks               *connect.Client[v1.ListNetworksRequest, v1.ListNetworksResponse]
	updateNetwork              *connect.Client[v1.UpdateNetworkRequest, v1.Network]
	deleteNetwork              *connect.Client[v1.DeleteNetworkRequest, emptypb.Empty]
	attachVMToPortGroup        *connect.Client[v1.AttachVMToPortGroupRequest, emptypb.Empty]
	detachVMFromPortGroup      *connect.Client[v1.DetachVMFromPortGroupRequest, emptypb.Empty]
	getAgentStatus             *connect.Client[v1.GetAgentStatusRequest, v1.AgentStatusResponse]
	listAgents                 *connect.Client[v1.ListAgentsRequest, v1.ListAgentsResponse]
}

// CreateTenant calls virtualization.VirtualizationService.CreateTenant.
func (c *virtualizationServiceClient) CreateTenant(ctx context.Context, req *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.Tenant], error) {
	return c.createTenant.CallUnary(ctx, req)
}

// GetTenant calls virtualization.VirtualizationService.GetTenant.
func (c *virtualizationServiceClient) GetTenant(ctx context.Context, req *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.Tenant], error) {
	return c.getTenant.CallUnary(ctx, req)
}

// ListTenants calls virtualization.VirtualizationService.ListTenants.
func (c *virtualizationServiceClient) ListTenants(ctx context.Context, req *connect.Request[v1.ListTenantsRequest]) (*connect.Response[v1.ListTenantsResponse], error) {
	return c.listTenants.CallUnary(ctx, req)
}

// UpdateTenant calls virtualization.VirtualizationService.UpdateTenant.
func (c *virtualizationServiceClient) UpdateTenant(ctx context.Context, req *connect.Request[v1.UpdateTenantRequest]) (*connect.Response[v1.Tenant], error) {
	return c.updateTenant.CallUnary(ctx, req)
}

// DeleteTenant calls virtualization.VirtualizationService.DeleteTenant.
func (c *virtualizationServiceClient) DeleteTenant(ctx context.Context, req *connect.Request[v1.DeleteTenantRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTenant.CallUnary(ctx, req)
}

// CreatePortGroup calls virtualization.VirtualizationService.CreatePortGroup.
func (c *virtualizationServiceClient) CreatePortGroup(ctx context.Context, req *connect.Request[v1.CreatePortGroupRequest]) (*connect.Response[v1.PortGroup], error) {
	return c.createPortGroup.CallUnary(ctx, req)
}

// GetPortGroup calls virtualization.VirtualizationService.GetPortGroup.
func (c *virtualizationServiceClient) GetPortGroup(ctx context.Context, req *connect.Request[v1.GetPortGroupRequest]) (*connect.Response[v1.PortGroup], error) {
	return c.getPortGroup.CallUnary(ctx, req)
}

// ListPortGroups calls virtualization.VirtualizationService.ListPortGroups.
func (c *virtualizationServiceClient) ListPortGroups(ctx context.Context, req *connect.Request[v1.ListPortGroupsRequest]) (*connect.Response[v1.ListPortGroupsResponse], error) {
	return c.listPortGroups.CallUnary(ctx, req)
}

// UpdatePortGroup calls virtualization.VirtualizationService.UpdatePortGroup.
func (c *virtualizationServiceClient) UpdatePortGroup(ctx context.Context, req *connect.Request[v1.UpdatePortGroupRequest]) (*connect.Response[v1.PortGroup], error) {
	return c.updatePortGroup.CallUnary(ctx, req)
}

// DeletePortGroup calls virtualization.VirtualizationService.DeletePortGroup.
func (c *virtualizationServiceClient) DeletePortGroup(ctx context.Context, req *connect.Request[v1.DeletePortGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deletePortGroup.CallUnary(ctx, req)
}

// SetPortGroupSystemServices calls virtualization.VirtualizationService.SetPortGroupSystemServices.
func (c *virtualizationServiceClient) SetPortGroupSystemServices(ctx context.Context, req *connect.Request[v1.SetPortGroupSystemServicesRequest]) (*connect.Response[v1.PortGroup], error) {
	return c.setPortGroupSystemServices.CallUnary(ctx, req)
}

// GetPortGroupSystemServices calls virtualization.VirtualizationService.GetPortGroupSystemServices.
func (c *virtualizationServiceClient) GetPortGroupSystemServices(ctx context.Context, req *connect.Request[v1.GetPortGroupSystemServicesRequest]) (*connect.Response[v1.SystemServicesConfig], error) {
	return c.getPortGroupSystemServices.CallUnary(ctx, req)
}

// CreateNetwork calls virtualization.VirtualizationService.CreateNetwork.
func (c *virtualizationServiceClient) CreateNetwork(ctx context.Context, req *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// GetNetwork calls virtualization.VirtualizationService.GetNetwork.
func (c *virtualizationServiceClient) GetNetwork(ctx context.Context, req *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.Network], error) {
	return c.getNetwork.CallUnary(ctx, req)
}

// ListNetworks calls virtualization.VirtualizationService.ListNetworks.
func (c *virtualizationServiceClient) ListNetworks(ctx context.Context, req *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// UpdateNetwork calls virtualization.VirtualizationService.UpdateNetwork.
func (c *virtualizationServiceClient) UpdateNetwork(ctx context.Context, req *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return c.updateNetwork.CallUnary(ctx, req)
}

// DeleteNetwork calls virtualization.VirtualizationService.DeleteNetwork.
func (c *virtualizationServiceClient) DeleteNetwork(ctx context.Context, req *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// AttachVMToPortGroup calls virtualization.VirtualizationService.AttachVMToPortGroup.
func (c *virtualizationServiceClient) AttachVMToPortGroup(ctx context.Context, req *connect.Request[v1.AttachVMToPortGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.attachVMToPortGroup.CallUnary(ctx, req)
}

// DetachVMFromPortGroup calls virtualization.VirtualizationService.DetachVMFromPortGroup.
func (c *virtualizationServiceClient) DetachVMFromPortGroup(ctx context.Context, req *connect.Request[v1.DetachVMFromPortGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.detachVMFromPortGroup.CallUnary(ctx, req)
}

// GetAgentStatus calls virtualization.VirtualizationService.GetAgentStatus.
func (c *virtualizationServiceClient) GetAgentStatus(ctx context.Context, req *connect.Request[v1.GetAgentStatusRequest]) (*connect.Response[v1.AgentStatusResponse], error) {
	return c.getAgentStatus.CallUnary(ctx, req)
}

// ListAgents calls virtualization.VirtualizationService.ListAgents.
func (c *virtualizationServiceClient) ListAgents(ctx context.Context, req *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error) {
	return c.listAgents.CallUnary(ctx, req)
}

// VirtualizationServiceHandler is an implementation of the virtualization.VirtualizationService
// service.
type VirtualizationServiceHandler interface {
	// Tenant Management
	CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.Tenant], error)
	GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.Tenant], error)
	ListTenants(context.Context, *connect.Request[v1.ListTenantsRequest]) (*connect.Response[v1.ListTenantsResponse], error)
	UpdateTenant(context.Context, *connect.Request[v1.UpdateTenantRequest]) (*connect.Response[v1.Tenant], error)
	DeleteTenant(context.Context, *connect.Request[v1.DeleteTenantRequest]) (*connect.Response[emptypb.Empty], error)
	// Port Group Management
	CreatePortGroup(context.Context, *connect.Request[v1.CreatePortGroupRequest]) (*connect.Response[v1.PortGroup], error)
	GetPortGroup(context.Context, *connect.Request[v1.GetPortGroupRequest]) (*connect.Response[v1.PortGroup], error)
	ListPortGroups(context.Context, *connect.Request[v1.ListPortGroupsRequest]) (*connect.Response[v1.ListPortGroupsResponse], error)
	UpdatePortGroup(context.Context, *connect.Request[v1.UpdatePortGroupRequest]) (*connect.Response[v1.PortGroup], error)
	DeletePortGroup(context.Context, *connect.Request[v1.DeletePortGroupRequest]) (*connect.Response[emptypb.Empty], error)
	SetPortGroupSystemServices(context.Context, *connect.Request[v1.SetPortGroupSystemServicesRequest]) (*connect.Response[v1.PortGroup], error)
	GetPortGroupSystemServices(context.Context, *connect.Request[v1.GetPortGroupSystemServicesRequest]) (*connect.Response[v1.SystemServicesConfig], error)
	// Network (Logical Switch) Management
	// (In OVN, a Port Group is often associated with a Logical Switch)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error)
	GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.Network], error)
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.Network], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Management
	AttachVMToPortGroup(context.Context, *connect.Request[v1.AttachVMToPortGroupRequest]) (*connect.Response[emptypb.Empty], error)
	DetachVMFromPortGroup(context.Context, *connect.Request[v1.DetachVMFromPortGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// Agent Management
	GetAgentStatus(context.Context, *connect.Request[v1.GetAgentStatusRequest]) (*connect.Response[v1.AgentStatusResponse], error)
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error)
}

// NewVirtualizationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVirtualizationServiceHandler(svc VirtualizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	virtualizationServiceCreateTenantHandler := connect.NewUnaryHandler(
		VirtualizationServiceCreateTenantProcedure,
		svc.CreateTenant,
		connect.WithSchema(virtualizationServiceCreateTenantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceGetTenantHandler := connect.NewUnaryHandler(
		VirtualizationServiceGetTenantProcedure,
		svc.GetTenant,
		connect.WithSchema(virtualizationServiceGetTenantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceListTenantsHandler := connect.NewUnaryHandler(
		VirtualizationServiceListTenantsProcedure,
		svc.ListTenants,
		connect.WithSchema(virtualizationServiceListTenantsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceUpdateTenantHandler := connect.NewUnaryHandler(
		VirtualizationServiceUpdateTenantProcedure,
		svc.UpdateTenant,
		connect.WithSchema(virtualizationServiceUpdateTenantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceDeleteTenantHandler := connect.NewUnaryHandler(
		VirtualizationServiceDeleteTenantProcedure,
		svc.DeleteTenant,
		connect.WithSchema(virtualizationServiceDeleteTenantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceCreatePortGroupHandler := connect.NewUnaryHandler(
		VirtualizationServiceCreatePortGroupProcedure,
		svc.CreatePortGroup,
		connect.WithSchema(virtualizationServiceCreatePortGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceGetPortGroupHandler := connect.NewUnaryHandler(
		VirtualizationServiceGetPortGroupProcedure,
		svc.GetPortGroup,
		connect.WithSchema(virtualizationServiceGetPortGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceListPortGroupsHandler := connect.NewUnaryHandler(
		VirtualizationServiceListPortGroupsProcedure,
		svc.ListPortGroups,
		connect.WithSchema(virtualizationServiceListPortGroupsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceUpdatePortGroupHandler := connect.NewUnaryHandler(
		VirtualizationServiceUpdatePortGroupProcedure,
		svc.UpdatePortGroup,
		connect.WithSchema(virtualizationServiceUpdatePortGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceDeletePortGroupHandler := connect.NewUnaryHandler(
		VirtualizationServiceDeletePortGroupProcedure,
		svc.DeletePortGroup,
		connect.WithSchema(virtualizationServiceDeletePortGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceSetPortGroupSystemServicesHandler := connect.NewUnaryHandler(
		VirtualizationServiceSetPortGroupSystemServicesProcedure,
		svc.SetPortGroupSystemServices,
		connect.WithSchema(virtualizationServiceSetPortGroupSystemServicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceGetPortGroupSystemServicesHandler := connect.NewUnaryHandler(
		VirtualizationServiceGetPortGroupSystemServicesProcedure,
		svc.GetPortGroupSystemServices,
		connect.WithSchema(virtualizationServiceGetPortGroupSystemServicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceCreateNetworkHandler := connect.NewUnaryHandler(
		VirtualizationServiceCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(virtualizationServiceCreateNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceGetNetworkHandler := connect.NewUnaryHandler(
		VirtualizationServiceGetNetworkProcedure,
		svc.GetNetwork,
		connect.WithSchema(virtualizationServiceGetNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceListNetworksHandler := connect.NewUnaryHandler(
		VirtualizationServiceListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(virtualizationServiceListNetworksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceUpdateNetworkHandler := connect.NewUnaryHandler(
		VirtualizationServiceUpdateNetworkProcedure,
		svc.UpdateNetwork,
		connect.WithSchema(virtualizationServiceUpdateNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceDeleteNetworkHandler := connect.NewUnaryHandler(
		VirtualizationServiceDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(virtualizationServiceDeleteNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceAttachVMToPortGroupHandler := connect.NewUnaryHandler(
		VirtualizationServiceAttachVMToPortGroupProcedure,
		svc.AttachVMToPortGroup,
		connect.WithSchema(virtualizationServiceAttachVMToPortGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceDetachVMFromPortGroupHandler := connect.NewUnaryHandler(
		VirtualizationServiceDetachVMFromPortGroupProcedure,
		svc.DetachVMFromPortGroup,
		connect.WithSchema(virtualizationServiceDetachVMFromPortGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceGetAgentStatusHandler := connect.NewUnaryHandler(
		VirtualizationServiceGetAgentStatusProcedure,
		svc.GetAgentStatus,
		connect.WithSchema(virtualizationServiceGetAgentStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	virtualizationServiceListAgentsHandler := connect.NewUnaryHandler(
		VirtualizationServiceListAgentsProcedure,
		svc.ListAgents,
		connect.WithSchema(virtualizationServiceListAgentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/virtualization.VirtualizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VirtualizationServiceCreateTenantProcedure:
			virtualizationServiceCreateTenantHandler.ServeHTTP(w, r)
		case VirtualizationServiceGetTenantProcedure:
			virtualizationServiceGetTenantHandler.ServeHTTP(w, r)
		case VirtualizationServiceListTenantsProcedure:
			virtualizationServiceListTenantsHandler.ServeHTTP(w, r)
		case VirtualizationServiceUpdateTenantProcedure:
			virtualizationServiceUpdateTenantHandler.ServeHTTP(w, r)
		case VirtualizationServiceDeleteTenantProcedure:
			virtualizationServiceDeleteTenantHandler.ServeHTTP(w, r)
		case VirtualizationServiceCreatePortGroupProcedure:
			virtualizationServiceCreatePortGroupHandler.ServeHTTP(w, r)
		case VirtualizationServiceGetPortGroupProcedure:
			virtualizationServiceGetPortGroupHandler.ServeHTTP(w, r)
		case VirtualizationServiceListPortGroupsProcedure:
			virtualizationServiceListPortGroupsHandler.ServeHTTP(w, r)
		case VirtualizationServiceUpdatePortGroupProcedure:
			virtualizationServiceUpdatePortGroupHandler.ServeHTTP(w, r)
		case VirtualizationServiceDeletePortGroupProcedure:
			virtualizationServiceDeletePortGroupHandler.ServeHTTP(w, r)
		case VirtualizationServiceSetPortGroupSystemServicesProcedure:
			virtualizationServiceSetPortGroupSystemServicesHandler.ServeHTTP(w, r)
		case VirtualizationServiceGetPortGroupSystemServicesProcedure:
			virtualizationServiceGetPortGroupSystemServicesHandler.ServeHTTP(w, r)
		case VirtualizationServiceCreateNetworkProcedure:
			virtualizationServiceCreateNetworkHandler.ServeHTTP(w, r)
		case VirtualizationServiceGetNetworkProcedure:
			virtualizationServiceGetNetworkHandler.ServeHTTP(w, r)
		case VirtualizationServiceListNetworksProcedure:
			virtualizationServiceListNetworksHandler.ServeHTTP(w, r)
		case VirtualizationServiceUpdateNetworkProcedure:
			virtualizationServiceUpdateNetworkHandler.ServeHTTP(w, r)
		case VirtualizationServiceDeleteNetworkProcedure:
			virtualizationServiceDeleteNetworkHandler.ServeHTTP(w, r)
		case VirtualizationServiceAttachVMToPortGroupProcedure:
			virtualizationServiceAttachVMToPortGroupHandler.ServeHTTP(w, r)
		case VirtualizationServiceDetachVMFromPortGroupProcedure:
			virtualizationServiceDetachVMFromPortGroupHandler.ServeHTTP(w, r)
		case VirtualizationServiceGetAgentStatusProcedure:
			virtualizationServiceGetAgentStatusHandler.ServeHTTP(w, r)
		case VirtualizationServiceListAgentsProcedure:
			virtualizationServiceListAgentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVirtualizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVirtualizationServiceHandler struct{}

func (UnimplementedVirtualizationServiceHandler) CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.Tenant], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.CreateTenant is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.Tenant], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.GetTenant is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) ListTenants(context.Context, *connect.Request[v1.ListTenantsRequest]) (*connect.Response[v1.ListTenantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.ListTenants is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) UpdateTenant(context.Context, *connect.Request[v1.UpdateTenantRequest]) (*connect.Response[v1.Tenant], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.UpdateTenant is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) DeleteTenant(context.Context, *connect.Request[v1.DeleteTenantRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.DeleteTenant is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) CreatePortGroup(context.Context, *connect.Request[v1.CreatePortGroupRequest]) (*connect.Response[v1.PortGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.CreatePortGroup is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) GetPortGroup(context.Context, *connect.Request[v1.GetPortGroupRequest]) (*connect.Response[v1.PortGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.GetPortGroup is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) ListPortGroups(context.Context, *connect.Request[v1.ListPortGroupsRequest]) (*connect.Response[v1.ListPortGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.ListPortGroups is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) UpdatePortGroup(context.Context, *connect.Request[v1.UpdatePortGroupRequest]) (*connect.Response[v1.PortGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.UpdatePortGroup is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) DeletePortGroup(context.Context, *connect.Request[v1.DeletePortGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.DeletePortGroup is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) SetPortGroupSystemServices(context.Context, *connect.Request[v1.SetPortGroupSystemServicesRequest]) (*connect.Response[v1.PortGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.SetPortGroupSystemServices is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) GetPortGroupSystemServices(context.Context, *connect.Request[v1.GetPortGroupSystemServicesRequest]) (*connect.Response[v1.SystemServicesConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.GetPortGroupSystemServices is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.CreateNetwork is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.Network], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.GetNetwork is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.ListNetworks is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.UpdateNetwork is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.DeleteNetwork is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) AttachVMToPortGroup(context.Context, *connect.Request[v1.AttachVMToPortGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.AttachVMToPortGroup is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) DetachVMFromPortGroup(context.Context, *connect.Request[v1.DetachVMFromPortGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.DetachVMFromPortGroup is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) GetAgentStatus(context.Context, *connect.Request[v1.GetAgentStatusRequest]) (*connect.Response[v1.AgentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.GetAgentStatus is not implemented"))
}

func (UnimplementedVirtualizationServiceHandler) ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtualization.VirtualizationService.ListAgents is not implemented"))
}
