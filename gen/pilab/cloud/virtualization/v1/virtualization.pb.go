// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: pilab/cloud/virtualization/v1/virtualization.proto

package virtualizationv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortGroupType int32

const (
	PortGroupType_PORT_GROUP_TYPE_UNSPECIFIED PortGroupType = 0
	PortGroupType_PORT_GROUP_TYPE_VM          PortGroupType = 1 // For Virtual Machines
	PortGroupType_PORT_GROUP_TYPE_SYSTEM      PortGroupType = 2 // For System Services
)

// Enum value maps for PortGroupType.
var (
	PortGroupType_name = map[int32]string{
		0: "PORT_GROUP_TYPE_UNSPECIFIED",
		1: "PORT_GROUP_TYPE_VM",
		2: "PORT_GROUP_TYPE_SYSTEM",
	}
	PortGroupType_value = map[string]int32{
		"PORT_GROUP_TYPE_UNSPECIFIED": 0,
		"PORT_GROUP_TYPE_VM":          1,
		"PORT_GROUP_TYPE_SYSTEM":      2,
	}
)

func (x PortGroupType) Enum() *PortGroupType {
	p := new(PortGroupType)
	*p = x
	return p
}

func (x PortGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_enumTypes[0].Descriptor()
}

func (PortGroupType) Type() protoreflect.EnumType {
	return &file_pilab_cloud_virtualization_v1_virtualization_proto_enumTypes[0]
}

func (x PortGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortGroupType.Descriptor instead.
func (PortGroupType) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{0}
}

type LoadBalancerAlgorithm int32

const (
	LoadBalancerAlgorithm_LB_ALGORITHM_UNSPECIFIED    LoadBalancerAlgorithm = 0
	LoadBalancerAlgorithm_LB_ALGORITHM_SOURCE_MAC     LoadBalancerAlgorithm = 1
	LoadBalancerAlgorithm_LB_ALGORITHM_SOURCE_DEST_IP LoadBalancerAlgorithm = 2
	LoadBalancerAlgorithm_LB_ALGORITHM_LACP           LoadBalancerAlgorithm = 3
	LoadBalancerAlgorithm_LB_ALGORITHM_ACTIVE_BACKUP  LoadBalancerAlgorithm = 4
)

// Enum value maps for LoadBalancerAlgorithm.
var (
	LoadBalancerAlgorithm_name = map[int32]string{
		0: "LB_ALGORITHM_UNSPECIFIED",
		1: "LB_ALGORITHM_SOURCE_MAC",
		2: "LB_ALGORITHM_SOURCE_DEST_IP",
		3: "LB_ALGORITHM_LACP",
		4: "LB_ALGORITHM_ACTIVE_BACKUP",
	}
	LoadBalancerAlgorithm_value = map[string]int32{
		"LB_ALGORITHM_UNSPECIFIED":    0,
		"LB_ALGORITHM_SOURCE_MAC":     1,
		"LB_ALGORITHM_SOURCE_DEST_IP": 2,
		"LB_ALGORITHM_LACP":           3,
		"LB_ALGORITHM_ACTIVE_BACKUP":  4,
	}
)

func (x LoadBalancerAlgorithm) Enum() *LoadBalancerAlgorithm {
	p := new(LoadBalancerAlgorithm)
	*p = x
	return p
}

func (x LoadBalancerAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancerAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_enumTypes[1].Descriptor()
}

func (LoadBalancerAlgorithm) Type() protoreflect.EnumType {
	return &file_pilab_cloud_virtualization_v1_virtualization_proto_enumTypes[1]
}

func (x LoadBalancerAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancerAlgorithm.Descriptor instead.
func (LoadBalancerAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{1}
}

type SecurityPolicyAction int32

const (
	SecurityPolicyAction_SECURITY_POLICY_ACTION_UNSPECIFIED SecurityPolicyAction = 0
	SecurityPolicyAction_SECURITY_POLICY_ACTION_ALLOW       SecurityPolicyAction = 1
	SecurityPolicyAction_SECURITY_POLICY_ACTION_REJECT      SecurityPolicyAction = 2
)

// Enum value maps for SecurityPolicyAction.
var (
	SecurityPolicyAction_name = map[int32]string{
		0: "SECURITY_POLICY_ACTION_UNSPECIFIED",
		1: "SECURITY_POLICY_ACTION_ALLOW",
		2: "SECURITY_POLICY_ACTION_REJECT",
	}
	SecurityPolicyAction_value = map[string]int32{
		"SECURITY_POLICY_ACTION_UNSPECIFIED": 0,
		"SECURITY_POLICY_ACTION_ALLOW":       1,
		"SECURITY_POLICY_ACTION_REJECT":      2,
	}
)

func (x SecurityPolicyAction) Enum() *SecurityPolicyAction {
	p := new(SecurityPolicyAction)
	*p = x
	return p
}

func (x SecurityPolicyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityPolicyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_enumTypes[2].Descriptor()
}

func (SecurityPolicyAction) Type() protoreflect.EnumType {
	return &file_pilab_cloud_virtualization_v1_virtualization_proto_enumTypes[2]
}

func (x SecurityPolicyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityPolicyAction.Descriptor instead.
func (SecurityPolicyAction) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{2}
}

// --- Tenant ---
type Tenant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{0}
}

func (x *Tenant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tenant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTenantRequest) Reset() {
	*x = CreateTenantRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantRequest) ProtoMessage() {}

func (x *CreateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantRequest.ProtoReflect.Descriptor instead.
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTenantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTenantRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTenantRequest) Reset() {
	*x = GetTenantRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantRequest) ProtoMessage() {}

func (x *GetTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantRequest.ProtoReflect.Descriptor instead.
func (*GetTenantRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{2}
}

func (x *GetTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ListTenantsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTenantsRequest) Reset() {
	*x = ListTenantsRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTenantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantsRequest) ProtoMessage() {}

func (x *ListTenantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantsRequest.ProtoReflect.Descriptor instead.
func (*ListTenantsRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{3}
}

func (x *ListTenantsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTenantsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTenantsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenants       []*Tenant              `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTenantsResponse) Reset() {
	*x = ListTenantsResponse{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTenantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantsResponse) ProtoMessage() {}

func (x *ListTenantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantsResponse.ProtoReflect.Descriptor instead.
func (*ListTenantsResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{4}
}

func (x *ListTenantsResponse) GetTenants() []*Tenant {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *ListTenantsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Tenant        *Tenant                `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTenantRequest) Reset() {
	*x = UpdateTenantRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantRequest) ProtoMessage() {}

func (x *UpdateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantRequest.ProtoReflect.Descriptor instead.
func (*UpdateTenantRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateTenantRequest) GetTenant() *Tenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

type DeleteTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTenantRequest) Reset() {
	*x = DeleteTenantRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantRequest) ProtoMessage() {}

func (x *DeleteTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantRequest.ProtoReflect.Descriptor instead.
func (*DeleteTenantRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// --- Port Group ---
type PortGroup struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId             string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // FK to Tenant
	Name                 string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type                 PortGroupType          `protobuf:"varint,4,opt,name=type,proto3,enum=virtualization.PortGroupType" json:"type,omitempty"`
	VlanId               int32                  `protobuf:"varint,5,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"` // 0 for untagged, 1-4094 for tagged
	SecurityPolicy       *SecurityPolicy        `protobuf:"bytes,6,opt,name=security_policy,json=securityPolicy,proto3" json:"security_policy,omitempty"`
	TrafficShapingPolicy *TrafficShapingPolicy  `protobuf:"bytes,7,opt,name=traffic_shaping_policy,json=trafficShapingPolicy,proto3" json:"traffic_shaping_policy,omitempty"`
	TeamingPolicy        *TeamingPolicy         `protobuf:"bytes,8,opt,name=teaming_policy,json=teamingPolicy,proto3" json:"teaming_policy,omitempty"`
	SystemServices       *SystemServicesConfig  `protobuf:"bytes,9,opt,name=system_services,json=systemServices,proto3" json:"system_services,omitempty"` // Configuration for system services
	NetworkId            string                 `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`               // ID of the associated OVN network (logical switch)
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PortGroup) Reset() {
	*x = PortGroup{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortGroup) ProtoMessage() {}

func (x *PortGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortGroup.ProtoReflect.Descriptor instead.
func (*PortGroup) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{7}
}

func (x *PortGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PortGroup) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *PortGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortGroup) GetType() PortGroupType {
	if x != nil {
		return x.Type
	}
	return PortGroupType_PORT_GROUP_TYPE_UNSPECIFIED
}

func (x *PortGroup) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *PortGroup) GetSecurityPolicy() *SecurityPolicy {
	if x != nil {
		return x.SecurityPolicy
	}
	return nil
}

func (x *PortGroup) GetTrafficShapingPolicy() *TrafficShapingPolicy {
	if x != nil {
		return x.TrafficShapingPolicy
	}
	return nil
}

func (x *PortGroup) GetTeamingPolicy() *TeamingPolicy {
	if x != nil {
		return x.TeamingPolicy
	}
	return nil
}

func (x *PortGroup) GetSystemServices() *SystemServicesConfig {
	if x != nil {
		return x.SystemServices
	}
	return nil
}

func (x *PortGroup) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type CreatePortGroupRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TenantId             string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 PortGroupType          `protobuf:"varint,3,opt,name=type,proto3,enum=virtualization.PortGroupType" json:"type,omitempty"`
	VlanId               int32                  `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	SecurityPolicy       *SecurityPolicy        `protobuf:"bytes,5,opt,name=security_policy,json=securityPolicy,proto3" json:"security_policy,omitempty"`
	TrafficShapingPolicy *TrafficShapingPolicy  `protobuf:"bytes,6,opt,name=traffic_shaping_policy,json=trafficShapingPolicy,proto3" json:"traffic_shaping_policy,omitempty"`
	TeamingPolicy        *TeamingPolicy         `protobuf:"bytes,7,opt,name=teaming_policy,json=teamingPolicy,proto3" json:"teaming_policy,omitempty"`
	SystemServices       *SystemServicesConfig  `protobuf:"bytes,8,opt,name=system_services,json=systemServices,proto3" json:"system_services,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreatePortGroupRequest) Reset() {
	*x = CreatePortGroupRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePortGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortGroupRequest) ProtoMessage() {}

func (x *CreatePortGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortGroupRequest.ProtoReflect.Descriptor instead.
func (*CreatePortGroupRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{8}
}

func (x *CreatePortGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreatePortGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePortGroupRequest) GetType() PortGroupType {
	if x != nil {
		return x.Type
	}
	return PortGroupType_PORT_GROUP_TYPE_UNSPECIFIED
}

func (x *CreatePortGroupRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *CreatePortGroupRequest) GetSecurityPolicy() *SecurityPolicy {
	if x != nil {
		return x.SecurityPolicy
	}
	return nil
}

func (x *CreatePortGroupRequest) GetTrafficShapingPolicy() *TrafficShapingPolicy {
	if x != nil {
		return x.TrafficShapingPolicy
	}
	return nil
}

func (x *CreatePortGroupRequest) GetTeamingPolicy() *TeamingPolicy {
	if x != nil {
		return x.TeamingPolicy
	}
	return nil
}

func (x *CreatePortGroupRequest) GetSystemServices() *SystemServicesConfig {
	if x != nil {
		return x.SystemServices
	}
	return nil
}

type GetPortGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PortGroupId   string                 `protobuf:"bytes,2,opt,name=port_group_id,json=portGroupId,proto3" json:"port_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPortGroupRequest) Reset() {
	*x = GetPortGroupRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPortGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortGroupRequest) ProtoMessage() {}

func (x *GetPortGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortGroupRequest.ProtoReflect.Descriptor instead.
func (*GetPortGroupRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{9}
}

func (x *GetPortGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetPortGroupRequest) GetPortGroupId() string {
	if x != nil {
		return x.PortGroupId
	}
	return ""
}

type ListPortGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPortGroupsRequest) Reset() {
	*x = ListPortGroupsRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPortGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortGroupsRequest) ProtoMessage() {}

func (x *ListPortGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListPortGroupsRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{10}
}

func (x *ListPortGroupsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListPortGroupsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPortGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPortGroupsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PortGroups    []*PortGroup           `protobuf:"bytes,1,rep,name=port_groups,json=portGroups,proto3" json:"port_groups,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPortGroupsResponse) Reset() {
	*x = ListPortGroupsResponse{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPortGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortGroupsResponse) ProtoMessage() {}

func (x *ListPortGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListPortGroupsResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{11}
}

func (x *ListPortGroupsResponse) GetPortGroups() []*PortGroup {
	if x != nil {
		return x.PortGroups
	}
	return nil
}

func (x *ListPortGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdatePortGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PortGroupId   string                 `protobuf:"bytes,2,opt,name=port_group_id,json=portGroupId,proto3" json:"port_group_id,omitempty"`
	PortGroup     *PortGroup             `protobuf:"bytes,3,opt,name=port_group,json=portGroup,proto3" json:"port_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePortGroupRequest) Reset() {
	*x = UpdatePortGroupRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePortGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortGroupRequest) ProtoMessage() {}

func (x *UpdatePortGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdatePortGroupRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{12}
}

func (x *UpdatePortGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdatePortGroupRequest) GetPortGroupId() string {
	if x != nil {
		return x.PortGroupId
	}
	return ""
}

func (x *UpdatePortGroupRequest) GetPortGroup() *PortGroup {
	if x != nil {
		return x.PortGroup
	}
	return nil
}

type DeletePortGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PortGroupId   string                 `protobuf:"bytes,2,opt,name=port_group_id,json=portGroupId,proto3" json:"port_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePortGroupRequest) Reset() {
	*x = DeletePortGroupRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePortGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortGroupRequest) ProtoMessage() {}

func (x *DeletePortGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortGroupRequest.ProtoReflect.Descriptor instead.
func (*DeletePortGroupRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{13}
}

func (x *DeletePortGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeletePortGroupRequest) GetPortGroupId() string {
	if x != nil {
		return x.PortGroupId
	}
	return ""
}

// -- System Port Group
type SystemServicesConfig struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ManagementEnabled     bool                   `protobuf:"varint,1,opt,name=management_enabled,json=managementEnabled,proto3" json:"management_enabled,omitempty"`
	VmotionEnabled        bool                   `protobuf:"varint,2,opt,name=vmotion_enabled,json=vmotionEnabled,proto3" json:"vmotion_enabled,omitempty"`
	IscsiEnabled          bool                   `protobuf:"varint,3,opt,name=iscsi_enabled,json=iscsiEnabled,proto3" json:"iscsi_enabled,omitempty"`
	FaultToleranceEnabled bool                   `protobuf:"varint,4,opt,name=fault_tolerance_enabled,json=faultToleranceEnabled,proto3" json:"fault_tolerance_enabled,omitempty"`
	// Optional: specify netns usage
	UseNetnsForManagement bool `protobuf:"varint,5,opt,name=use_netns_for_management,json=useNetnsForManagement,proto3" json:"use_netns_for_management,omitempty"`
	UseNetnsForIscsi      bool `protobuf:"varint,6,opt,name=use_netns_for_iscsi,json=useNetnsForIscsi,proto3" json:"use_netns_for_iscsi,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SystemServicesConfig) Reset() {
	*x = SystemServicesConfig{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemServicesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemServicesConfig) ProtoMessage() {}

func (x *SystemServicesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemServicesConfig.ProtoReflect.Descriptor instead.
func (*SystemServicesConfig) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{14}
}

func (x *SystemServicesConfig) GetManagementEnabled() bool {
	if x != nil {
		return x.ManagementEnabled
	}
	return false
}

func (x *SystemServicesConfig) GetVmotionEnabled() bool {
	if x != nil {
		return x.VmotionEnabled
	}
	return false
}

func (x *SystemServicesConfig) GetIscsiEnabled() bool {
	if x != nil {
		return x.IscsiEnabled
	}
	return false
}

func (x *SystemServicesConfig) GetFaultToleranceEnabled() bool {
	if x != nil {
		return x.FaultToleranceEnabled
	}
	return false
}

func (x *SystemServicesConfig) GetUseNetnsForManagement() bool {
	if x != nil {
		return x.UseNetnsForManagement
	}
	return false
}

func (x *SystemServicesConfig) GetUseNetnsForIscsi() bool {
	if x != nil {
		return x.UseNetnsForIscsi
	}
	return false
}

type SetPortGroupSystemServicesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TenantId       string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PortGroupId    string                 `protobuf:"bytes,2,opt,name=port_group_id,json=portGroupId,proto3" json:"port_group_id,omitempty"`
	SystemServices *SystemServicesConfig  `protobuf:"bytes,3,opt,name=system_services,json=systemServices,proto3" json:"system_services,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SetPortGroupSystemServicesRequest) Reset() {
	*x = SetPortGroupSystemServicesRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPortGroupSystemServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortGroupSystemServicesRequest) ProtoMessage() {}

func (x *SetPortGroupSystemServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortGroupSystemServicesRequest.ProtoReflect.Descriptor instead.
func (*SetPortGroupSystemServicesRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{15}
}

func (x *SetPortGroupSystemServicesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SetPortGroupSystemServicesRequest) GetPortGroupId() string {
	if x != nil {
		return x.PortGroupId
	}
	return ""
}

func (x *SetPortGroupSystemServicesRequest) GetSystemServices() *SystemServicesConfig {
	if x != nil {
		return x.SystemServices
	}
	return nil
}

type GetPortGroupSystemServicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PortGroupId   string                 `protobuf:"bytes,2,opt,name=port_group_id,json=portGroupId,proto3" json:"port_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPortGroupSystemServicesRequest) Reset() {
	*x = GetPortGroupSystemServicesRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPortGroupSystemServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortGroupSystemServicesRequest) ProtoMessage() {}

func (x *GetPortGroupSystemServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortGroupSystemServicesRequest.ProtoReflect.Descriptor instead.
func (*GetPortGroupSystemServicesRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{16}
}

func (x *GetPortGroupSystemServicesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetPortGroupSystemServicesRequest) GetPortGroupId() string {
	if x != nil {
		return x.PortGroupId
	}
	return ""
}

// --- Security Policy ---
type SecurityPolicy struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PromiscuousMode   SecurityPolicyAction   `protobuf:"varint,1,opt,name=promiscuous_mode,json=promiscuousMode,proto3,enum=virtualization.SecurityPolicyAction" json:"promiscuous_mode,omitempty"`
	MacAddressChanges SecurityPolicyAction   `protobuf:"varint,2,opt,name=mac_address_changes,json=macAddressChanges,proto3,enum=virtualization.SecurityPolicyAction" json:"mac_address_changes,omitempty"`
	ForgedTransmits   SecurityPolicyAction   `protobuf:"varint,3,opt,name=forged_transmits,json=forgedTransmits,proto3,enum=virtualization.SecurityPolicyAction" json:"forged_transmits,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SecurityPolicy) Reset() {
	*x = SecurityPolicy{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicy) ProtoMessage() {}

func (x *SecurityPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicy.ProtoReflect.Descriptor instead.
func (*SecurityPolicy) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{17}
}

func (x *SecurityPolicy) GetPromiscuousMode() SecurityPolicyAction {
	if x != nil {
		return x.PromiscuousMode
	}
	return SecurityPolicyAction_SECURITY_POLICY_ACTION_UNSPECIFIED
}

func (x *SecurityPolicy) GetMacAddressChanges() SecurityPolicyAction {
	if x != nil {
		return x.MacAddressChanges
	}
	return SecurityPolicyAction_SECURITY_POLICY_ACTION_UNSPECIFIED
}

func (x *SecurityPolicy) GetForgedTransmits() SecurityPolicyAction {
	if x != nil {
		return x.ForgedTransmits
	}
	return SecurityPolicyAction_SECURITY_POLICY_ACTION_UNSPECIFIED
}

// --- Traffic Shaping Policy ---
type TrafficShapingPolicy struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AverageBandwidthKbps int32                  `protobuf:"varint,1,opt,name=average_bandwidth_kbps,json=averageBandwidthKbps,proto3" json:"average_bandwidth_kbps,omitempty"`
	PeakBandwidthKbps    int32                  `protobuf:"varint,2,opt,name=peak_bandwidth_kbps,json=peakBandwidthKbps,proto3" json:"peak_bandwidth_kbps,omitempty"`
	BurstSizeKb          int32                  `protobuf:"varint,3,opt,name=burst_size_kb,json=burstSizeKb,proto3" json:"burst_size_kb,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TrafficShapingPolicy) Reset() {
	*x = TrafficShapingPolicy{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficShapingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficShapingPolicy) ProtoMessage() {}

func (x *TrafficShapingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficShapingPolicy.ProtoReflect.Descriptor instead.
func (*TrafficShapingPolicy) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{18}
}

func (x *TrafficShapingPolicy) GetAverageBandwidthKbps() int32 {
	if x != nil {
		return x.AverageBandwidthKbps
	}
	return 0
}

func (x *TrafficShapingPolicy) GetPeakBandwidthKbps() int32 {
	if x != nil {
		return x.PeakBandwidthKbps
	}
	return 0
}

func (x *TrafficShapingPolicy) GetBurstSizeKb() int32 {
	if x != nil {
		return x.BurstSizeKb
	}
	return 0
}

// --- Teaming Policy ---
type TeamingPolicy struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	LoadBalancerAlgorithm LoadBalancerAlgorithm  `protobuf:"varint,1,opt,name=load_balancer_algorithm,json=loadBalancerAlgorithm,proto3,enum=virtualization.LoadBalancerAlgorithm" json:"load_balancer_algorithm,omitempty"`
	UplinkPorts           []string               `protobuf:"bytes,2,rep,name=uplink_ports,json=uplinkPorts,proto3" json:"uplink_ports,omitempty"`                        // Names of physical NICs/ports
	ActiveUplinkPorts     []string               `protobuf:"bytes,3,rep,name=active_uplink_ports,json=activeUplinkPorts,proto3" json:"active_uplink_ports,omitempty"`    // Names of active physical NICs/ports in active-standby mode
	StandbyUplinkPorts    []string               `protobuf:"bytes,4,rep,name=standby_uplink_ports,json=standbyUplinkPorts,proto3" json:"standby_uplink_ports,omitempty"` // Names of standby physical NICs/ports in active-standby mode
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TeamingPolicy) Reset() {
	*x = TeamingPolicy{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamingPolicy) ProtoMessage() {}

func (x *TeamingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamingPolicy.ProtoReflect.Descriptor instead.
func (*TeamingPolicy) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{19}
}

func (x *TeamingPolicy) GetLoadBalancerAlgorithm() LoadBalancerAlgorithm {
	if x != nil {
		return x.LoadBalancerAlgorithm
	}
	return LoadBalancerAlgorithm_LB_ALGORITHM_UNSPECIFIED
}

func (x *TeamingPolicy) GetUplinkPorts() []string {
	if x != nil {
		return x.UplinkPorts
	}
	return nil
}

func (x *TeamingPolicy) GetActiveUplinkPorts() []string {
	if x != nil {
		return x.ActiveUplinkPorts
	}
	return nil
}

func (x *TeamingPolicy) GetStandbyUplinkPorts() []string {
	if x != nil {
		return x.StandbyUplinkPorts
	}
	return nil
}

// --- Network (Logical Switch) ---
type Network struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // FK to Tenant
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"` // Optional description
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Network) Reset() {
	*x = Network{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{20}
}

func (x *Network) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Network) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNetworkRequest) Reset() {
	*x = CreateNetworkRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest) ProtoMessage() {}

func (x *CreateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{21}
}

func (x *CreateNetworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNetworkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	NetworkId     string                 `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkRequest) Reset() {
	*x = GetNetworkRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkRequest) ProtoMessage() {}

func (x *GetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{22}
}

func (x *GetNetworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetNetworkRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type ListNetworksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworksRequest) Reset() {
	*x = ListNetworksRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksRequest) ProtoMessage() {}

func (x *ListNetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksRequest.ProtoReflect.Descriptor instead.
func (*ListNetworksRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{23}
}

func (x *ListNetworksRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListNetworksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNetworksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNetworksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Networks      []*Network             `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworksResponse) Reset() {
	*x = ListNetworksResponse{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksResponse) ProtoMessage() {}

func (x *ListNetworksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksResponse.ProtoReflect.Descriptor instead.
func (*ListNetworksResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{24}
}

func (x *ListNetworksResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ListNetworksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	NetworkId     string                 `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Network       *Network               `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNetworkRequest) Reset() {
	*x = UpdateNetworkRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkRequest) ProtoMessage() {}

func (x *UpdateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkRequest.ProtoReflect.Descriptor instead.
func (*UpdateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateNetworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateNetworkRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *UpdateNetworkRequest) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

type DeleteNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	NetworkId     string                 `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNetworkRequest) Reset() {
	*x = DeleteNetworkRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkRequest) ProtoMessage() {}

func (x *DeleteNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkRequest.ProtoReflect.Descriptor instead.
func (*DeleteNetworkRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteNetworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteNetworkRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

// --- VM Attachment ---
type AttachVMToPortGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	VmId          string                 `protobuf:"bytes,2,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	PortGroupId   string                 `protobuf:"bytes,3,opt,name=port_group_id,json=portGroupId,proto3" json:"port_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachVMToPortGroupRequest) Reset() {
	*x = AttachVMToPortGroupRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachVMToPortGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachVMToPortGroupRequest) ProtoMessage() {}

func (x *AttachVMToPortGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachVMToPortGroupRequest.ProtoReflect.Descriptor instead.
func (*AttachVMToPortGroupRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{27}
}

func (x *AttachVMToPortGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AttachVMToPortGroupRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *AttachVMToPortGroupRequest) GetPortGroupId() string {
	if x != nil {
		return x.PortGroupId
	}
	return ""
}

type DetachVMFromPortGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	VmId          string                 `protobuf:"bytes,2,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	PortGroupId   string                 `protobuf:"bytes,3,opt,name=port_group_id,json=portGroupId,proto3" json:"port_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DetachVMFromPortGroupRequest) Reset() {
	*x = DetachVMFromPortGroupRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetachVMFromPortGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachVMFromPortGroupRequest) ProtoMessage() {}

func (x *DetachVMFromPortGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachVMFromPortGroupRequest.ProtoReflect.Descriptor instead.
func (*DetachVMFromPortGroupRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{28}
}

func (x *DetachVMFromPortGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DetachVMFromPortGroupRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *DetachVMFromPortGroupRequest) GetPortGroupId() string {
	if x != nil {
		return x.PortGroupId
	}
	return ""
}

// --- Agent ---
type Agent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname      string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"` // e.g., "connected", "disconnected"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{29}
}

func (x *Agent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Agent) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Agent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetAgentStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAgentStatusRequest) Reset() {
	*x = GetAgentStatusRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentStatusRequest) ProtoMessage() {}

func (x *GetAgentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentStatusRequest.ProtoReflect.Descriptor instead.
func (*GetAgentStatusRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{30}
}

func (x *GetAgentStatusRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type AgentStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LastHeartbeat string                 `protobuf:"bytes,2,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`                                                    // Timestamp
	Capabilities  map[string]string      `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Key-value pairs of agent capabilities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentStatusResponse) Reset() {
	*x = AgentStatusResponse{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatusResponse) ProtoMessage() {}

func (x *AgentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatusResponse.ProtoReflect.Descriptor instead.
func (*AgentStatusResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{31}
}

func (x *AgentStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AgentStatusResponse) GetLastHeartbeat() string {
	if x != nil {
		return x.LastHeartbeat
	}
	return ""
}

func (x *AgentStatusResponse) GetCapabilities() map[string]string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type ListAgentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{32}
}

func (x *ListAgentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAgentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAgentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agents        []*Agent               `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{33}
}

func (x *ListAgentsResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *ListAgentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// --- Other ---
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP(), []int{34}
}

var File_pilab_cloud_virtualization_v1_virtualization_proto protoreflect.FileDescriptor

var file_pilab_cloud_virtualization_v1_virtualization_proto_rawDesc = string([]byte{
	0x0a, 0x32, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x06, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x50, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x6f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf1, 0x03, 0x0a, 0x09,
	0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x5a, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22,
	0xcf, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x5a, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0e,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7c, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x59, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x14, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x63, 0x73, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x63, 0x73, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65, 0x4e,
	0x65, 0x74, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x6e, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x69, 0x73, 0x63, 0x73, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x73, 0x63, 0x73, 0x69,
	0x22, 0xb3, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a,
	0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x4f, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x54, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x54,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5d, 0x0a, 0x17,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x52, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x6c, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x73, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x85, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x52, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1a, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x4d, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x74, 0x0a, 0x1c, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x56, 0x4d, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x32, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x59, 0x0a,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6b, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x2a, 0x64, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4d, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x2a, 0xaa, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x42, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x4c, 0x42, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c,
	0x42, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x42, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x4c, 0x41, 0x43,
	0x50, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x42, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x32, 0xdb, 0x0e, 0x0a, 0x15, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x20, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x25, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x1a, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x24, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x24, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x24, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x4d, 0x54, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x56, 0x4d, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x15, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x56, 0x4d, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x56, 0x4d, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4d, 0x5a, 0x4b, 0x67, 0x6f, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x68, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescOnce sync.Once
	file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescData []byte
)

func file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescGZIP() []byte {
	file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescOnce.Do(func() {
		file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pilab_cloud_virtualization_v1_virtualization_proto_rawDesc), len(file_pilab_cloud_virtualization_v1_virtualization_proto_rawDesc)))
	})
	return file_pilab_cloud_virtualization_v1_virtualization_proto_rawDescData
}

var file_pilab_cloud_virtualization_v1_virtualization_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_pilab_cloud_virtualization_v1_virtualization_proto_goTypes = []any{
	(PortGroupType)(0),                        // 0: virtualization.PortGroupType
	(LoadBalancerAlgorithm)(0),                // 1: virtualization.LoadBalancerAlgorithm
	(SecurityPolicyAction)(0),                 // 2: virtualization.SecurityPolicyAction
	(*Tenant)(nil),                            // 3: virtualization.Tenant
	(*CreateTenantRequest)(nil),               // 4: virtualization.CreateTenantRequest
	(*GetTenantRequest)(nil),                  // 5: virtualization.GetTenantRequest
	(*ListTenantsRequest)(nil),                // 6: virtualization.ListTenantsRequest
	(*ListTenantsResponse)(nil),               // 7: virtualization.ListTenantsResponse
	(*UpdateTenantRequest)(nil),               // 8: virtualization.UpdateTenantRequest
	(*DeleteTenantRequest)(nil),               // 9: virtualization.DeleteTenantRequest
	(*PortGroup)(nil),                         // 10: virtualization.PortGroup
	(*CreatePortGroupRequest)(nil),            // 11: virtualization.CreatePortGroupRequest
	(*GetPortGroupRequest)(nil),               // 12: virtualization.GetPortGroupRequest
	(*ListPortGroupsRequest)(nil),             // 13: virtualization.ListPortGroupsRequest
	(*ListPortGroupsResponse)(nil),            // 14: virtualization.ListPortGroupsResponse
	(*UpdatePortGroupRequest)(nil),            // 15: virtualization.UpdatePortGroupRequest
	(*DeletePortGroupRequest)(nil),            // 16: virtualization.DeletePortGroupRequest
	(*SystemServicesConfig)(nil),              // 17: virtualization.SystemServicesConfig
	(*SetPortGroupSystemServicesRequest)(nil), // 18: virtualization.SetPortGroupSystemServicesRequest
	(*GetPortGroupSystemServicesRequest)(nil), // 19: virtualization.GetPortGroupSystemServicesRequest
	(*SecurityPolicy)(nil),                    // 20: virtualization.SecurityPolicy
	(*TrafficShapingPolicy)(nil),              // 21: virtualization.TrafficShapingPolicy
	(*TeamingPolicy)(nil),                     // 22: virtualization.TeamingPolicy
	(*Network)(nil),                           // 23: virtualization.Network
	(*CreateNetworkRequest)(nil),              // 24: virtualization.CreateNetworkRequest
	(*GetNetworkRequest)(nil),                 // 25: virtualization.GetNetworkRequest
	(*ListNetworksRequest)(nil),               // 26: virtualization.ListNetworksRequest
	(*ListNetworksResponse)(nil),              // 27: virtualization.ListNetworksResponse
	(*UpdateNetworkRequest)(nil),              // 28: virtualization.UpdateNetworkRequest
	(*DeleteNetworkRequest)(nil),              // 29: virtualization.DeleteNetworkRequest
	(*AttachVMToPortGroupRequest)(nil),        // 30: virtualization.AttachVMToPortGroupRequest
	(*DetachVMFromPortGroupRequest)(nil),      // 31: virtualization.DetachVMFromPortGroupRequest
	(*Agent)(nil),                             // 32: virtualization.Agent
	(*GetAgentStatusRequest)(nil),             // 33: virtualization.GetAgentStatusRequest
	(*AgentStatusResponse)(nil),               // 34: virtualization.AgentStatusResponse
	(*ListAgentsRequest)(nil),                 // 35: virtualization.ListAgentsRequest
	(*ListAgentsResponse)(nil),                // 36: virtualization.ListAgentsResponse
	(*Empty)(nil),                             // 37: virtualization.Empty
	nil,                                       // 38: virtualization.AgentStatusResponse.CapabilitiesEntry
	(*emptypb.Empty)(nil),                     // 39: google.protobuf.Empty
}
var file_pilab_cloud_virtualization_v1_virtualization_proto_depIdxs = []int32{
	3,  // 0: virtualization.ListTenantsResponse.tenants:type_name -> virtualization.Tenant
	3,  // 1: virtualization.UpdateTenantRequest.tenant:type_name -> virtualization.Tenant
	0,  // 2: virtualization.PortGroup.type:type_name -> virtualization.PortGroupType
	20, // 3: virtualization.PortGroup.security_policy:type_name -> virtualization.SecurityPolicy
	21, // 4: virtualization.PortGroup.traffic_shaping_policy:type_name -> virtualization.TrafficShapingPolicy
	22, // 5: virtualization.PortGroup.teaming_policy:type_name -> virtualization.TeamingPolicy
	17, // 6: virtualization.PortGroup.system_services:type_name -> virtualization.SystemServicesConfig
	0,  // 7: virtualization.CreatePortGroupRequest.type:type_name -> virtualization.PortGroupType
	20, // 8: virtualization.CreatePortGroupRequest.security_policy:type_name -> virtualization.SecurityPolicy
	21, // 9: virtualization.CreatePortGroupRequest.traffic_shaping_policy:type_name -> virtualization.TrafficShapingPolicy
	22, // 10: virtualization.CreatePortGroupRequest.teaming_policy:type_name -> virtualization.TeamingPolicy
	17, // 11: virtualization.CreatePortGroupRequest.system_services:type_name -> virtualization.SystemServicesConfig
	10, // 12: virtualization.ListPortGroupsResponse.port_groups:type_name -> virtualization.PortGroup
	10, // 13: virtualization.UpdatePortGroupRequest.port_group:type_name -> virtualization.PortGroup
	17, // 14: virtualization.SetPortGroupSystemServicesRequest.system_services:type_name -> virtualization.SystemServicesConfig
	2,  // 15: virtualization.SecurityPolicy.promiscuous_mode:type_name -> virtualization.SecurityPolicyAction
	2,  // 16: virtualization.SecurityPolicy.mac_address_changes:type_name -> virtualization.SecurityPolicyAction
	2,  // 17: virtualization.SecurityPolicy.forged_transmits:type_name -> virtualization.SecurityPolicyAction
	1,  // 18: virtualization.TeamingPolicy.load_balancer_algorithm:type_name -> virtualization.LoadBalancerAlgorithm
	23, // 19: virtualization.ListNetworksResponse.networks:type_name -> virtualization.Network
	23, // 20: virtualization.UpdateNetworkRequest.network:type_name -> virtualization.Network
	38, // 21: virtualization.AgentStatusResponse.capabilities:type_name -> virtualization.AgentStatusResponse.CapabilitiesEntry
	32, // 22: virtualization.ListAgentsResponse.agents:type_name -> virtualization.Agent
	4,  // 23: virtualization.VirtualizationService.CreateTenant:input_type -> virtualization.CreateTenantRequest
	5,  // 24: virtualization.VirtualizationService.GetTenant:input_type -> virtualization.GetTenantRequest
	6,  // 25: virtualization.VirtualizationService.ListTenants:input_type -> virtualization.ListTenantsRequest
	8,  // 26: virtualization.VirtualizationService.UpdateTenant:input_type -> virtualization.UpdateTenantRequest
	9,  // 27: virtualization.VirtualizationService.DeleteTenant:input_type -> virtualization.DeleteTenantRequest
	11, // 28: virtualization.VirtualizationService.CreatePortGroup:input_type -> virtualization.CreatePortGroupRequest
	12, // 29: virtualization.VirtualizationService.GetPortGroup:input_type -> virtualization.GetPortGroupRequest
	13, // 30: virtualization.VirtualizationService.ListPortGroups:input_type -> virtualization.ListPortGroupsRequest
	15, // 31: virtualization.VirtualizationService.UpdatePortGroup:input_type -> virtualization.UpdatePortGroupRequest
	16, // 32: virtualization.VirtualizationService.DeletePortGroup:input_type -> virtualization.DeletePortGroupRequest
	18, // 33: virtualization.VirtualizationService.SetPortGroupSystemServices:input_type -> virtualization.SetPortGroupSystemServicesRequest
	19, // 34: virtualization.VirtualizationService.GetPortGroupSystemServices:input_type -> virtualization.GetPortGroupSystemServicesRequest
	24, // 35: virtualization.VirtualizationService.CreateNetwork:input_type -> virtualization.CreateNetworkRequest
	25, // 36: virtualization.VirtualizationService.GetNetwork:input_type -> virtualization.GetNetworkRequest
	26, // 37: virtualization.VirtualizationService.ListNetworks:input_type -> virtualization.ListNetworksRequest
	28, // 38: virtualization.VirtualizationService.UpdateNetwork:input_type -> virtualization.UpdateNetworkRequest
	29, // 39: virtualization.VirtualizationService.DeleteNetwork:input_type -> virtualization.DeleteNetworkRequest
	30, // 40: virtualization.VirtualizationService.AttachVMToPortGroup:input_type -> virtualization.AttachVMToPortGroupRequest
	31, // 41: virtualization.VirtualizationService.DetachVMFromPortGroup:input_type -> virtualization.DetachVMFromPortGroupRequest
	33, // 42: virtualization.VirtualizationService.GetAgentStatus:input_type -> virtualization.GetAgentStatusRequest
	35, // 43: virtualization.VirtualizationService.ListAgents:input_type -> virtualization.ListAgentsRequest
	3,  // 44: virtualization.VirtualizationService.CreateTenant:output_type -> virtualization.Tenant
	3,  // 45: virtualization.VirtualizationService.GetTenant:output_type -> virtualization.Tenant
	7,  // 46: virtualization.VirtualizationService.ListTenants:output_type -> virtualization.ListTenantsResponse
	3,  // 47: virtualization.VirtualizationService.UpdateTenant:output_type -> virtualization.Tenant
	39, // 48: virtualization.VirtualizationService.DeleteTenant:output_type -> google.protobuf.Empty
	10, // 49: virtualization.VirtualizationService.CreatePortGroup:output_type -> virtualization.PortGroup
	10, // 50: virtualization.VirtualizationService.GetPortGroup:output_type -> virtualization.PortGroup
	14, // 51: virtualization.VirtualizationService.ListPortGroups:output_type -> virtualization.ListPortGroupsResponse
	10, // 52: virtualization.VirtualizationService.UpdatePortGroup:output_type -> virtualization.PortGroup
	39, // 53: virtualization.VirtualizationService.DeletePortGroup:output_type -> google.protobuf.Empty
	10, // 54: virtualization.VirtualizationService.SetPortGroupSystemServices:output_type -> virtualization.PortGroup
	17, // 55: virtualization.VirtualizationService.GetPortGroupSystemServices:output_type -> virtualization.SystemServicesConfig
	23, // 56: virtualization.VirtualizationService.CreateNetwork:output_type -> virtualization.Network
	23, // 57: virtualization.VirtualizationService.GetNetwork:output_type -> virtualization.Network
	27, // 58: virtualization.VirtualizationService.ListNetworks:output_type -> virtualization.ListNetworksResponse
	23, // 59: virtualization.VirtualizationService.UpdateNetwork:output_type -> virtualization.Network
	39, // 60: virtualization.VirtualizationService.DeleteNetwork:output_type -> google.protobuf.Empty
	39, // 61: virtualization.VirtualizationService.AttachVMToPortGroup:output_type -> google.protobuf.Empty
	39, // 62: virtualization.VirtualizationService.DetachVMFromPortGroup:output_type -> google.protobuf.Empty
	34, // 63: virtualization.VirtualizationService.GetAgentStatus:output_type -> virtualization.AgentStatusResponse
	36, // 64: virtualization.VirtualizationService.ListAgents:output_type -> virtualization.ListAgentsResponse
	44, // [44:65] is the sub-list for method output_type
	23, // [23:44] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_pilab_cloud_virtualization_v1_virtualization_proto_init() }
func file_pilab_cloud_virtualization_v1_virtualization_proto_init() {
	if File_pilab_cloud_virtualization_v1_virtualization_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pilab_cloud_virtualization_v1_virtualization_proto_rawDesc), len(file_pilab_cloud_virtualization_v1_virtualization_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilab_cloud_virtualization_v1_virtualization_proto_goTypes,
		DependencyIndexes: file_pilab_cloud_virtualization_v1_virtualization_proto_depIdxs,
		EnumInfos:         file_pilab_cloud_virtualization_v1_virtualization_proto_enumTypes,
		MessageInfos:      file_pilab_cloud_virtualization_v1_virtualization_proto_msgTypes,
	}.Build()
	File_pilab_cloud_virtualization_v1_virtualization_proto = out.File
	file_pilab_cloud_virtualization_v1_virtualization_proto_goTypes = nil
	file_pilab_cloud_virtualization_v1_virtualization_proto_depIdxs = nil
}
