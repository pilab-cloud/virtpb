// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: pilab/cloud/vmmanager/v1/vmservice.proto

package vmmanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VMState int32

const (
	VMState_NOSTATE     VMState = 0 // The domain is not running
	VMState_RUNNING     VMState = 1 // The domain is running
	VMState_BLOCKED     VMState = 2 // The domain is blocked on resource
	VMState_PAUSED      VMState = 3 // The domain is paused by user
	VMState_SHUTDOWN    VMState = 4 // The domain is being shut down
	VMState_SHUTOFF     VMState = 5 // The domain is shut off
	VMState_CRASHED     VMState = 6 // The domain is crashed
	VMState_PMSUSPENDED VMState = 7 // The domain is suspended by guest power management
)

// Enum value maps for VMState.
var (
	VMState_name = map[int32]string{
		0: "NOSTATE",
		1: "RUNNING",
		2: "BLOCKED",
		3: "PAUSED",
		4: "SHUTDOWN",
		5: "SHUTOFF",
		6: "CRASHED",
		7: "PMSUSPENDED",
	}
	VMState_value = map[string]int32{
		"NOSTATE":     0,
		"RUNNING":     1,
		"BLOCKED":     2,
		"PAUSED":      3,
		"SHUTDOWN":    4,
		"SHUTOFF":     5,
		"CRASHED":     6,
		"PMSUSPENDED": 7,
	}
)

func (x VMState) Enum() *VMState {
	p := new(VMState)
	*p = x
	return p
}

func (x VMState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VMState) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_enumTypes[0].Descriptor()
}

func (VMState) Type() protoreflect.EnumType {
	return &file_pilab_cloud_vmmanager_v1_vmservice_proto_enumTypes[0]
}

func (x VMState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VMState.Descriptor instead.
func (VMState) EnumDescriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{0}
}

type VM struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Uuid              string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State             VMState                `protobuf:"varint,3,opt,name=state,proto3,enum=pilab.cloud.vmmanager.v1.VMState" json:"state,omitempty"`
	MemoryMb          int32                  `protobuf:"varint,4,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	Vcpus             int32                  `protobuf:"varint,5,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	Disks             []*Disk                `protobuf:"bytes,6,rep,name=disks,proto3" json:"disks,omitempty"`
	NetworkInterfaces []*NetworkInterface    `protobuf:"bytes,7,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	HardwareDevices   []*HardwareDevice      `protobuf:"bytes,8,rep,name=hardware_devices,json=hardwareDevices,proto3" json:"hardware_devices,omitempty"`
	CreationTime      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	OsType            string                 `protobuf:"bytes,10,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	Firmware          string                 `protobuf:"bytes,11,opt,name=firmware,proto3" json:"firmware,omitempty"` // e.g., "bios", "uefi"
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VM) Reset() {
	*x = VM{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VM) ProtoMessage() {}

func (x *VM) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VM.ProtoReflect.Descriptor instead.
func (*VM) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{0}
}

func (x *VM) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VM) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VM) GetState() VMState {
	if x != nil {
		return x.State
	}
	return VMState_NOSTATE
}

func (x *VM) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *VM) GetVcpus() int32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *VM) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *VM) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *VM) GetHardwareDevices() []*HardwareDevice {
	if x != nil {
		return x.HardwareDevices
	}
	return nil
}

func (x *VM) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VM) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *VM) GetFirmware() string {
	if x != nil {
		return x.Firmware
	}
	return ""
}

type CreateVMRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MemoryMb          int32                  `protobuf:"varint,2,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	Vcpus             int32                  `protobuf:"varint,3,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	OsType            string                 `protobuf:"bytes,4,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	Firmware          string                 `protobuf:"bytes,5,opt,name=firmware,proto3" json:"firmware,omitempty"` // e.g., "bios", "uefi"
	Disks             []*Disk                `protobuf:"bytes,6,rep,name=disks,proto3" json:"disks,omitempty"`
	NetworkInterfaces []*NetworkInterface    `protobuf:"bytes,7,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateVMRequest) Reset() {
	*x = CreateVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest) ProtoMessage() {}

func (x *CreateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest.ProtoReflect.Descriptor instead.
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVMRequest) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *CreateVMRequest) GetVcpus() int32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *CreateVMRequest) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *CreateVMRequest) GetFirmware() string {
	if x != nil {
		return x.Firmware
	}
	return ""
}

func (x *CreateVMRequest) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *CreateVMRequest) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

type GetVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVMRequest) Reset() {
	*x = GetVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMRequest) ProtoMessage() {}

func (x *GetVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMRequest.ProtoReflect.Descriptor instead.
func (*GetVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{2}
}

func (x *GetVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ListVMsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVMsRequest) Reset() {
	*x = ListVMsRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMsRequest) ProtoMessage() {}

func (x *ListVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMsRequest.ProtoReflect.Descriptor instead.
func (*ListVMsRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{3}
}

type ListVMsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vms           []*VM                  `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVMsResponse) Reset() {
	*x = ListVMsResponse{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMsResponse) ProtoMessage() {}

func (x *ListVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMsResponse.ProtoReflect.Descriptor instead.
func (*ListVMsResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{4}
}

func (x *ListVMsResponse) GetVms() []*VM {
	if x != nil {
		return x.Vms
	}
	return nil
}

type StartVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartVMRequest) Reset() {
	*x = StartVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMRequest) ProtoMessage() {}

func (x *StartVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMRequest.ProtoReflect.Descriptor instead.
func (*StartVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{5}
}

func (x *StartVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type StopVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Force         bool                   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"` // Force stop (power off)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopVMRequest) Reset() {
	*x = StopVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMRequest) ProtoMessage() {}

func (x *StopVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMRequest.ProtoReflect.Descriptor instead.
func (*StopVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{6}
}

func (x *StopVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StopVMRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RebootVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Force         bool                   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebootVMRequest) Reset() {
	*x = RebootVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebootVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootVMRequest) ProtoMessage() {}

func (x *RebootVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootVMRequest.ProtoReflect.Descriptor instead.
func (*RebootVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{7}
}

func (x *RebootVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RebootVMRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SuspendVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspendVMRequest) Reset() {
	*x = SuspendVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendVMRequest) ProtoMessage() {}

func (x *SuspendVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendVMRequest.ProtoReflect.Descriptor instead.
func (*SuspendVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{8}
}

func (x *SuspendVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ResumeVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeVMRequest) Reset() {
	*x = ResumeVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVMRequest) ProtoMessage() {}

func (x *ResumeVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVMRequest.ProtoReflect.Descriptor instead.
func (*ResumeVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{9}
}

func (x *ResumeVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ShutdownVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownVMRequest) Reset() {
	*x = ShutdownVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownVMRequest) ProtoMessage() {}

func (x *ShutdownVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownVMRequest.ProtoReflect.Descriptor instead.
func (*ShutdownVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{10}
}

func (x *ShutdownVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeleteVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVMRequest) Reset() {
	*x = DeleteVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVMRequest) ProtoMessage() {}

func (x *DeleteVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVMRequest.ProtoReflect.Descriptor instead.
func (*DeleteVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type UpdateVMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MemoryMb      int32                  `protobuf:"varint,3,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	Vcpus         int32                  `protobuf:"varint,4,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	OsType        string                 `protobuf:"bytes,5,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVMRequest) Reset() {
	*x = UpdateVMRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMRequest) ProtoMessage() {}

func (x *UpdateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMRequest.ProtoReflect.Descriptor instead.
func (*UpdateVMRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateVMRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateVMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVMRequest) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *UpdateVMRequest) GetVcpus() int32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *UpdateVMRequest) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

type Disk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                               // Unique ID for the disk
	VmUuid        string                 `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`             // UUID of the VM the disk belongs to
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                               // Path to the disk image file (e.g., /path/to/disk.qcow2)
	Format        string                 `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`                           // Format of the disk (e.g., qcow2, raw)
	SizeGb        int64                  `protobuf:"varint,5,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`            // Size of the disk in GB
	Type          string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`                               // e.g., "disk", "cdrom"
	Bus           string                 `protobuf:"bytes,7,opt,name=bus,proto3" json:"bus,omitempty"`                                 // e.g., "virtio", "scsi", "sata", "usb"
	SourceType    string                 `protobuf:"bytes,8,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"` // e.g., "file", "block" (for block devices)
	Device        string                 `protobuf:"bytes,9,opt,name=device,proto3" json:"device,omitempty"`                           // e.g., "vda", "hda", "sda"
	Target        string                 `protobuf:"bytes,10,opt,name=target,proto3" json:"target,omitempty"`                          // Target device inside the VM
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disk) Reset() {
	*x = Disk{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{13}
}

func (x *Disk) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Disk) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *Disk) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Disk) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Disk) GetSizeGb() int64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *Disk) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Disk) GetBus() string {
	if x != nil {
		return x.Bus
	}
	return ""
}

func (x *Disk) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *Disk) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Disk) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type AddDiskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmUuid        string                 `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Format        string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	SizeGb        int64                  `protobuf:"varint,4,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Type          string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Bus           string                 `protobuf:"bytes,6,opt,name=bus,proto3" json:"bus,omitempty"`
	SourceType    string                 `protobuf:"bytes,7,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	Target        string                 `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDiskRequest) Reset() {
	*x = AddDiskRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDiskRequest) ProtoMessage() {}

func (x *AddDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDiskRequest.ProtoReflect.Descriptor instead.
func (*AddDiskRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{14}
}

func (x *AddDiskRequest) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *AddDiskRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddDiskRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *AddDiskRequest) GetSizeGb() int64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *AddDiskRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddDiskRequest) GetBus() string {
	if x != nil {
		return x.Bus
	}
	return ""
}

func (x *AddDiskRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *AddDiskRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type GetDiskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDiskRequest) Reset() {
	*x = GetDiskRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskRequest) ProtoMessage() {}

func (x *GetDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskRequest.ProtoReflect.Descriptor instead.
func (*GetDiskRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{15}
}

func (x *GetDiskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ListDisksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmUuid        string                 `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"` // Optional: Filter disks by VM UUID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDisksRequest) Reset() {
	*x = ListDisksRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksRequest) ProtoMessage() {}

func (x *ListDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksRequest.ProtoReflect.Descriptor instead.
func (*ListDisksRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{16}
}

func (x *ListDisksRequest) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

type ListDisksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Disks         []*Disk                `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDisksResponse) Reset() {
	*x = ListDisksResponse{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksResponse) ProtoMessage() {}

func (x *ListDisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksResponse.ProtoReflect.Descriptor instead.
func (*ListDisksResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{17}
}

func (x *ListDisksResponse) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

type RemoveDiskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDiskRequest) Reset() {
	*x = RemoveDiskRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDiskRequest) ProtoMessage() {}

func (x *RemoveDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDiskRequest.ProtoReflect.Descriptor instead.
func (*RemoveDiskRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveDiskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ResizeDiskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	NewSizeGb     int64                  `protobuf:"varint,2,opt,name=new_size_gb,json=newSizeGb,proto3" json:"new_size_gb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResizeDiskRequest) Reset() {
	*x = ResizeDiskRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResizeDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeDiskRequest) ProtoMessage() {}

func (x *ResizeDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeDiskRequest.ProtoReflect.Descriptor instead.
func (*ResizeDiskRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{19}
}

func (x *ResizeDiskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ResizeDiskRequest) GetNewSizeGb() int64 {
	if x != nil {
		return x.NewSizeGb
	}
	return 0
}

type NetworkInterface struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VmUuid        string                 `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	MacAddress    string                 `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NetworkName   string                 `protobuf:"bytes,4,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`       // Name of the virtual network (bridge)
	Model         string                 `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`                                      // e.g., virtio, e1000
	InterfaceType string                 `protobuf:"bytes,6,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"` // e.g., "bridge", "nat", "routed", "hostdev"
	Source        string                 `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`                                    // e.g., bridge name or physical interface for passthrough
	Target        string                 `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`                                    // Target device name inside the VM (e.g., "eth0")
	ScriptPath    string                 `protobuf:"bytes,9,opt,name=script_path,json=scriptPath,proto3" json:"script_path,omitempty"`          // Path to a custom network script
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkInterface) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NetworkInterface) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *NetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterface) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *NetworkInterface) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *NetworkInterface) GetInterfaceType() string {
	if x != nil {
		return x.InterfaceType
	}
	return ""
}

func (x *NetworkInterface) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NetworkInterface) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *NetworkInterface) GetScriptPath() string {
	if x != nil {
		return x.ScriptPath
	}
	return ""
}

type AddNetworkInterfaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmUuid        string                 `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	NetworkName   string                 `protobuf:"bytes,2,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	Model         string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	InterfaceType string                 `protobuf:"bytes,4,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	Source        string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Target        string                 `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	ScriptPath    string                 `protobuf:"bytes,7,opt,name=script_path,json=scriptPath,proto3" json:"script_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddNetworkInterfaceRequest) Reset() {
	*x = AddNetworkInterfaceRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddNetworkInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNetworkInterfaceRequest) ProtoMessage() {}

func (x *AddNetworkInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNetworkInterfaceRequest.ProtoReflect.Descriptor instead.
func (*AddNetworkInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{21}
}

func (x *AddNetworkInterfaceRequest) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *AddNetworkInterfaceRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *AddNetworkInterfaceRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AddNetworkInterfaceRequest) GetInterfaceType() string {
	if x != nil {
		return x.InterfaceType
	}
	return ""
}

func (x *AddNetworkInterfaceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AddNetworkInterfaceRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AddNetworkInterfaceRequest) GetScriptPath() string {
	if x != nil {
		return x.ScriptPath
	}
	return ""
}

type GetNetworkInterfaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkInterfaceRequest) Reset() {
	*x = GetNetworkInterfaceRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInterfaceRequest) ProtoMessage() {}

func (x *GetNetworkInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInterfaceRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{22}
}

func (x *GetNetworkInterfaceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ListNetworkInterfacesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmUuid        string                 `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"` // Optional: Filter by VM UUID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworkInterfacesRequest) Reset() {
	*x = ListNetworkInterfacesRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworkInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkInterfacesRequest) ProtoMessage() {}

func (x *ListNetworkInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkInterfacesRequest.ProtoReflect.Descriptor instead.
func (*ListNetworkInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{23}
}

func (x *ListNetworkInterfacesRequest) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

type ListNetworkInterfacesResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NetworkInterfaces []*NetworkInterface    `protobuf:"bytes,1,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListNetworkInterfacesResponse) Reset() {
	*x = ListNetworkInterfacesResponse{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworkInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkInterfacesResponse) ProtoMessage() {}

func (x *ListNetworkInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkInterfacesResponse.ProtoReflect.Descriptor instead.
func (*ListNetworkInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{24}
}

func (x *ListNetworkInterfacesResponse) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

type RemoveNetworkInterfaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveNetworkInterfaceRequest) Reset() {
	*x = RemoveNetworkInterfaceRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveNetworkInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNetworkInterfaceRequest) ProtoMessage() {}

func (x *RemoveNetworkInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNetworkInterfaceRequest.ProtoReflect.Descriptor instead.
func (*RemoveNetworkInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{25}
}

func (x *RemoveNetworkInterfaceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type UpdateNetworkInterfaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MacAddress    string                 `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NetworkName   string                 `protobuf:"bytes,3,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	Model         string                 `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNetworkInterfaceRequest) Reset() {
	*x = UpdateNetworkInterfaceRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNetworkInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkInterfaceRequest) ProtoMessage() {}

func (x *UpdateNetworkInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkInterfaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateNetworkInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateNetworkInterfaceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateNetworkInterfaceRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *UpdateNetworkInterfaceRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *UpdateNetworkInterfaceRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type HardwareDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VmUuid        string                 `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                                       // e.g., "pci", "usb", "sound", "graphics"
	Managed       string                 `protobuf:"bytes,4,opt,name=managed,proto3" json:"managed,omitempty"`                                                                                 // e.g., "yes", "no" - whether libvirt manages the device
	Attributes    map[string]string      `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Key-value pairs for device-specific attributes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HardwareDevice) Reset() {
	*x = HardwareDevice{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardwareDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareDevice) ProtoMessage() {}

func (x *HardwareDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareDevice.ProtoReflect.Descriptor instead.
func (*HardwareDevice) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{27}
}

func (x *HardwareDevice) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HardwareDevice) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *HardwareDevice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HardwareDevice) GetManaged() string {
	if x != nil {
		return x.Managed
	}
	return ""
}

func (x *HardwareDevice) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type AddHardwareDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmUuid        string                 `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Managed       string                 `protobuf:"bytes,3,opt,name=managed,proto3" json:"managed,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddHardwareDeviceRequest) Reset() {
	*x = AddHardwareDeviceRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddHardwareDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHardwareDeviceRequest) ProtoMessage() {}

func (x *AddHardwareDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHardwareDeviceRequest.ProtoReflect.Descriptor instead.
func (*AddHardwareDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{28}
}

func (x *AddHardwareDeviceRequest) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *AddHardwareDeviceRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddHardwareDeviceRequest) GetManaged() string {
	if x != nil {
		return x.Managed
	}
	return ""
}

func (x *AddHardwareDeviceRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type GetHardwareDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHardwareDeviceRequest) Reset() {
	*x = GetHardwareDeviceRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHardwareDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareDeviceRequest) ProtoMessage() {}

func (x *GetHardwareDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetHardwareDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{29}
}

func (x *GetHardwareDeviceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ListHardwareDevicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmUuid        string                 `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"` // Optional: Filter by VM UUID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHardwareDevicesRequest) Reset() {
	*x = ListHardwareDevicesRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHardwareDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHardwareDevicesRequest) ProtoMessage() {}

func (x *ListHardwareDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHardwareDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListHardwareDevicesRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{30}
}

func (x *ListHardwareDevicesRequest) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

type ListHardwareDevicesResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	HardwareDevices []*HardwareDevice      `protobuf:"bytes,1,rep,name=hardware_devices,json=hardwareDevices,proto3" json:"hardware_devices,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListHardwareDevicesResponse) Reset() {
	*x = ListHardwareDevicesResponse{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHardwareDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHardwareDevicesResponse) ProtoMessage() {}

func (x *ListHardwareDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHardwareDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListHardwareDevicesResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{31}
}

func (x *ListHardwareDevicesResponse) GetHardwareDevices() []*HardwareDevice {
	if x != nil {
		return x.HardwareDevices
	}
	return nil
}

type RemoveHardwareDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveHardwareDeviceRequest) Reset() {
	*x = RemoveHardwareDeviceRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveHardwareDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHardwareDeviceRequest) ProtoMessage() {}

func (x *RemoveHardwareDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHardwareDeviceRequest.ProtoReflect.Descriptor instead.
func (*RemoveHardwareDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveHardwareDeviceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type UpdateHardwareDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHardwareDeviceRequest) Reset() {
	*x = UpdateHardwareDeviceRequest{}
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHardwareDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHardwareDeviceRequest) ProtoMessage() {}

func (x *UpdateHardwareDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHardwareDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateHardwareDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateHardwareDeviceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateHardwareDeviceRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_pilab_cloud_vmmanager_v1_vmservice_proto protoreflect.FileDescriptor

var file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf4, 0x03, 0x0a, 0x02, 0x56, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69,
	0x73, 0x6b, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x53,
	0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x63, 0x70, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0x59, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x10,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x41, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x52, 0x03,
	0x76, 0x6d, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x0d, 0x53, 0x74, 0x6f,
	0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x22, 0x26, 0x0a, 0x10, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x56, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x27, 0x0a, 0x11, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x63, 0x70,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x04, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a,
	0x65, 0x47, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x41,
	0x64, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x24, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x2b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x22, 0x49, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x47, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65,
	0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6e, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xe6,
	0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75,
	0x69, 0x64, 0x22, 0x7a, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x33,
	0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x12, 0x58, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x02, 0x0a, 0x18, 0x41,
	0x64, 0x64, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x62,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x35, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x1b,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0xd7, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x65, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x75, 0x0a, 0x07, 0x56, 0x4d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x55, 0x54, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48, 0x55, 0x54, 0x4f, 0x46, 0x46,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x41, 0x53, 0x48, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x4d, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x07,
	0x32, 0xa9, 0x14, 0x0a, 0x09, 0x56, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x29, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x4d, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x12, 0x26,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x4d, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d,
	0x73, 0x12, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x4d, 0x12, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x06, 0x53, 0x74, 0x6f, 0x70, 0x56,
	0x4d, 0x12, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d,
	0x12, 0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x09, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x56, 0x4d, 0x12, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x56, 0x4d, 0x12, 0x29, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x4d, 0x12, 0x2b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x29, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x29, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x4d, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x12, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x2b, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12,
	0x2b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x34, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x37, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x37, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x32, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x00, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x35, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x42, 0x43, 0x5a, 0x41,
	0x67, 0x6f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x68, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescOnce sync.Once
	file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescData []byte
)

func file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescGZIP() []byte {
	file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescOnce.Do(func() {
		file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDesc), len(file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDesc)))
	})
	return file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDescData
}

var file_pilab_cloud_vmmanager_v1_vmservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_pilab_cloud_vmmanager_v1_vmservice_proto_goTypes = []any{
	(VMState)(0),                          // 0: pilab.cloud.vmmanager.v1.VMState
	(*VM)(nil),                            // 1: pilab.cloud.vmmanager.v1.VM
	(*CreateVMRequest)(nil),               // 2: pilab.cloud.vmmanager.v1.CreateVMRequest
	(*GetVMRequest)(nil),                  // 3: pilab.cloud.vmmanager.v1.GetVMRequest
	(*ListVMsRequest)(nil),                // 4: pilab.cloud.vmmanager.v1.ListVMsRequest
	(*ListVMsResponse)(nil),               // 5: pilab.cloud.vmmanager.v1.ListVMsResponse
	(*StartVMRequest)(nil),                // 6: pilab.cloud.vmmanager.v1.StartVMRequest
	(*StopVMRequest)(nil),                 // 7: pilab.cloud.vmmanager.v1.StopVMRequest
	(*RebootVMRequest)(nil),               // 8: pilab.cloud.vmmanager.v1.RebootVMRequest
	(*SuspendVMRequest)(nil),              // 9: pilab.cloud.vmmanager.v1.SuspendVMRequest
	(*ResumeVMRequest)(nil),               // 10: pilab.cloud.vmmanager.v1.ResumeVMRequest
	(*ShutdownVMRequest)(nil),             // 11: pilab.cloud.vmmanager.v1.ShutdownVMRequest
	(*DeleteVMRequest)(nil),               // 12: pilab.cloud.vmmanager.v1.DeleteVMRequest
	(*UpdateVMRequest)(nil),               // 13: pilab.cloud.vmmanager.v1.UpdateVMRequest
	(*Disk)(nil),                          // 14: pilab.cloud.vmmanager.v1.Disk
	(*AddDiskRequest)(nil),                // 15: pilab.cloud.vmmanager.v1.AddDiskRequest
	(*GetDiskRequest)(nil),                // 16: pilab.cloud.vmmanager.v1.GetDiskRequest
	(*ListDisksRequest)(nil),              // 17: pilab.cloud.vmmanager.v1.ListDisksRequest
	(*ListDisksResponse)(nil),             // 18: pilab.cloud.vmmanager.v1.ListDisksResponse
	(*RemoveDiskRequest)(nil),             // 19: pilab.cloud.vmmanager.v1.RemoveDiskRequest
	(*ResizeDiskRequest)(nil),             // 20: pilab.cloud.vmmanager.v1.ResizeDiskRequest
	(*NetworkInterface)(nil),              // 21: pilab.cloud.vmmanager.v1.NetworkInterface
	(*AddNetworkInterfaceRequest)(nil),    // 22: pilab.cloud.vmmanager.v1.AddNetworkInterfaceRequest
	(*GetNetworkInterfaceRequest)(nil),    // 23: pilab.cloud.vmmanager.v1.GetNetworkInterfaceRequest
	(*ListNetworkInterfacesRequest)(nil),  // 24: pilab.cloud.vmmanager.v1.ListNetworkInterfacesRequest
	(*ListNetworkInterfacesResponse)(nil), // 25: pilab.cloud.vmmanager.v1.ListNetworkInterfacesResponse
	(*RemoveNetworkInterfaceRequest)(nil), // 26: pilab.cloud.vmmanager.v1.RemoveNetworkInterfaceRequest
	(*UpdateNetworkInterfaceRequest)(nil), // 27: pilab.cloud.vmmanager.v1.UpdateNetworkInterfaceRequest
	(*HardwareDevice)(nil),                // 28: pilab.cloud.vmmanager.v1.HardwareDevice
	(*AddHardwareDeviceRequest)(nil),      // 29: pilab.cloud.vmmanager.v1.AddHardwareDeviceRequest
	(*GetHardwareDeviceRequest)(nil),      // 30: pilab.cloud.vmmanager.v1.GetHardwareDeviceRequest
	(*ListHardwareDevicesRequest)(nil),    // 31: pilab.cloud.vmmanager.v1.ListHardwareDevicesRequest
	(*ListHardwareDevicesResponse)(nil),   // 32: pilab.cloud.vmmanager.v1.ListHardwareDevicesResponse
	(*RemoveHardwareDeviceRequest)(nil),   // 33: pilab.cloud.vmmanager.v1.RemoveHardwareDeviceRequest
	(*UpdateHardwareDeviceRequest)(nil),   // 34: pilab.cloud.vmmanager.v1.UpdateHardwareDeviceRequest
	nil,                                   // 35: pilab.cloud.vmmanager.v1.HardwareDevice.AttributesEntry
	nil,                                   // 36: pilab.cloud.vmmanager.v1.AddHardwareDeviceRequest.AttributesEntry
	nil,                                   // 37: pilab.cloud.vmmanager.v1.UpdateHardwareDeviceRequest.AttributesEntry
	(*timestamppb.Timestamp)(nil),         // 38: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                 // 39: google.protobuf.Empty
}
var file_pilab_cloud_vmmanager_v1_vmservice_proto_depIdxs = []int32{
	0,  // 0: pilab.cloud.vmmanager.v1.VM.state:type_name -> pilab.cloud.vmmanager.v1.VMState
	14, // 1: pilab.cloud.vmmanager.v1.VM.disks:type_name -> pilab.cloud.vmmanager.v1.Disk
	21, // 2: pilab.cloud.vmmanager.v1.VM.network_interfaces:type_name -> pilab.cloud.vmmanager.v1.NetworkInterface
	28, // 3: pilab.cloud.vmmanager.v1.VM.hardware_devices:type_name -> pilab.cloud.vmmanager.v1.HardwareDevice
	38, // 4: pilab.cloud.vmmanager.v1.VM.creation_time:type_name -> google.protobuf.Timestamp
	14, // 5: pilab.cloud.vmmanager.v1.CreateVMRequest.disks:type_name -> pilab.cloud.vmmanager.v1.Disk
	21, // 6: pilab.cloud.vmmanager.v1.CreateVMRequest.network_interfaces:type_name -> pilab.cloud.vmmanager.v1.NetworkInterface
	1,  // 7: pilab.cloud.vmmanager.v1.ListVMsResponse.vms:type_name -> pilab.cloud.vmmanager.v1.VM
	14, // 8: pilab.cloud.vmmanager.v1.ListDisksResponse.disks:type_name -> pilab.cloud.vmmanager.v1.Disk
	21, // 9: pilab.cloud.vmmanager.v1.ListNetworkInterfacesResponse.network_interfaces:type_name -> pilab.cloud.vmmanager.v1.NetworkInterface
	35, // 10: pilab.cloud.vmmanager.v1.HardwareDevice.attributes:type_name -> pilab.cloud.vmmanager.v1.HardwareDevice.AttributesEntry
	36, // 11: pilab.cloud.vmmanager.v1.AddHardwareDeviceRequest.attributes:type_name -> pilab.cloud.vmmanager.v1.AddHardwareDeviceRequest.AttributesEntry
	28, // 12: pilab.cloud.vmmanager.v1.ListHardwareDevicesResponse.hardware_devices:type_name -> pilab.cloud.vmmanager.v1.HardwareDevice
	37, // 13: pilab.cloud.vmmanager.v1.UpdateHardwareDeviceRequest.attributes:type_name -> pilab.cloud.vmmanager.v1.UpdateHardwareDeviceRequest.AttributesEntry
	2,  // 14: pilab.cloud.vmmanager.v1.VMService.CreateVM:input_type -> pilab.cloud.vmmanager.v1.CreateVMRequest
	3,  // 15: pilab.cloud.vmmanager.v1.VMService.GetVM:input_type -> pilab.cloud.vmmanager.v1.GetVMRequest
	4,  // 16: pilab.cloud.vmmanager.v1.VMService.ListVMs:input_type -> pilab.cloud.vmmanager.v1.ListVMsRequest
	6,  // 17: pilab.cloud.vmmanager.v1.VMService.StartVM:input_type -> pilab.cloud.vmmanager.v1.StartVMRequest
	7,  // 18: pilab.cloud.vmmanager.v1.VMService.StopVM:input_type -> pilab.cloud.vmmanager.v1.StopVMRequest
	8,  // 19: pilab.cloud.vmmanager.v1.VMService.RebootVM:input_type -> pilab.cloud.vmmanager.v1.RebootVMRequest
	9,  // 20: pilab.cloud.vmmanager.v1.VMService.SuspendVM:input_type -> pilab.cloud.vmmanager.v1.SuspendVMRequest
	10, // 21: pilab.cloud.vmmanager.v1.VMService.ResumeVM:input_type -> pilab.cloud.vmmanager.v1.ResumeVMRequest
	11, // 22: pilab.cloud.vmmanager.v1.VMService.ShutdownVM:input_type -> pilab.cloud.vmmanager.v1.ShutdownVMRequest
	12, // 23: pilab.cloud.vmmanager.v1.VMService.DeleteVM:input_type -> pilab.cloud.vmmanager.v1.DeleteVMRequest
	13, // 24: pilab.cloud.vmmanager.v1.VMService.UpdateVM:input_type -> pilab.cloud.vmmanager.v1.UpdateVMRequest
	15, // 25: pilab.cloud.vmmanager.v1.VMService.AddDisk:input_type -> pilab.cloud.vmmanager.v1.AddDiskRequest
	16, // 26: pilab.cloud.vmmanager.v1.VMService.GetDisk:input_type -> pilab.cloud.vmmanager.v1.GetDiskRequest
	17, // 27: pilab.cloud.vmmanager.v1.VMService.ListDisks:input_type -> pilab.cloud.vmmanager.v1.ListDisksRequest
	19, // 28: pilab.cloud.vmmanager.v1.VMService.RemoveDisk:input_type -> pilab.cloud.vmmanager.v1.RemoveDiskRequest
	20, // 29: pilab.cloud.vmmanager.v1.VMService.ResizeDisk:input_type -> pilab.cloud.vmmanager.v1.ResizeDiskRequest
	22, // 30: pilab.cloud.vmmanager.v1.VMService.AddNetworkInterface:input_type -> pilab.cloud.vmmanager.v1.AddNetworkInterfaceRequest
	23, // 31: pilab.cloud.vmmanager.v1.VMService.GetNetworkInterface:input_type -> pilab.cloud.vmmanager.v1.GetNetworkInterfaceRequest
	24, // 32: pilab.cloud.vmmanager.v1.VMService.ListNetworkInterfaces:input_type -> pilab.cloud.vmmanager.v1.ListNetworkInterfacesRequest
	26, // 33: pilab.cloud.vmmanager.v1.VMService.RemoveNetworkInterface:input_type -> pilab.cloud.vmmanager.v1.RemoveNetworkInterfaceRequest
	27, // 34: pilab.cloud.vmmanager.v1.VMService.UpdateNetworkInterface:input_type -> pilab.cloud.vmmanager.v1.UpdateNetworkInterfaceRequest
	29, // 35: pilab.cloud.vmmanager.v1.VMService.AddHardwareDevice:input_type -> pilab.cloud.vmmanager.v1.AddHardwareDeviceRequest
	30, // 36: pilab.cloud.vmmanager.v1.VMService.GetHardwareDevice:input_type -> pilab.cloud.vmmanager.v1.GetHardwareDeviceRequest
	31, // 37: pilab.cloud.vmmanager.v1.VMService.ListHardwareDevices:input_type -> pilab.cloud.vmmanager.v1.ListHardwareDevicesRequest
	33, // 38: pilab.cloud.vmmanager.v1.VMService.RemoveHardwareDevice:input_type -> pilab.cloud.vmmanager.v1.RemoveHardwareDeviceRequest
	34, // 39: pilab.cloud.vmmanager.v1.VMService.UpdateHardwareDevice:input_type -> pilab.cloud.vmmanager.v1.UpdateHardwareDeviceRequest
	1,  // 40: pilab.cloud.vmmanager.v1.VMService.CreateVM:output_type -> pilab.cloud.vmmanager.v1.VM
	1,  // 41: pilab.cloud.vmmanager.v1.VMService.GetVM:output_type -> pilab.cloud.vmmanager.v1.VM
	5,  // 42: pilab.cloud.vmmanager.v1.VMService.ListVMs:output_type -> pilab.cloud.vmmanager.v1.ListVMsResponse
	39, // 43: pilab.cloud.vmmanager.v1.VMService.StartVM:output_type -> google.protobuf.Empty
	39, // 44: pilab.cloud.vmmanager.v1.VMService.StopVM:output_type -> google.protobuf.Empty
	39, // 45: pilab.cloud.vmmanager.v1.VMService.RebootVM:output_type -> google.protobuf.Empty
	39, // 46: pilab.cloud.vmmanager.v1.VMService.SuspendVM:output_type -> google.protobuf.Empty
	39, // 47: pilab.cloud.vmmanager.v1.VMService.ResumeVM:output_type -> google.protobuf.Empty
	39, // 48: pilab.cloud.vmmanager.v1.VMService.ShutdownVM:output_type -> google.protobuf.Empty
	39, // 49: pilab.cloud.vmmanager.v1.VMService.DeleteVM:output_type -> google.protobuf.Empty
	1,  // 50: pilab.cloud.vmmanager.v1.VMService.UpdateVM:output_type -> pilab.cloud.vmmanager.v1.VM
	14, // 51: pilab.cloud.vmmanager.v1.VMService.AddDisk:output_type -> pilab.cloud.vmmanager.v1.Disk
	14, // 52: pilab.cloud.vmmanager.v1.VMService.GetDisk:output_type -> pilab.cloud.vmmanager.v1.Disk
	18, // 53: pilab.cloud.vmmanager.v1.VMService.ListDisks:output_type -> pilab.cloud.vmmanager.v1.ListDisksResponse
	39, // 54: pilab.cloud.vmmanager.v1.VMService.RemoveDisk:output_type -> google.protobuf.Empty
	39, // 55: pilab.cloud.vmmanager.v1.VMService.ResizeDisk:output_type -> google.protobuf.Empty
	21, // 56: pilab.cloud.vmmanager.v1.VMService.AddNetworkInterface:output_type -> pilab.cloud.vmmanager.v1.NetworkInterface
	21, // 57: pilab.cloud.vmmanager.v1.VMService.GetNetworkInterface:output_type -> pilab.cloud.vmmanager.v1.NetworkInterface
	25, // 58: pilab.cloud.vmmanager.v1.VMService.ListNetworkInterfaces:output_type -> pilab.cloud.vmmanager.v1.ListNetworkInterfacesResponse
	39, // 59: pilab.cloud.vmmanager.v1.VMService.RemoveNetworkInterface:output_type -> google.protobuf.Empty
	21, // 60: pilab.cloud.vmmanager.v1.VMService.UpdateNetworkInterface:output_type -> pilab.cloud.vmmanager.v1.NetworkInterface
	28, // 61: pilab.cloud.vmmanager.v1.VMService.AddHardwareDevice:output_type -> pilab.cloud.vmmanager.v1.HardwareDevice
	28, // 62: pilab.cloud.vmmanager.v1.VMService.GetHardwareDevice:output_type -> pilab.cloud.vmmanager.v1.HardwareDevice
	32, // 63: pilab.cloud.vmmanager.v1.VMService.ListHardwareDevices:output_type -> pilab.cloud.vmmanager.v1.ListHardwareDevicesResponse
	39, // 64: pilab.cloud.vmmanager.v1.VMService.RemoveHardwareDevice:output_type -> google.protobuf.Empty
	28, // 65: pilab.cloud.vmmanager.v1.VMService.UpdateHardwareDevice:output_type -> pilab.cloud.vmmanager.v1.HardwareDevice
	40, // [40:66] is the sub-list for method output_type
	14, // [14:40] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pilab_cloud_vmmanager_v1_vmservice_proto_init() }
func file_pilab_cloud_vmmanager_v1_vmservice_proto_init() {
	if File_pilab_cloud_vmmanager_v1_vmservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDesc), len(file_pilab_cloud_vmmanager_v1_vmservice_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilab_cloud_vmmanager_v1_vmservice_proto_goTypes,
		DependencyIndexes: file_pilab_cloud_vmmanager_v1_vmservice_proto_depIdxs,
		EnumInfos:         file_pilab_cloud_vmmanager_v1_vmservice_proto_enumTypes,
		MessageInfos:      file_pilab_cloud_vmmanager_v1_vmservice_proto_msgTypes,
	}.Build()
	File_pilab_cloud_vmmanager_v1_vmservice_proto = out.File
	file_pilab_cloud_vmmanager_v1_vmservice_proto_goTypes = nil
	file_pilab_cloud_vmmanager_v1_vmservice_proto_depIdxs = nil
}
