// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/vmmanager/v1/vmservice.proto

package vmmanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VMService_CreateVM_FullMethodName               = "/pilab.cloud.vmmanager.v1.VMService/CreateVM"
	VMService_GetVM_FullMethodName                  = "/pilab.cloud.vmmanager.v1.VMService/GetVM"
	VMService_ListVMs_FullMethodName                = "/pilab.cloud.vmmanager.v1.VMService/ListVMs"
	VMService_StartVM_FullMethodName                = "/pilab.cloud.vmmanager.v1.VMService/StartVM"
	VMService_StopVM_FullMethodName                 = "/pilab.cloud.vmmanager.v1.VMService/StopVM"
	VMService_RebootVM_FullMethodName               = "/pilab.cloud.vmmanager.v1.VMService/RebootVM"
	VMService_SuspendVM_FullMethodName              = "/pilab.cloud.vmmanager.v1.VMService/SuspendVM"
	VMService_ResumeVM_FullMethodName               = "/pilab.cloud.vmmanager.v1.VMService/ResumeVM"
	VMService_ShutdownVM_FullMethodName             = "/pilab.cloud.vmmanager.v1.VMService/ShutdownVM"
	VMService_DeleteVM_FullMethodName               = "/pilab.cloud.vmmanager.v1.VMService/DeleteVM"
	VMService_UpdateVM_FullMethodName               = "/pilab.cloud.vmmanager.v1.VMService/UpdateVM"
	VMService_AddDisk_FullMethodName                = "/pilab.cloud.vmmanager.v1.VMService/AddDisk"
	VMService_GetDisk_FullMethodName                = "/pilab.cloud.vmmanager.v1.VMService/GetDisk"
	VMService_ListDisks_FullMethodName              = "/pilab.cloud.vmmanager.v1.VMService/ListDisks"
	VMService_RemoveDisk_FullMethodName             = "/pilab.cloud.vmmanager.v1.VMService/RemoveDisk"
	VMService_ResizeDisk_FullMethodName             = "/pilab.cloud.vmmanager.v1.VMService/ResizeDisk"
	VMService_AddNetworkInterface_FullMethodName    = "/pilab.cloud.vmmanager.v1.VMService/AddNetworkInterface"
	VMService_GetNetworkInterface_FullMethodName    = "/pilab.cloud.vmmanager.v1.VMService/GetNetworkInterface"
	VMService_ListNetworkInterfaces_FullMethodName  = "/pilab.cloud.vmmanager.v1.VMService/ListNetworkInterfaces"
	VMService_RemoveNetworkInterface_FullMethodName = "/pilab.cloud.vmmanager.v1.VMService/RemoveNetworkInterface"
	VMService_UpdateNetworkInterface_FullMethodName = "/pilab.cloud.vmmanager.v1.VMService/UpdateNetworkInterface"
	VMService_AddHardwareDevice_FullMethodName      = "/pilab.cloud.vmmanager.v1.VMService/AddHardwareDevice"
	VMService_GetHardwareDevice_FullMethodName      = "/pilab.cloud.vmmanager.v1.VMService/GetHardwareDevice"
	VMService_ListHardwareDevices_FullMethodName    = "/pilab.cloud.vmmanager.v1.VMService/ListHardwareDevices"
	VMService_RemoveHardwareDevice_FullMethodName   = "/pilab.cloud.vmmanager.v1.VMService/RemoveHardwareDevice"
	VMService_UpdateHardwareDevice_FullMethodName   = "/pilab.cloud.vmmanager.v1.VMService/UpdateHardwareDevice"
)

// VMServiceClient is the client API for VMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service Definition
type VMServiceClient interface {
	// VM Lifecycle Management
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VM, error)
	GetVM(ctx context.Context, in *GetVMRequest, opts ...grpc.CallOption) (*VM, error)
	ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error)
	StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RebootVM(ctx context.Context, in *RebootVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SuspendVM(ctx context.Context, in *SuspendVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResumeVM(ctx context.Context, in *ResumeVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ShutdownVM(ctx context.Context, in *ShutdownVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VM, error)
	// Disk Management
	AddDisk(ctx context.Context, in *AddDiskRequest, opts ...grpc.CallOption) (*Disk, error)
	GetDisk(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*Disk, error)
	ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error)
	RemoveDisk(ctx context.Context, in *RemoveDiskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResizeDisk(ctx context.Context, in *ResizeDiskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Network Interface Management
	AddNetworkInterface(ctx context.Context, in *AddNetworkInterfaceRequest, opts ...grpc.CallOption) (*NetworkInterface, error)
	GetNetworkInterface(ctx context.Context, in *GetNetworkInterfaceRequest, opts ...grpc.CallOption) (*NetworkInterface, error)
	ListNetworkInterfaces(ctx context.Context, in *ListNetworkInterfacesRequest, opts ...grpc.CallOption) (*ListNetworkInterfacesResponse, error)
	RemoveNetworkInterface(ctx context.Context, in *RemoveNetworkInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNetworkInterface(ctx context.Context, in *UpdateNetworkInterfaceRequest, opts ...grpc.CallOption) (*NetworkInterface, error)
	// Hardware management
	AddHardwareDevice(ctx context.Context, in *AddHardwareDeviceRequest, opts ...grpc.CallOption) (*HardwareDevice, error)
	GetHardwareDevice(ctx context.Context, in *GetHardwareDeviceRequest, opts ...grpc.CallOption) (*HardwareDevice, error)
	ListHardwareDevices(ctx context.Context, in *ListHardwareDevicesRequest, opts ...grpc.CallOption) (*ListHardwareDevicesResponse, error)
	RemoveHardwareDevice(ctx context.Context, in *RemoveHardwareDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateHardwareDevice(ctx context.Context, in *UpdateHardwareDeviceRequest, opts ...grpc.CallOption) (*HardwareDevice, error)
}

type vMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMServiceClient(cc grpc.ClientConnInterface) VMServiceClient {
	return &vMServiceClient{cc}
}

func (c *vMServiceClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VM)
	err := c.cc.Invoke(ctx, VMService_CreateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) GetVM(ctx context.Context, in *GetVMRequest, opts ...grpc.CallOption) (*VM, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VM)
	err := c.cc.Invoke(ctx, VMService_GetVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMsResponse)
	err := c.cc.Invoke(ctx, VMService_ListVMs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_StartVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_StopVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) RebootVM(ctx context.Context, in *RebootVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_RebootVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) SuspendVM(ctx context.Context, in *SuspendVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_SuspendVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ResumeVM(ctx context.Context, in *ResumeVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_ResumeVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ShutdownVM(ctx context.Context, in *ShutdownVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_ShutdownVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_DeleteVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VM)
	err := c.cc.Invoke(ctx, VMService_UpdateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) AddDisk(ctx context.Context, in *AddDiskRequest, opts ...grpc.CallOption) (*Disk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Disk)
	err := c.cc.Invoke(ctx, VMService_AddDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) GetDisk(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*Disk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Disk)
	err := c.cc.Invoke(ctx, VMService_GetDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDisksResponse)
	err := c.cc.Invoke(ctx, VMService_ListDisks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) RemoveDisk(ctx context.Context, in *RemoveDiskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_RemoveDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ResizeDisk(ctx context.Context, in *ResizeDiskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_ResizeDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) AddNetworkInterface(ctx context.Context, in *AddNetworkInterfaceRequest, opts ...grpc.CallOption) (*NetworkInterface, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkInterface)
	err := c.cc.Invoke(ctx, VMService_AddNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) GetNetworkInterface(ctx context.Context, in *GetNetworkInterfaceRequest, opts ...grpc.CallOption) (*NetworkInterface, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkInterface)
	err := c.cc.Invoke(ctx, VMService_GetNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListNetworkInterfaces(ctx context.Context, in *ListNetworkInterfacesRequest, opts ...grpc.CallOption) (*ListNetworkInterfacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworkInterfacesResponse)
	err := c.cc.Invoke(ctx, VMService_ListNetworkInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) RemoveNetworkInterface(ctx context.Context, in *RemoveNetworkInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_RemoveNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) UpdateNetworkInterface(ctx context.Context, in *UpdateNetworkInterfaceRequest, opts ...grpc.CallOption) (*NetworkInterface, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkInterface)
	err := c.cc.Invoke(ctx, VMService_UpdateNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) AddHardwareDevice(ctx context.Context, in *AddHardwareDeviceRequest, opts ...grpc.CallOption) (*HardwareDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HardwareDevice)
	err := c.cc.Invoke(ctx, VMService_AddHardwareDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) GetHardwareDevice(ctx context.Context, in *GetHardwareDeviceRequest, opts ...grpc.CallOption) (*HardwareDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HardwareDevice)
	err := c.cc.Invoke(ctx, VMService_GetHardwareDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListHardwareDevices(ctx context.Context, in *ListHardwareDevicesRequest, opts ...grpc.CallOption) (*ListHardwareDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHardwareDevicesResponse)
	err := c.cc.Invoke(ctx, VMService_ListHardwareDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) RemoveHardwareDevice(ctx context.Context, in *RemoveHardwareDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMService_RemoveHardwareDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) UpdateHardwareDevice(ctx context.Context, in *UpdateHardwareDeviceRequest, opts ...grpc.CallOption) (*HardwareDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HardwareDevice)
	err := c.cc.Invoke(ctx, VMService_UpdateHardwareDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServiceServer is the server API for VMService service.
// All implementations must embed UnimplementedVMServiceServer
// for forward compatibility.
//
// Service Definition
type VMServiceServer interface {
	// VM Lifecycle Management
	CreateVM(context.Context, *CreateVMRequest) (*VM, error)
	GetVM(context.Context, *GetVMRequest) (*VM, error)
	ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error)
	StartVM(context.Context, *StartVMRequest) (*emptypb.Empty, error)
	StopVM(context.Context, *StopVMRequest) (*emptypb.Empty, error)
	RebootVM(context.Context, *RebootVMRequest) (*emptypb.Empty, error)
	SuspendVM(context.Context, *SuspendVMRequest) (*emptypb.Empty, error)
	ResumeVM(context.Context, *ResumeVMRequest) (*emptypb.Empty, error)
	ShutdownVM(context.Context, *ShutdownVMRequest) (*emptypb.Empty, error)
	DeleteVM(context.Context, *DeleteVMRequest) (*emptypb.Empty, error)
	UpdateVM(context.Context, *UpdateVMRequest) (*VM, error)
	// Disk Management
	AddDisk(context.Context, *AddDiskRequest) (*Disk, error)
	GetDisk(context.Context, *GetDiskRequest) (*Disk, error)
	ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error)
	RemoveDisk(context.Context, *RemoveDiskRequest) (*emptypb.Empty, error)
	ResizeDisk(context.Context, *ResizeDiskRequest) (*emptypb.Empty, error)
	// Network Interface Management
	AddNetworkInterface(context.Context, *AddNetworkInterfaceRequest) (*NetworkInterface, error)
	GetNetworkInterface(context.Context, *GetNetworkInterfaceRequest) (*NetworkInterface, error)
	ListNetworkInterfaces(context.Context, *ListNetworkInterfacesRequest) (*ListNetworkInterfacesResponse, error)
	RemoveNetworkInterface(context.Context, *RemoveNetworkInterfaceRequest) (*emptypb.Empty, error)
	UpdateNetworkInterface(context.Context, *UpdateNetworkInterfaceRequest) (*NetworkInterface, error)
	// Hardware management
	AddHardwareDevice(context.Context, *AddHardwareDeviceRequest) (*HardwareDevice, error)
	GetHardwareDevice(context.Context, *GetHardwareDeviceRequest) (*HardwareDevice, error)
	ListHardwareDevices(context.Context, *ListHardwareDevicesRequest) (*ListHardwareDevicesResponse, error)
	RemoveHardwareDevice(context.Context, *RemoveHardwareDeviceRequest) (*emptypb.Empty, error)
	UpdateHardwareDevice(context.Context, *UpdateHardwareDeviceRequest) (*HardwareDevice, error)
	mustEmbedUnimplementedVMServiceServer()
}

// UnimplementedVMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVMServiceServer struct{}

func (UnimplementedVMServiceServer) CreateVM(context.Context, *CreateVMRequest) (*VM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (UnimplementedVMServiceServer) GetVM(context.Context, *GetVMRequest) (*VM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (UnimplementedVMServiceServer) ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMs not implemented")
}
func (UnimplementedVMServiceServer) StartVM(context.Context, *StartVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedVMServiceServer) StopVM(context.Context, *StopVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (UnimplementedVMServiceServer) RebootVM(context.Context, *RebootVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootVM not implemented")
}
func (UnimplementedVMServiceServer) SuspendVM(context.Context, *SuspendVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendVM not implemented")
}
func (UnimplementedVMServiceServer) ResumeVM(context.Context, *ResumeVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeVM not implemented")
}
func (UnimplementedVMServiceServer) ShutdownVM(context.Context, *ShutdownVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownVM not implemented")
}
func (UnimplementedVMServiceServer) DeleteVM(context.Context, *DeleteVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (UnimplementedVMServiceServer) UpdateVM(context.Context, *UpdateVMRequest) (*VM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (UnimplementedVMServiceServer) AddDisk(context.Context, *AddDiskRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDisk not implemented")
}
func (UnimplementedVMServiceServer) GetDisk(context.Context, *GetDiskRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisk not implemented")
}
func (UnimplementedVMServiceServer) ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDisks not implemented")
}
func (UnimplementedVMServiceServer) RemoveDisk(context.Context, *RemoveDiskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDisk not implemented")
}
func (UnimplementedVMServiceServer) ResizeDisk(context.Context, *ResizeDiskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeDisk not implemented")
}
func (UnimplementedVMServiceServer) AddNetworkInterface(context.Context, *AddNetworkInterfaceRequest) (*NetworkInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetworkInterface not implemented")
}
func (UnimplementedVMServiceServer) GetNetworkInterface(context.Context, *GetNetworkInterfaceRequest) (*NetworkInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInterface not implemented")
}
func (UnimplementedVMServiceServer) ListNetworkInterfaces(context.Context, *ListNetworkInterfacesRequest) (*ListNetworkInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkInterfaces not implemented")
}
func (UnimplementedVMServiceServer) RemoveNetworkInterface(context.Context, *RemoveNetworkInterfaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNetworkInterface not implemented")
}
func (UnimplementedVMServiceServer) UpdateNetworkInterface(context.Context, *UpdateNetworkInterfaceRequest) (*NetworkInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkInterface not implemented")
}
func (UnimplementedVMServiceServer) AddHardwareDevice(context.Context, *AddHardwareDeviceRequest) (*HardwareDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHardwareDevice not implemented")
}
func (UnimplementedVMServiceServer) GetHardwareDevice(context.Context, *GetHardwareDeviceRequest) (*HardwareDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareDevice not implemented")
}
func (UnimplementedVMServiceServer) ListHardwareDevices(context.Context, *ListHardwareDevicesRequest) (*ListHardwareDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHardwareDevices not implemented")
}
func (UnimplementedVMServiceServer) RemoveHardwareDevice(context.Context, *RemoveHardwareDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHardwareDevice not implemented")
}
func (UnimplementedVMServiceServer) UpdateHardwareDevice(context.Context, *UpdateHardwareDeviceRequest) (*HardwareDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHardwareDevice not implemented")
}
func (UnimplementedVMServiceServer) mustEmbedUnimplementedVMServiceServer() {}
func (UnimplementedVMServiceServer) testEmbeddedByValue()                   {}

// UnsafeVMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMServiceServer will
// result in compilation errors.
type UnsafeVMServiceServer interface {
	mustEmbedUnimplementedVMServiceServer()
}

func RegisterVMServiceServer(s grpc.ServiceRegistrar, srv VMServiceServer) {
	// If the following call pancis, it indicates UnimplementedVMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VMService_ServiceDesc, srv)
}

func _VMService_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_CreateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_GetVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).GetVM(ctx, req.(*GetVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListVMs(ctx, req.(*ListVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_StartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).StartVM(ctx, req.(*StartVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_StopVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).StopVM(ctx, req.(*StopVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_RebootVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).RebootVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_RebootVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).RebootVM(ctx, req.(*RebootVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_SuspendVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).SuspendVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_SuspendVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).SuspendVM(ctx, req.(*SuspendVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ResumeVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ResumeVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ResumeVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ResumeVM(ctx, req.(*ResumeVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ShutdownVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ShutdownVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ShutdownVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ShutdownVM(ctx, req.(*ShutdownVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_DeleteVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).DeleteVM(ctx, req.(*DeleteVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_UpdateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).UpdateVM(ctx, req.(*UpdateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_AddDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).AddDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_AddDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).AddDisk(ctx, req.(*AddDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_GetDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).GetDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_GetDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).GetDisk(ctx, req.(*GetDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListDisks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListDisks(ctx, req.(*ListDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_RemoveDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).RemoveDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_RemoveDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).RemoveDisk(ctx, req.(*RemoveDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ResizeDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ResizeDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ResizeDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ResizeDisk(ctx, req.(*ResizeDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_AddNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).AddNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_AddNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).AddNetworkInterface(ctx, req.(*AddNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_GetNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).GetNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_GetNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).GetNetworkInterface(ctx, req.(*GetNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListNetworkInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListNetworkInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListNetworkInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListNetworkInterfaces(ctx, req.(*ListNetworkInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_RemoveNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).RemoveNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_RemoveNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).RemoveNetworkInterface(ctx, req.(*RemoveNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_UpdateNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).UpdateNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_UpdateNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).UpdateNetworkInterface(ctx, req.(*UpdateNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_AddHardwareDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHardwareDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).AddHardwareDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_AddHardwareDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).AddHardwareDevice(ctx, req.(*AddHardwareDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_GetHardwareDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHardwareDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).GetHardwareDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_GetHardwareDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).GetHardwareDevice(ctx, req.(*GetHardwareDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListHardwareDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHardwareDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListHardwareDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListHardwareDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListHardwareDevices(ctx, req.(*ListHardwareDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_RemoveHardwareDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHardwareDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).RemoveHardwareDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_RemoveHardwareDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).RemoveHardwareDevice(ctx, req.(*RemoveHardwareDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_UpdateHardwareDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHardwareDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).UpdateHardwareDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_UpdateHardwareDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).UpdateHardwareDevice(ctx, req.(*UpdateHardwareDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VMService_ServiceDesc is the grpc.ServiceDesc for VMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.cloud.vmmanager.v1.VMService",
	HandlerType: (*VMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _VMService_CreateVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _VMService_GetVM_Handler,
		},
		{
			MethodName: "ListVMs",
			Handler:    _VMService_ListVMs_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _VMService_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VMService_StopVM_Handler,
		},
		{
			MethodName: "RebootVM",
			Handler:    _VMService_RebootVM_Handler,
		},
		{
			MethodName: "SuspendVM",
			Handler:    _VMService_SuspendVM_Handler,
		},
		{
			MethodName: "ResumeVM",
			Handler:    _VMService_ResumeVM_Handler,
		},
		{
			MethodName: "ShutdownVM",
			Handler:    _VMService_ShutdownVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _VMService_DeleteVM_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _VMService_UpdateVM_Handler,
		},
		{
			MethodName: "AddDisk",
			Handler:    _VMService_AddDisk_Handler,
		},
		{
			MethodName: "GetDisk",
			Handler:    _VMService_GetDisk_Handler,
		},
		{
			MethodName: "ListDisks",
			Handler:    _VMService_ListDisks_Handler,
		},
		{
			MethodName: "RemoveDisk",
			Handler:    _VMService_RemoveDisk_Handler,
		},
		{
			MethodName: "ResizeDisk",
			Handler:    _VMService_ResizeDisk_Handler,
		},
		{
			MethodName: "AddNetworkInterface",
			Handler:    _VMService_AddNetworkInterface_Handler,
		},
		{
			MethodName: "GetNetworkInterface",
			Handler:    _VMService_GetNetworkInterface_Handler,
		},
		{
			MethodName: "ListNetworkInterfaces",
			Handler:    _VMService_ListNetworkInterfaces_Handler,
		},
		{
			MethodName: "RemoveNetworkInterface",
			Handler:    _VMService_RemoveNetworkInterface_Handler,
		},
		{
			MethodName: "UpdateNetworkInterface",
			Handler:    _VMService_UpdateNetworkInterface_Handler,
		},
		{
			MethodName: "AddHardwareDevice",
			Handler:    _VMService_AddHardwareDevice_Handler,
		},
		{
			MethodName: "GetHardwareDevice",
			Handler:    _VMService_GetHardwareDevice_Handler,
		},
		{
			MethodName: "ListHardwareDevices",
			Handler:    _VMService_ListHardwareDevices_Handler,
		},
		{
			MethodName: "RemoveHardwareDevice",
			Handler:    _VMService_RemoveHardwareDevice_Handler,
		},
		{
			MethodName: "UpdateHardwareDevice",
			Handler:    _VMService_UpdateHardwareDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pilab/cloud/vmmanager/v1/vmservice.proto",
}
