// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/vmmanager/v1/vmservice.proto

package vmmanagerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/vmmanager/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VMServiceName is the fully-qualified name of the VMService service.
	VMServiceName = "pilab.cloud.vmmanager.v1.VMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VMServiceCreateVMProcedure is the fully-qualified name of the VMService's CreateVM RPC.
	VMServiceCreateVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/CreateVM"
	// VMServiceGetVMProcedure is the fully-qualified name of the VMService's GetVM RPC.
	VMServiceGetVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/GetVM"
	// VMServiceListVMsProcedure is the fully-qualified name of the VMService's ListVMs RPC.
	VMServiceListVMsProcedure = "/pilab.cloud.vmmanager.v1.VMService/ListVMs"
	// VMServiceStartVMProcedure is the fully-qualified name of the VMService's StartVM RPC.
	VMServiceStartVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/StartVM"
	// VMServiceStopVMProcedure is the fully-qualified name of the VMService's StopVM RPC.
	VMServiceStopVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/StopVM"
	// VMServiceRebootVMProcedure is the fully-qualified name of the VMService's RebootVM RPC.
	VMServiceRebootVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/RebootVM"
	// VMServiceSuspendVMProcedure is the fully-qualified name of the VMService's SuspendVM RPC.
	VMServiceSuspendVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/SuspendVM"
	// VMServiceResumeVMProcedure is the fully-qualified name of the VMService's ResumeVM RPC.
	VMServiceResumeVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/ResumeVM"
	// VMServiceShutdownVMProcedure is the fully-qualified name of the VMService's ShutdownVM RPC.
	VMServiceShutdownVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/ShutdownVM"
	// VMServiceDeleteVMProcedure is the fully-qualified name of the VMService's DeleteVM RPC.
	VMServiceDeleteVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/DeleteVM"
	// VMServiceUpdateVMProcedure is the fully-qualified name of the VMService's UpdateVM RPC.
	VMServiceUpdateVMProcedure = "/pilab.cloud.vmmanager.v1.VMService/UpdateVM"
	// VMServiceAddDiskProcedure is the fully-qualified name of the VMService's AddDisk RPC.
	VMServiceAddDiskProcedure = "/pilab.cloud.vmmanager.v1.VMService/AddDisk"
	// VMServiceGetDiskProcedure is the fully-qualified name of the VMService's GetDisk RPC.
	VMServiceGetDiskProcedure = "/pilab.cloud.vmmanager.v1.VMService/GetDisk"
	// VMServiceListDisksProcedure is the fully-qualified name of the VMService's ListDisks RPC.
	VMServiceListDisksProcedure = "/pilab.cloud.vmmanager.v1.VMService/ListDisks"
	// VMServiceRemoveDiskProcedure is the fully-qualified name of the VMService's RemoveDisk RPC.
	VMServiceRemoveDiskProcedure = "/pilab.cloud.vmmanager.v1.VMService/RemoveDisk"
	// VMServiceResizeDiskProcedure is the fully-qualified name of the VMService's ResizeDisk RPC.
	VMServiceResizeDiskProcedure = "/pilab.cloud.vmmanager.v1.VMService/ResizeDisk"
	// VMServiceAddNetworkInterfaceProcedure is the fully-qualified name of the VMService's
	// AddNetworkInterface RPC.
	VMServiceAddNetworkInterfaceProcedure = "/pilab.cloud.vmmanager.v1.VMService/AddNetworkInterface"
	// VMServiceGetNetworkInterfaceProcedure is the fully-qualified name of the VMService's
	// GetNetworkInterface RPC.
	VMServiceGetNetworkInterfaceProcedure = "/pilab.cloud.vmmanager.v1.VMService/GetNetworkInterface"
	// VMServiceListNetworkInterfacesProcedure is the fully-qualified name of the VMService's
	// ListNetworkInterfaces RPC.
	VMServiceListNetworkInterfacesProcedure = "/pilab.cloud.vmmanager.v1.VMService/ListNetworkInterfaces"
	// VMServiceRemoveNetworkInterfaceProcedure is the fully-qualified name of the VMService's
	// RemoveNetworkInterface RPC.
	VMServiceRemoveNetworkInterfaceProcedure = "/pilab.cloud.vmmanager.v1.VMService/RemoveNetworkInterface"
	// VMServiceUpdateNetworkInterfaceProcedure is the fully-qualified name of the VMService's
	// UpdateNetworkInterface RPC.
	VMServiceUpdateNetworkInterfaceProcedure = "/pilab.cloud.vmmanager.v1.VMService/UpdateNetworkInterface"
	// VMServiceAddHardwareDeviceProcedure is the fully-qualified name of the VMService's
	// AddHardwareDevice RPC.
	VMServiceAddHardwareDeviceProcedure = "/pilab.cloud.vmmanager.v1.VMService/AddHardwareDevice"
	// VMServiceGetHardwareDeviceProcedure is the fully-qualified name of the VMService's
	// GetHardwareDevice RPC.
	VMServiceGetHardwareDeviceProcedure = "/pilab.cloud.vmmanager.v1.VMService/GetHardwareDevice"
	// VMServiceListHardwareDevicesProcedure is the fully-qualified name of the VMService's
	// ListHardwareDevices RPC.
	VMServiceListHardwareDevicesProcedure = "/pilab.cloud.vmmanager.v1.VMService/ListHardwareDevices"
	// VMServiceRemoveHardwareDeviceProcedure is the fully-qualified name of the VMService's
	// RemoveHardwareDevice RPC.
	VMServiceRemoveHardwareDeviceProcedure = "/pilab.cloud.vmmanager.v1.VMService/RemoveHardwareDevice"
	// VMServiceUpdateHardwareDeviceProcedure is the fully-qualified name of the VMService's
	// UpdateHardwareDevice RPC.
	VMServiceUpdateHardwareDeviceProcedure = "/pilab.cloud.vmmanager.v1.VMService/UpdateHardwareDevice"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	vMServiceServiceDescriptor                      = v1.File_pilab_cloud_vmmanager_v1_vmservice_proto.Services().ByName("VMService")
	vMServiceCreateVMMethodDescriptor               = vMServiceServiceDescriptor.Methods().ByName("CreateVM")
	vMServiceGetVMMethodDescriptor                  = vMServiceServiceDescriptor.Methods().ByName("GetVM")
	vMServiceListVMsMethodDescriptor                = vMServiceServiceDescriptor.Methods().ByName("ListVMs")
	vMServiceStartVMMethodDescriptor                = vMServiceServiceDescriptor.Methods().ByName("StartVM")
	vMServiceStopVMMethodDescriptor                 = vMServiceServiceDescriptor.Methods().ByName("StopVM")
	vMServiceRebootVMMethodDescriptor               = vMServiceServiceDescriptor.Methods().ByName("RebootVM")
	vMServiceSuspendVMMethodDescriptor              = vMServiceServiceDescriptor.Methods().ByName("SuspendVM")
	vMServiceResumeVMMethodDescriptor               = vMServiceServiceDescriptor.Methods().ByName("ResumeVM")
	vMServiceShutdownVMMethodDescriptor             = vMServiceServiceDescriptor.Methods().ByName("ShutdownVM")
	vMServiceDeleteVMMethodDescriptor               = vMServiceServiceDescriptor.Methods().ByName("DeleteVM")
	vMServiceUpdateVMMethodDescriptor               = vMServiceServiceDescriptor.Methods().ByName("UpdateVM")
	vMServiceAddDiskMethodDescriptor                = vMServiceServiceDescriptor.Methods().ByName("AddDisk")
	vMServiceGetDiskMethodDescriptor                = vMServiceServiceDescriptor.Methods().ByName("GetDisk")
	vMServiceListDisksMethodDescriptor              = vMServiceServiceDescriptor.Methods().ByName("ListDisks")
	vMServiceRemoveDiskMethodDescriptor             = vMServiceServiceDescriptor.Methods().ByName("RemoveDisk")
	vMServiceResizeDiskMethodDescriptor             = vMServiceServiceDescriptor.Methods().ByName("ResizeDisk")
	vMServiceAddNetworkInterfaceMethodDescriptor    = vMServiceServiceDescriptor.Methods().ByName("AddNetworkInterface")
	vMServiceGetNetworkInterfaceMethodDescriptor    = vMServiceServiceDescriptor.Methods().ByName("GetNetworkInterface")
	vMServiceListNetworkInterfacesMethodDescriptor  = vMServiceServiceDescriptor.Methods().ByName("ListNetworkInterfaces")
	vMServiceRemoveNetworkInterfaceMethodDescriptor = vMServiceServiceDescriptor.Methods().ByName("RemoveNetworkInterface")
	vMServiceUpdateNetworkInterfaceMethodDescriptor = vMServiceServiceDescriptor.Methods().ByName("UpdateNetworkInterface")
	vMServiceAddHardwareDeviceMethodDescriptor      = vMServiceServiceDescriptor.Methods().ByName("AddHardwareDevice")
	vMServiceGetHardwareDeviceMethodDescriptor      = vMServiceServiceDescriptor.Methods().ByName("GetHardwareDevice")
	vMServiceListHardwareDevicesMethodDescriptor    = vMServiceServiceDescriptor.Methods().ByName("ListHardwareDevices")
	vMServiceRemoveHardwareDeviceMethodDescriptor   = vMServiceServiceDescriptor.Methods().ByName("RemoveHardwareDevice")
	vMServiceUpdateHardwareDeviceMethodDescriptor   = vMServiceServiceDescriptor.Methods().ByName("UpdateHardwareDevice")
)

// VMServiceClient is a client for the pilab.cloud.vmmanager.v1.VMService service.
type VMServiceClient interface {
	// VM Lifecycle Management
	CreateVM(context.Context, *connect.Request[v1.CreateVMRequest]) (*connect.Response[v1.VM], error)
	GetVM(context.Context, *connect.Request[v1.GetVMRequest]) (*connect.Response[v1.VM], error)
	ListVMs(context.Context, *connect.Request[v1.ListVMsRequest]) (*connect.Response[v1.ListVMsResponse], error)
	StartVM(context.Context, *connect.Request[v1.StartVMRequest]) (*connect.Response[emptypb.Empty], error)
	StopVM(context.Context, *connect.Request[v1.StopVMRequest]) (*connect.Response[emptypb.Empty], error)
	RebootVM(context.Context, *connect.Request[v1.RebootVMRequest]) (*connect.Response[emptypb.Empty], error)
	SuspendVM(context.Context, *connect.Request[v1.SuspendVMRequest]) (*connect.Response[emptypb.Empty], error)
	ResumeVM(context.Context, *connect.Request[v1.ResumeVMRequest]) (*connect.Response[emptypb.Empty], error)
	ShutdownVM(context.Context, *connect.Request[v1.ShutdownVMRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteVM(context.Context, *connect.Request[v1.DeleteVMRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateVM(context.Context, *connect.Request[v1.UpdateVMRequest]) (*connect.Response[v1.VM], error)
	// Disk Management
	AddDisk(context.Context, *connect.Request[v1.AddDiskRequest]) (*connect.Response[v1.Disk], error)
	GetDisk(context.Context, *connect.Request[v1.GetDiskRequest]) (*connect.Response[v1.Disk], error)
	ListDisks(context.Context, *connect.Request[v1.ListDisksRequest]) (*connect.Response[v1.ListDisksResponse], error)
	RemoveDisk(context.Context, *connect.Request[v1.RemoveDiskRequest]) (*connect.Response[emptypb.Empty], error)
	ResizeDisk(context.Context, *connect.Request[v1.ResizeDiskRequest]) (*connect.Response[emptypb.Empty], error)
	// Network Interface Management
	AddNetworkInterface(context.Context, *connect.Request[v1.AddNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error)
	GetNetworkInterface(context.Context, *connect.Request[v1.GetNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error)
	ListNetworkInterfaces(context.Context, *connect.Request[v1.ListNetworkInterfacesRequest]) (*connect.Response[v1.ListNetworkInterfacesResponse], error)
	RemoveNetworkInterface(context.Context, *connect.Request[v1.RemoveNetworkInterfaceRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateNetworkInterface(context.Context, *connect.Request[v1.UpdateNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error)
	// Hardware management
	AddHardwareDevice(context.Context, *connect.Request[v1.AddHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error)
	GetHardwareDevice(context.Context, *connect.Request[v1.GetHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error)
	ListHardwareDevices(context.Context, *connect.Request[v1.ListHardwareDevicesRequest]) (*connect.Response[v1.ListHardwareDevicesResponse], error)
	RemoveHardwareDevice(context.Context, *connect.Request[v1.RemoveHardwareDeviceRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateHardwareDevice(context.Context, *connect.Request[v1.UpdateHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error)
}

// NewVMServiceClient constructs a client for the pilab.cloud.vmmanager.v1.VMService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vMServiceClient{
		createVM: connect.NewClient[v1.CreateVMRequest, v1.VM](
			httpClient,
			baseURL+VMServiceCreateVMProcedure,
			connect.WithSchema(vMServiceCreateVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVM: connect.NewClient[v1.GetVMRequest, v1.VM](
			httpClient,
			baseURL+VMServiceGetVMProcedure,
			connect.WithSchema(vMServiceGetVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listVMs: connect.NewClient[v1.ListVMsRequest, v1.ListVMsResponse](
			httpClient,
			baseURL+VMServiceListVMsProcedure,
			connect.WithSchema(vMServiceListVMsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startVM: connect.NewClient[v1.StartVMRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceStartVMProcedure,
			connect.WithSchema(vMServiceStartVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopVM: connect.NewClient[v1.StopVMRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceStopVMProcedure,
			connect.WithSchema(vMServiceStopVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rebootVM: connect.NewClient[v1.RebootVMRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceRebootVMProcedure,
			connect.WithSchema(vMServiceRebootVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		suspendVM: connect.NewClient[v1.SuspendVMRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceSuspendVMProcedure,
			connect.WithSchema(vMServiceSuspendVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resumeVM: connect.NewClient[v1.ResumeVMRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceResumeVMProcedure,
			connect.WithSchema(vMServiceResumeVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		shutdownVM: connect.NewClient[v1.ShutdownVMRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceShutdownVMProcedure,
			connect.WithSchema(vMServiceShutdownVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteVM: connect.NewClient[v1.DeleteVMRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceDeleteVMProcedure,
			connect.WithSchema(vMServiceDeleteVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateVM: connect.NewClient[v1.UpdateVMRequest, v1.VM](
			httpClient,
			baseURL+VMServiceUpdateVMProcedure,
			connect.WithSchema(vMServiceUpdateVMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addDisk: connect.NewClient[v1.AddDiskRequest, v1.Disk](
			httpClient,
			baseURL+VMServiceAddDiskProcedure,
			connect.WithSchema(vMServiceAddDiskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDisk: connect.NewClient[v1.GetDiskRequest, v1.Disk](
			httpClient,
			baseURL+VMServiceGetDiskProcedure,
			connect.WithSchema(vMServiceGetDiskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDisks: connect.NewClient[v1.ListDisksRequest, v1.ListDisksResponse](
			httpClient,
			baseURL+VMServiceListDisksProcedure,
			connect.WithSchema(vMServiceListDisksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeDisk: connect.NewClient[v1.RemoveDiskRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceRemoveDiskProcedure,
			connect.WithSchema(vMServiceRemoveDiskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resizeDisk: connect.NewClient[v1.ResizeDiskRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceResizeDiskProcedure,
			connect.WithSchema(vMServiceResizeDiskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addNetworkInterface: connect.NewClient[v1.AddNetworkInterfaceRequest, v1.NetworkInterface](
			httpClient,
			baseURL+VMServiceAddNetworkInterfaceProcedure,
			connect.WithSchema(vMServiceAddNetworkInterfaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetworkInterface: connect.NewClient[v1.GetNetworkInterfaceRequest, v1.NetworkInterface](
			httpClient,
			baseURL+VMServiceGetNetworkInterfaceProcedure,
			connect.WithSchema(vMServiceGetNetworkInterfaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNetworkInterfaces: connect.NewClient[v1.ListNetworkInterfacesRequest, v1.ListNetworkInterfacesResponse](
			httpClient,
			baseURL+VMServiceListNetworkInterfacesProcedure,
			connect.WithSchema(vMServiceListNetworkInterfacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeNetworkInterface: connect.NewClient[v1.RemoveNetworkInterfaceRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceRemoveNetworkInterfaceProcedure,
			connect.WithSchema(vMServiceRemoveNetworkInterfaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNetworkInterface: connect.NewClient[v1.UpdateNetworkInterfaceRequest, v1.NetworkInterface](
			httpClient,
			baseURL+VMServiceUpdateNetworkInterfaceProcedure,
			connect.WithSchema(vMServiceUpdateNetworkInterfaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addHardwareDevice: connect.NewClient[v1.AddHardwareDeviceRequest, v1.HardwareDevice](
			httpClient,
			baseURL+VMServiceAddHardwareDeviceProcedure,
			connect.WithSchema(vMServiceAddHardwareDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHardwareDevice: connect.NewClient[v1.GetHardwareDeviceRequest, v1.HardwareDevice](
			httpClient,
			baseURL+VMServiceGetHardwareDeviceProcedure,
			connect.WithSchema(vMServiceGetHardwareDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listHardwareDevices: connect.NewClient[v1.ListHardwareDevicesRequest, v1.ListHardwareDevicesResponse](
			httpClient,
			baseURL+VMServiceListHardwareDevicesProcedure,
			connect.WithSchema(vMServiceListHardwareDevicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeHardwareDevice: connect.NewClient[v1.RemoveHardwareDeviceRequest, emptypb.Empty](
			httpClient,
			baseURL+VMServiceRemoveHardwareDeviceProcedure,
			connect.WithSchema(vMServiceRemoveHardwareDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateHardwareDevice: connect.NewClient[v1.UpdateHardwareDeviceRequest, v1.HardwareDevice](
			httpClient,
			baseURL+VMServiceUpdateHardwareDeviceProcedure,
			connect.WithSchema(vMServiceUpdateHardwareDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// vMServiceClient implements VMServiceClient.
type vMServiceClient struct {
	createVM               *connect.Client[v1.CreateVMRequest, v1.VM]
	getVM                  *connect.Client[v1.GetVMRequest, v1.VM]
	listVMs                *connect.Client[v1.ListVMsRequest, v1.ListVMsResponse]
	startVM                *connect.Client[v1.StartVMRequest, emptypb.Empty]
	stopVM                 *connect.Client[v1.StopVMRequest, emptypb.Empty]
	rebootVM               *connect.Client[v1.RebootVMRequest, emptypb.Empty]
	suspendVM              *connect.Client[v1.SuspendVMRequest, emptypb.Empty]
	resumeVM               *connect.Client[v1.ResumeVMRequest, emptypb.Empty]
	shutdownVM             *connect.Client[v1.ShutdownVMRequest, emptypb.Empty]
	deleteVM               *connect.Client[v1.DeleteVMRequest, emptypb.Empty]
	updateVM               *connect.Client[v1.UpdateVMRequest, v1.VM]
	addDisk                *connect.Client[v1.AddDiskRequest, v1.Disk]
	getDisk                *connect.Client[v1.GetDiskRequest, v1.Disk]
	listDisks              *connect.Client[v1.ListDisksRequest, v1.ListDisksResponse]
	removeDisk             *connect.Client[v1.RemoveDiskRequest, emptypb.Empty]
	resizeDisk             *connect.Client[v1.ResizeDiskRequest, emptypb.Empty]
	addNetworkInterface    *connect.Client[v1.AddNetworkInterfaceRequest, v1.NetworkInterface]
	getNetworkInterface    *connect.Client[v1.GetNetworkInterfaceRequest, v1.NetworkInterface]
	listNetworkInterfaces  *connect.Client[v1.ListNetworkInterfacesRequest, v1.ListNetworkInterfacesResponse]
	removeNetworkInterface *connect.Client[v1.RemoveNetworkInterfaceRequest, emptypb.Empty]
	updateNetworkInterface *connect.Client[v1.UpdateNetworkInterfaceRequest, v1.NetworkInterface]
	addHardwareDevice      *connect.Client[v1.AddHardwareDeviceRequest, v1.HardwareDevice]
	getHardwareDevice      *connect.Client[v1.GetHardwareDeviceRequest, v1.HardwareDevice]
	listHardwareDevices    *connect.Client[v1.ListHardwareDevicesRequest, v1.ListHardwareDevicesResponse]
	removeHardwareDevice   *connect.Client[v1.RemoveHardwareDeviceRequest, emptypb.Empty]
	updateHardwareDevice   *connect.Client[v1.UpdateHardwareDeviceRequest, v1.HardwareDevice]
}

// CreateVM calls pilab.cloud.vmmanager.v1.VMService.CreateVM.
func (c *vMServiceClient) CreateVM(ctx context.Context, req *connect.Request[v1.CreateVMRequest]) (*connect.Response[v1.VM], error) {
	return c.createVM.CallUnary(ctx, req)
}

// GetVM calls pilab.cloud.vmmanager.v1.VMService.GetVM.
func (c *vMServiceClient) GetVM(ctx context.Context, req *connect.Request[v1.GetVMRequest]) (*connect.Response[v1.VM], error) {
	return c.getVM.CallUnary(ctx, req)
}

// ListVMs calls pilab.cloud.vmmanager.v1.VMService.ListVMs.
func (c *vMServiceClient) ListVMs(ctx context.Context, req *connect.Request[v1.ListVMsRequest]) (*connect.Response[v1.ListVMsResponse], error) {
	return c.listVMs.CallUnary(ctx, req)
}

// StartVM calls pilab.cloud.vmmanager.v1.VMService.StartVM.
func (c *vMServiceClient) StartVM(ctx context.Context, req *connect.Request[v1.StartVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startVM.CallUnary(ctx, req)
}

// StopVM calls pilab.cloud.vmmanager.v1.VMService.StopVM.
func (c *vMServiceClient) StopVM(ctx context.Context, req *connect.Request[v1.StopVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.stopVM.CallUnary(ctx, req)
}

// RebootVM calls pilab.cloud.vmmanager.v1.VMService.RebootVM.
func (c *vMServiceClient) RebootVM(ctx context.Context, req *connect.Request[v1.RebootVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.rebootVM.CallUnary(ctx, req)
}

// SuspendVM calls pilab.cloud.vmmanager.v1.VMService.SuspendVM.
func (c *vMServiceClient) SuspendVM(ctx context.Context, req *connect.Request[v1.SuspendVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.suspendVM.CallUnary(ctx, req)
}

// ResumeVM calls pilab.cloud.vmmanager.v1.VMService.ResumeVM.
func (c *vMServiceClient) ResumeVM(ctx context.Context, req *connect.Request[v1.ResumeVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.resumeVM.CallUnary(ctx, req)
}

// ShutdownVM calls pilab.cloud.vmmanager.v1.VMService.ShutdownVM.
func (c *vMServiceClient) ShutdownVM(ctx context.Context, req *connect.Request[v1.ShutdownVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.shutdownVM.CallUnary(ctx, req)
}

// DeleteVM calls pilab.cloud.vmmanager.v1.VMService.DeleteVM.
func (c *vMServiceClient) DeleteVM(ctx context.Context, req *connect.Request[v1.DeleteVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteVM.CallUnary(ctx, req)
}

// UpdateVM calls pilab.cloud.vmmanager.v1.VMService.UpdateVM.
func (c *vMServiceClient) UpdateVM(ctx context.Context, req *connect.Request[v1.UpdateVMRequest]) (*connect.Response[v1.VM], error) {
	return c.updateVM.CallUnary(ctx, req)
}

// AddDisk calls pilab.cloud.vmmanager.v1.VMService.AddDisk.
func (c *vMServiceClient) AddDisk(ctx context.Context, req *connect.Request[v1.AddDiskRequest]) (*connect.Response[v1.Disk], error) {
	return c.addDisk.CallUnary(ctx, req)
}

// GetDisk calls pilab.cloud.vmmanager.v1.VMService.GetDisk.
func (c *vMServiceClient) GetDisk(ctx context.Context, req *connect.Request[v1.GetDiskRequest]) (*connect.Response[v1.Disk], error) {
	return c.getDisk.CallUnary(ctx, req)
}

// ListDisks calls pilab.cloud.vmmanager.v1.VMService.ListDisks.
func (c *vMServiceClient) ListDisks(ctx context.Context, req *connect.Request[v1.ListDisksRequest]) (*connect.Response[v1.ListDisksResponse], error) {
	return c.listDisks.CallUnary(ctx, req)
}

// RemoveDisk calls pilab.cloud.vmmanager.v1.VMService.RemoveDisk.
func (c *vMServiceClient) RemoveDisk(ctx context.Context, req *connect.Request[v1.RemoveDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeDisk.CallUnary(ctx, req)
}

// ResizeDisk calls pilab.cloud.vmmanager.v1.VMService.ResizeDisk.
func (c *vMServiceClient) ResizeDisk(ctx context.Context, req *connect.Request[v1.ResizeDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.resizeDisk.CallUnary(ctx, req)
}

// AddNetworkInterface calls pilab.cloud.vmmanager.v1.VMService.AddNetworkInterface.
func (c *vMServiceClient) AddNetworkInterface(ctx context.Context, req *connect.Request[v1.AddNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error) {
	return c.addNetworkInterface.CallUnary(ctx, req)
}

// GetNetworkInterface calls pilab.cloud.vmmanager.v1.VMService.GetNetworkInterface.
func (c *vMServiceClient) GetNetworkInterface(ctx context.Context, req *connect.Request[v1.GetNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error) {
	return c.getNetworkInterface.CallUnary(ctx, req)
}

// ListNetworkInterfaces calls pilab.cloud.vmmanager.v1.VMService.ListNetworkInterfaces.
func (c *vMServiceClient) ListNetworkInterfaces(ctx context.Context, req *connect.Request[v1.ListNetworkInterfacesRequest]) (*connect.Response[v1.ListNetworkInterfacesResponse], error) {
	return c.listNetworkInterfaces.CallUnary(ctx, req)
}

// RemoveNetworkInterface calls pilab.cloud.vmmanager.v1.VMService.RemoveNetworkInterface.
func (c *vMServiceClient) RemoveNetworkInterface(ctx context.Context, req *connect.Request[v1.RemoveNetworkInterfaceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeNetworkInterface.CallUnary(ctx, req)
}

// UpdateNetworkInterface calls pilab.cloud.vmmanager.v1.VMService.UpdateNetworkInterface.
func (c *vMServiceClient) UpdateNetworkInterface(ctx context.Context, req *connect.Request[v1.UpdateNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error) {
	return c.updateNetworkInterface.CallUnary(ctx, req)
}

// AddHardwareDevice calls pilab.cloud.vmmanager.v1.VMService.AddHardwareDevice.
func (c *vMServiceClient) AddHardwareDevice(ctx context.Context, req *connect.Request[v1.AddHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error) {
	return c.addHardwareDevice.CallUnary(ctx, req)
}

// GetHardwareDevice calls pilab.cloud.vmmanager.v1.VMService.GetHardwareDevice.
func (c *vMServiceClient) GetHardwareDevice(ctx context.Context, req *connect.Request[v1.GetHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error) {
	return c.getHardwareDevice.CallUnary(ctx, req)
}

// ListHardwareDevices calls pilab.cloud.vmmanager.v1.VMService.ListHardwareDevices.
func (c *vMServiceClient) ListHardwareDevices(ctx context.Context, req *connect.Request[v1.ListHardwareDevicesRequest]) (*connect.Response[v1.ListHardwareDevicesResponse], error) {
	return c.listHardwareDevices.CallUnary(ctx, req)
}

// RemoveHardwareDevice calls pilab.cloud.vmmanager.v1.VMService.RemoveHardwareDevice.
func (c *vMServiceClient) RemoveHardwareDevice(ctx context.Context, req *connect.Request[v1.RemoveHardwareDeviceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeHardwareDevice.CallUnary(ctx, req)
}

// UpdateHardwareDevice calls pilab.cloud.vmmanager.v1.VMService.UpdateHardwareDevice.
func (c *vMServiceClient) UpdateHardwareDevice(ctx context.Context, req *connect.Request[v1.UpdateHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error) {
	return c.updateHardwareDevice.CallUnary(ctx, req)
}

// VMServiceHandler is an implementation of the pilab.cloud.vmmanager.v1.VMService service.
type VMServiceHandler interface {
	// VM Lifecycle Management
	CreateVM(context.Context, *connect.Request[v1.CreateVMRequest]) (*connect.Response[v1.VM], error)
	GetVM(context.Context, *connect.Request[v1.GetVMRequest]) (*connect.Response[v1.VM], error)
	ListVMs(context.Context, *connect.Request[v1.ListVMsRequest]) (*connect.Response[v1.ListVMsResponse], error)
	StartVM(context.Context, *connect.Request[v1.StartVMRequest]) (*connect.Response[emptypb.Empty], error)
	StopVM(context.Context, *connect.Request[v1.StopVMRequest]) (*connect.Response[emptypb.Empty], error)
	RebootVM(context.Context, *connect.Request[v1.RebootVMRequest]) (*connect.Response[emptypb.Empty], error)
	SuspendVM(context.Context, *connect.Request[v1.SuspendVMRequest]) (*connect.Response[emptypb.Empty], error)
	ResumeVM(context.Context, *connect.Request[v1.ResumeVMRequest]) (*connect.Response[emptypb.Empty], error)
	ShutdownVM(context.Context, *connect.Request[v1.ShutdownVMRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteVM(context.Context, *connect.Request[v1.DeleteVMRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateVM(context.Context, *connect.Request[v1.UpdateVMRequest]) (*connect.Response[v1.VM], error)
	// Disk Management
	AddDisk(context.Context, *connect.Request[v1.AddDiskRequest]) (*connect.Response[v1.Disk], error)
	GetDisk(context.Context, *connect.Request[v1.GetDiskRequest]) (*connect.Response[v1.Disk], error)
	ListDisks(context.Context, *connect.Request[v1.ListDisksRequest]) (*connect.Response[v1.ListDisksResponse], error)
	RemoveDisk(context.Context, *connect.Request[v1.RemoveDiskRequest]) (*connect.Response[emptypb.Empty], error)
	ResizeDisk(context.Context, *connect.Request[v1.ResizeDiskRequest]) (*connect.Response[emptypb.Empty], error)
	// Network Interface Management
	AddNetworkInterface(context.Context, *connect.Request[v1.AddNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error)
	GetNetworkInterface(context.Context, *connect.Request[v1.GetNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error)
	ListNetworkInterfaces(context.Context, *connect.Request[v1.ListNetworkInterfacesRequest]) (*connect.Response[v1.ListNetworkInterfacesResponse], error)
	RemoveNetworkInterface(context.Context, *connect.Request[v1.RemoveNetworkInterfaceRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateNetworkInterface(context.Context, *connect.Request[v1.UpdateNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error)
	// Hardware management
	AddHardwareDevice(context.Context, *connect.Request[v1.AddHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error)
	GetHardwareDevice(context.Context, *connect.Request[v1.GetHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error)
	ListHardwareDevices(context.Context, *connect.Request[v1.ListHardwareDevicesRequest]) (*connect.Response[v1.ListHardwareDevicesResponse], error)
	RemoveHardwareDevice(context.Context, *connect.Request[v1.RemoveHardwareDeviceRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateHardwareDevice(context.Context, *connect.Request[v1.UpdateHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error)
}

// NewVMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVMServiceHandler(svc VMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vMServiceCreateVMHandler := connect.NewUnaryHandler(
		VMServiceCreateVMProcedure,
		svc.CreateVM,
		connect.WithSchema(vMServiceCreateVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceGetVMHandler := connect.NewUnaryHandler(
		VMServiceGetVMProcedure,
		svc.GetVM,
		connect.WithSchema(vMServiceGetVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceListVMsHandler := connect.NewUnaryHandler(
		VMServiceListVMsProcedure,
		svc.ListVMs,
		connect.WithSchema(vMServiceListVMsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceStartVMHandler := connect.NewUnaryHandler(
		VMServiceStartVMProcedure,
		svc.StartVM,
		connect.WithSchema(vMServiceStartVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceStopVMHandler := connect.NewUnaryHandler(
		VMServiceStopVMProcedure,
		svc.StopVM,
		connect.WithSchema(vMServiceStopVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceRebootVMHandler := connect.NewUnaryHandler(
		VMServiceRebootVMProcedure,
		svc.RebootVM,
		connect.WithSchema(vMServiceRebootVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceSuspendVMHandler := connect.NewUnaryHandler(
		VMServiceSuspendVMProcedure,
		svc.SuspendVM,
		connect.WithSchema(vMServiceSuspendVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceResumeVMHandler := connect.NewUnaryHandler(
		VMServiceResumeVMProcedure,
		svc.ResumeVM,
		connect.WithSchema(vMServiceResumeVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceShutdownVMHandler := connect.NewUnaryHandler(
		VMServiceShutdownVMProcedure,
		svc.ShutdownVM,
		connect.WithSchema(vMServiceShutdownVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceDeleteVMHandler := connect.NewUnaryHandler(
		VMServiceDeleteVMProcedure,
		svc.DeleteVM,
		connect.WithSchema(vMServiceDeleteVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceUpdateVMHandler := connect.NewUnaryHandler(
		VMServiceUpdateVMProcedure,
		svc.UpdateVM,
		connect.WithSchema(vMServiceUpdateVMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceAddDiskHandler := connect.NewUnaryHandler(
		VMServiceAddDiskProcedure,
		svc.AddDisk,
		connect.WithSchema(vMServiceAddDiskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceGetDiskHandler := connect.NewUnaryHandler(
		VMServiceGetDiskProcedure,
		svc.GetDisk,
		connect.WithSchema(vMServiceGetDiskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceListDisksHandler := connect.NewUnaryHandler(
		VMServiceListDisksProcedure,
		svc.ListDisks,
		connect.WithSchema(vMServiceListDisksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceRemoveDiskHandler := connect.NewUnaryHandler(
		VMServiceRemoveDiskProcedure,
		svc.RemoveDisk,
		connect.WithSchema(vMServiceRemoveDiskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceResizeDiskHandler := connect.NewUnaryHandler(
		VMServiceResizeDiskProcedure,
		svc.ResizeDisk,
		connect.WithSchema(vMServiceResizeDiskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceAddNetworkInterfaceHandler := connect.NewUnaryHandler(
		VMServiceAddNetworkInterfaceProcedure,
		svc.AddNetworkInterface,
		connect.WithSchema(vMServiceAddNetworkInterfaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceGetNetworkInterfaceHandler := connect.NewUnaryHandler(
		VMServiceGetNetworkInterfaceProcedure,
		svc.GetNetworkInterface,
		connect.WithSchema(vMServiceGetNetworkInterfaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceListNetworkInterfacesHandler := connect.NewUnaryHandler(
		VMServiceListNetworkInterfacesProcedure,
		svc.ListNetworkInterfaces,
		connect.WithSchema(vMServiceListNetworkInterfacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceRemoveNetworkInterfaceHandler := connect.NewUnaryHandler(
		VMServiceRemoveNetworkInterfaceProcedure,
		svc.RemoveNetworkInterface,
		connect.WithSchema(vMServiceRemoveNetworkInterfaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceUpdateNetworkInterfaceHandler := connect.NewUnaryHandler(
		VMServiceUpdateNetworkInterfaceProcedure,
		svc.UpdateNetworkInterface,
		connect.WithSchema(vMServiceUpdateNetworkInterfaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceAddHardwareDeviceHandler := connect.NewUnaryHandler(
		VMServiceAddHardwareDeviceProcedure,
		svc.AddHardwareDevice,
		connect.WithSchema(vMServiceAddHardwareDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceGetHardwareDeviceHandler := connect.NewUnaryHandler(
		VMServiceGetHardwareDeviceProcedure,
		svc.GetHardwareDevice,
		connect.WithSchema(vMServiceGetHardwareDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceListHardwareDevicesHandler := connect.NewUnaryHandler(
		VMServiceListHardwareDevicesProcedure,
		svc.ListHardwareDevices,
		connect.WithSchema(vMServiceListHardwareDevicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceRemoveHardwareDeviceHandler := connect.NewUnaryHandler(
		VMServiceRemoveHardwareDeviceProcedure,
		svc.RemoveHardwareDevice,
		connect.WithSchema(vMServiceRemoveHardwareDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vMServiceUpdateHardwareDeviceHandler := connect.NewUnaryHandler(
		VMServiceUpdateHardwareDeviceProcedure,
		svc.UpdateHardwareDevice,
		connect.WithSchema(vMServiceUpdateHardwareDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.vmmanager.v1.VMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VMServiceCreateVMProcedure:
			vMServiceCreateVMHandler.ServeHTTP(w, r)
		case VMServiceGetVMProcedure:
			vMServiceGetVMHandler.ServeHTTP(w, r)
		case VMServiceListVMsProcedure:
			vMServiceListVMsHandler.ServeHTTP(w, r)
		case VMServiceStartVMProcedure:
			vMServiceStartVMHandler.ServeHTTP(w, r)
		case VMServiceStopVMProcedure:
			vMServiceStopVMHandler.ServeHTTP(w, r)
		case VMServiceRebootVMProcedure:
			vMServiceRebootVMHandler.ServeHTTP(w, r)
		case VMServiceSuspendVMProcedure:
			vMServiceSuspendVMHandler.ServeHTTP(w, r)
		case VMServiceResumeVMProcedure:
			vMServiceResumeVMHandler.ServeHTTP(w, r)
		case VMServiceShutdownVMProcedure:
			vMServiceShutdownVMHandler.ServeHTTP(w, r)
		case VMServiceDeleteVMProcedure:
			vMServiceDeleteVMHandler.ServeHTTP(w, r)
		case VMServiceUpdateVMProcedure:
			vMServiceUpdateVMHandler.ServeHTTP(w, r)
		case VMServiceAddDiskProcedure:
			vMServiceAddDiskHandler.ServeHTTP(w, r)
		case VMServiceGetDiskProcedure:
			vMServiceGetDiskHandler.ServeHTTP(w, r)
		case VMServiceListDisksProcedure:
			vMServiceListDisksHandler.ServeHTTP(w, r)
		case VMServiceRemoveDiskProcedure:
			vMServiceRemoveDiskHandler.ServeHTTP(w, r)
		case VMServiceResizeDiskProcedure:
			vMServiceResizeDiskHandler.ServeHTTP(w, r)
		case VMServiceAddNetworkInterfaceProcedure:
			vMServiceAddNetworkInterfaceHandler.ServeHTTP(w, r)
		case VMServiceGetNetworkInterfaceProcedure:
			vMServiceGetNetworkInterfaceHandler.ServeHTTP(w, r)
		case VMServiceListNetworkInterfacesProcedure:
			vMServiceListNetworkInterfacesHandler.ServeHTTP(w, r)
		case VMServiceRemoveNetworkInterfaceProcedure:
			vMServiceRemoveNetworkInterfaceHandler.ServeHTTP(w, r)
		case VMServiceUpdateNetworkInterfaceProcedure:
			vMServiceUpdateNetworkInterfaceHandler.ServeHTTP(w, r)
		case VMServiceAddHardwareDeviceProcedure:
			vMServiceAddHardwareDeviceHandler.ServeHTTP(w, r)
		case VMServiceGetHardwareDeviceProcedure:
			vMServiceGetHardwareDeviceHandler.ServeHTTP(w, r)
		case VMServiceListHardwareDevicesProcedure:
			vMServiceListHardwareDevicesHandler.ServeHTTP(w, r)
		case VMServiceRemoveHardwareDeviceProcedure:
			vMServiceRemoveHardwareDeviceHandler.ServeHTTP(w, r)
		case VMServiceUpdateHardwareDeviceProcedure:
			vMServiceUpdateHardwareDeviceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVMServiceHandler struct{}

func (UnimplementedVMServiceHandler) CreateVM(context.Context, *connect.Request[v1.CreateVMRequest]) (*connect.Response[v1.VM], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.CreateVM is not implemented"))
}

func (UnimplementedVMServiceHandler) GetVM(context.Context, *connect.Request[v1.GetVMRequest]) (*connect.Response[v1.VM], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.GetVM is not implemented"))
}

func (UnimplementedVMServiceHandler) ListVMs(context.Context, *connect.Request[v1.ListVMsRequest]) (*connect.Response[v1.ListVMsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.ListVMs is not implemented"))
}

func (UnimplementedVMServiceHandler) StartVM(context.Context, *connect.Request[v1.StartVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.StartVM is not implemented"))
}

func (UnimplementedVMServiceHandler) StopVM(context.Context, *connect.Request[v1.StopVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.StopVM is not implemented"))
}

func (UnimplementedVMServiceHandler) RebootVM(context.Context, *connect.Request[v1.RebootVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.RebootVM is not implemented"))
}

func (UnimplementedVMServiceHandler) SuspendVM(context.Context, *connect.Request[v1.SuspendVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.SuspendVM is not implemented"))
}

func (UnimplementedVMServiceHandler) ResumeVM(context.Context, *connect.Request[v1.ResumeVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.ResumeVM is not implemented"))
}

func (UnimplementedVMServiceHandler) ShutdownVM(context.Context, *connect.Request[v1.ShutdownVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.ShutdownVM is not implemented"))
}

func (UnimplementedVMServiceHandler) DeleteVM(context.Context, *connect.Request[v1.DeleteVMRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.DeleteVM is not implemented"))
}

func (UnimplementedVMServiceHandler) UpdateVM(context.Context, *connect.Request[v1.UpdateVMRequest]) (*connect.Response[v1.VM], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.UpdateVM is not implemented"))
}

func (UnimplementedVMServiceHandler) AddDisk(context.Context, *connect.Request[v1.AddDiskRequest]) (*connect.Response[v1.Disk], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.AddDisk is not implemented"))
}

func (UnimplementedVMServiceHandler) GetDisk(context.Context, *connect.Request[v1.GetDiskRequest]) (*connect.Response[v1.Disk], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.GetDisk is not implemented"))
}

func (UnimplementedVMServiceHandler) ListDisks(context.Context, *connect.Request[v1.ListDisksRequest]) (*connect.Response[v1.ListDisksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.ListDisks is not implemented"))
}

func (UnimplementedVMServiceHandler) RemoveDisk(context.Context, *connect.Request[v1.RemoveDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.RemoveDisk is not implemented"))
}

func (UnimplementedVMServiceHandler) ResizeDisk(context.Context, *connect.Request[v1.ResizeDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.ResizeDisk is not implemented"))
}

func (UnimplementedVMServiceHandler) AddNetworkInterface(context.Context, *connect.Request[v1.AddNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.AddNetworkInterface is not implemented"))
}

func (UnimplementedVMServiceHandler) GetNetworkInterface(context.Context, *connect.Request[v1.GetNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.GetNetworkInterface is not implemented"))
}

func (UnimplementedVMServiceHandler) ListNetworkInterfaces(context.Context, *connect.Request[v1.ListNetworkInterfacesRequest]) (*connect.Response[v1.ListNetworkInterfacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.ListNetworkInterfaces is not implemented"))
}

func (UnimplementedVMServiceHandler) RemoveNetworkInterface(context.Context, *connect.Request[v1.RemoveNetworkInterfaceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.RemoveNetworkInterface is not implemented"))
}

func (UnimplementedVMServiceHandler) UpdateNetworkInterface(context.Context, *connect.Request[v1.UpdateNetworkInterfaceRequest]) (*connect.Response[v1.NetworkInterface], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.UpdateNetworkInterface is not implemented"))
}

func (UnimplementedVMServiceHandler) AddHardwareDevice(context.Context, *connect.Request[v1.AddHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.AddHardwareDevice is not implemented"))
}

func (UnimplementedVMServiceHandler) GetHardwareDevice(context.Context, *connect.Request[v1.GetHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.GetHardwareDevice is not implemented"))
}

func (UnimplementedVMServiceHandler) ListHardwareDevices(context.Context, *connect.Request[v1.ListHardwareDevicesRequest]) (*connect.Response[v1.ListHardwareDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.ListHardwareDevices is not implemented"))
}

func (UnimplementedVMServiceHandler) RemoveHardwareDevice(context.Context, *connect.Request[v1.RemoveHardwareDeviceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.RemoveHardwareDevice is not implemented"))
}

func (UnimplementedVMServiceHandler) UpdateHardwareDevice(context.Context, *connect.Request[v1.UpdateHardwareDeviceRequest]) (*connect.Response[v1.HardwareDevice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.vmmanager.v1.VMService.UpdateHardwareDevice is not implemented"))
}
