// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/cloud/director/v1/clouddirector.proto

package directorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudDirectorService_RegisterAgent_FullMethodName = "/pilab.cloud.director.v1.CloudDirectorService/RegisterAgent"
	CloudDirectorService_AgentEvents_FullMethodName   = "/pilab.cloud.director.v1.CloudDirectorService/AgentEvents"
)

// CloudDirectorServiceClient is the client API for CloudDirectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CloudDirectorService is the service that provides the ability to manage virtual Vms.
type CloudDirectorServiceClient interface {
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	AgentEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentEventsRequest, ManagerMessage], error)
}

type cloudDirectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudDirectorServiceClient(cc grpc.ClientConnInterface) CloudDirectorServiceClient {
	return &cloudDirectorServiceClient{cc}
}

func (c *cloudDirectorServiceClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, CloudDirectorService_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDirectorServiceClient) AgentEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentEventsRequest, ManagerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDirectorService_ServiceDesc.Streams[0], CloudDirectorService_AgentEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentEventsRequest, ManagerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDirectorService_AgentEventsClient = grpc.BidiStreamingClient[AgentEventsRequest, ManagerMessage]

// CloudDirectorServiceServer is the server API for CloudDirectorService service.
// All implementations must embed UnimplementedCloudDirectorServiceServer
// for forward compatibility.
//
// CloudDirectorService is the service that provides the ability to manage virtual Vms.
type CloudDirectorServiceServer interface {
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	AgentEvents(grpc.BidiStreamingServer[AgentEventsRequest, ManagerMessage]) error
	mustEmbedUnimplementedCloudDirectorServiceServer()
}

// UnimplementedCloudDirectorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudDirectorServiceServer struct{}

func (UnimplementedCloudDirectorServiceServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedCloudDirectorServiceServer) AgentEvents(grpc.BidiStreamingServer[AgentEventsRequest, ManagerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method AgentEvents not implemented")
}
func (UnimplementedCloudDirectorServiceServer) mustEmbedUnimplementedCloudDirectorServiceServer() {}
func (UnimplementedCloudDirectorServiceServer) testEmbeddedByValue()                              {}

// UnsafeCloudDirectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudDirectorServiceServer will
// result in compilation errors.
type UnsafeCloudDirectorServiceServer interface {
	mustEmbedUnimplementedCloudDirectorServiceServer()
}

func RegisterCloudDirectorServiceServer(s grpc.ServiceRegistrar, srv CloudDirectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCloudDirectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudDirectorService_ServiceDesc, srv)
}

func _CloudDirectorService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDirectorServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDirectorService_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDirectorServiceServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDirectorService_AgentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudDirectorServiceServer).AgentEvents(&grpc.GenericServerStream[AgentEventsRequest, ManagerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDirectorService_AgentEventsServer = grpc.BidiStreamingServer[AgentEventsRequest, ManagerMessage]

// CloudDirectorService_ServiceDesc is the grpc.ServiceDesc for CloudDirectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudDirectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.cloud.director.v1.CloudDirectorService",
	HandlerType: (*CloudDirectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _CloudDirectorService_RegisterAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentEvents",
			Handler:       _CloudDirectorService_AgentEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pilab/cloud/director/v1/clouddirector.proto",
}
