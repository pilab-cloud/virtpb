// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/director/v1/jobservice.proto

package directorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/director/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "pilab.cloud.director.v1.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceUpdateJobProcedure is the fully-qualified name of the JobService's UpdateJob RPC.
	JobServiceUpdateJobProcedure = "/pilab.cloud.director.v1.JobService/UpdateJob"
	// JobServiceSubscribeProcedure is the fully-qualified name of the JobService's Subscribe RPC.
	JobServiceSubscribeProcedure = "/pilab.cloud.director.v1.JobService/Subscribe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	jobServiceServiceDescriptor         = v1.File_pilab_cloud_director_v1_jobservice_proto.Services().ByName("JobService")
	jobServiceUpdateJobMethodDescriptor = jobServiceServiceDescriptor.Methods().ByName("UpdateJob")
	jobServiceSubscribeMethodDescriptor = jobServiceServiceDescriptor.Methods().ByName("Subscribe")
)

// JobServiceClient is a client for the pilab.cloud.director.v1.JobService service.
type JobServiceClient interface {
	UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error)
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.SubscribeResponse], error)
}

// NewJobServiceClient constructs a client for the pilab.cloud.director.v1.JobService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jobServiceClient{
		updateJob: connect.NewClient[v1.UpdateJobRequest, v1.UpdateJobResponse](
			httpClient,
			baseURL+JobServiceUpdateJobProcedure,
			connect.WithSchema(jobServiceUpdateJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v1.SubscribeRequest, v1.SubscribeResponse](
			httpClient,
			baseURL+JobServiceSubscribeProcedure,
			connect.WithSchema(jobServiceSubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	updateJob *connect.Client[v1.UpdateJobRequest, v1.UpdateJobResponse]
	subscribe *connect.Client[v1.SubscribeRequest, v1.SubscribeResponse]
}

// UpdateJob calls pilab.cloud.director.v1.JobService.UpdateJob.
func (c *jobServiceClient) UpdateJob(ctx context.Context, req *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error) {
	return c.updateJob.CallUnary(ctx, req)
}

// Subscribe calls pilab.cloud.director.v1.JobService.Subscribe.
func (c *jobServiceClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.SubscribeResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// JobServiceHandler is an implementation of the pilab.cloud.director.v1.JobService service.
type JobServiceHandler interface {
	UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error)
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.SubscribeResponse]) error
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jobServiceUpdateJobHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobProcedure,
		svc.UpdateJob,
		connect.WithSchema(jobServiceUpdateJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceSubscribeHandler := connect.NewServerStreamHandler(
		JobServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(jobServiceSubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.director.v1.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceUpdateJobProcedure:
			jobServiceUpdateJobHandler.ServeHTTP(w, r)
		case JobServiceSubscribeProcedure:
			jobServiceSubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.JobService.UpdateJob is not implemented"))
}

func (UnimplementedJobServiceHandler) Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.SubscribeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.JobService.Subscribe is not implemented"))
}
