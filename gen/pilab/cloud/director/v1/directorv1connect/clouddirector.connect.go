// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pilab/cloud/director/v1/clouddirector.proto

package directorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.pilab.hu/cloud/virtpb/gen/pilab/cloud/director/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CloudDirectorServiceName is the fully-qualified name of the CloudDirectorService service.
	CloudDirectorServiceName = "pilab.cloud.director.v1.CloudDirectorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CloudDirectorServiceRegisterAgentProcedure is the fully-qualified name of the
	// CloudDirectorService's RegisterAgent RPC.
	CloudDirectorServiceRegisterAgentProcedure = "/pilab.cloud.director.v1.CloudDirectorService/RegisterAgent"
	// CloudDirectorServiceAgentEventsProcedure is the fully-qualified name of the
	// CloudDirectorService's AgentEvents RPC.
	CloudDirectorServiceAgentEventsProcedure = "/pilab.cloud.director.v1.CloudDirectorService/AgentEvents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cloudDirectorServiceServiceDescriptor             = v1.File_pilab_cloud_director_v1_clouddirector_proto.Services().ByName("CloudDirectorService")
	cloudDirectorServiceRegisterAgentMethodDescriptor = cloudDirectorServiceServiceDescriptor.Methods().ByName("RegisterAgent")
	cloudDirectorServiceAgentEventsMethodDescriptor   = cloudDirectorServiceServiceDescriptor.Methods().ByName("AgentEvents")
)

// CloudDirectorServiceClient is a client for the pilab.cloud.director.v1.CloudDirectorService
// service.
type CloudDirectorServiceClient interface {
	RegisterAgent(context.Context, *connect.Request[v1.RegisterAgentRequest]) (*connect.Response[v1.RegisterAgentResponse], error)
	AgentEvents(context.Context) *connect.BidiStreamForClient[v1.AgentEventsRequest, v1.ManagerMessage]
}

// NewCloudDirectorServiceClient constructs a client for the
// pilab.cloud.director.v1.CloudDirectorService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCloudDirectorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CloudDirectorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cloudDirectorServiceClient{
		registerAgent: connect.NewClient[v1.RegisterAgentRequest, v1.RegisterAgentResponse](
			httpClient,
			baseURL+CloudDirectorServiceRegisterAgentProcedure,
			connect.WithSchema(cloudDirectorServiceRegisterAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		agentEvents: connect.NewClient[v1.AgentEventsRequest, v1.ManagerMessage](
			httpClient,
			baseURL+CloudDirectorServiceAgentEventsProcedure,
			connect.WithSchema(cloudDirectorServiceAgentEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cloudDirectorServiceClient implements CloudDirectorServiceClient.
type cloudDirectorServiceClient struct {
	registerAgent *connect.Client[v1.RegisterAgentRequest, v1.RegisterAgentResponse]
	agentEvents   *connect.Client[v1.AgentEventsRequest, v1.ManagerMessage]
}

// RegisterAgent calls pilab.cloud.director.v1.CloudDirectorService.RegisterAgent.
func (c *cloudDirectorServiceClient) RegisterAgent(ctx context.Context, req *connect.Request[v1.RegisterAgentRequest]) (*connect.Response[v1.RegisterAgentResponse], error) {
	return c.registerAgent.CallUnary(ctx, req)
}

// AgentEvents calls pilab.cloud.director.v1.CloudDirectorService.AgentEvents.
func (c *cloudDirectorServiceClient) AgentEvents(ctx context.Context) *connect.BidiStreamForClient[v1.AgentEventsRequest, v1.ManagerMessage] {
	return c.agentEvents.CallBidiStream(ctx)
}

// CloudDirectorServiceHandler is an implementation of the
// pilab.cloud.director.v1.CloudDirectorService service.
type CloudDirectorServiceHandler interface {
	RegisterAgent(context.Context, *connect.Request[v1.RegisterAgentRequest]) (*connect.Response[v1.RegisterAgentResponse], error)
	AgentEvents(context.Context, *connect.BidiStream[v1.AgentEventsRequest, v1.ManagerMessage]) error
}

// NewCloudDirectorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCloudDirectorServiceHandler(svc CloudDirectorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cloudDirectorServiceRegisterAgentHandler := connect.NewUnaryHandler(
		CloudDirectorServiceRegisterAgentProcedure,
		svc.RegisterAgent,
		connect.WithSchema(cloudDirectorServiceRegisterAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cloudDirectorServiceAgentEventsHandler := connect.NewBidiStreamHandler(
		CloudDirectorServiceAgentEventsProcedure,
		svc.AgentEvents,
		connect.WithSchema(cloudDirectorServiceAgentEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pilab.cloud.director.v1.CloudDirectorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CloudDirectorServiceRegisterAgentProcedure:
			cloudDirectorServiceRegisterAgentHandler.ServeHTTP(w, r)
		case CloudDirectorServiceAgentEventsProcedure:
			cloudDirectorServiceAgentEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCloudDirectorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCloudDirectorServiceHandler struct{}

func (UnimplementedCloudDirectorServiceHandler) RegisterAgent(context.Context, *connect.Request[v1.RegisterAgentRequest]) (*connect.Response[v1.RegisterAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.CloudDirectorService.RegisterAgent is not implemented"))
}

func (UnimplementedCloudDirectorServiceHandler) AgentEvents(context.Context, *connect.BidiStream[v1.AgentEventsRequest, v1.ManagerMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("pilab.cloud.director.v1.CloudDirectorService.AgentEvents is not implemented"))
}
