// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: pilab/cloud/director/v1/clouddirector.proto

package directorv1

import (
	cloud "go.pilab.hu/cloud/virtpb/gen/pilab/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VmGuestInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of a VM
	VmId string `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// VM Guest Info in JSON format.
	Info          string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VmGuestInfo) Reset() {
	*x = VmGuestInfo{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VmGuestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmGuestInfo) ProtoMessage() {}

func (x *VmGuestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmGuestInfo.ProtoReflect.Descriptor instead.
func (*VmGuestInfo) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{0}
}

func (x *VmGuestInfo) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *VmGuestInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// AgentEventsRequest is the message that is sent from the Host to the director.
type AgentEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*AgentEventsRequest_VmStateEvent
	//	*AgentEventsRequest_Heartbeat
	//	*AgentEventsRequest_VmDefinition
	//	*AgentEventsRequest_HostStats
	//	*AgentEventsRequest_VmMetrics
	//	*AgentEventsRequest_JobStatus
	//	*AgentEventsRequest_VmGuestInfo
	Event         isAgentEventsRequest_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentEventsRequest) Reset() {
	*x = AgentEventsRequest{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentEventsRequest) ProtoMessage() {}

func (x *AgentEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentEventsRequest.ProtoReflect.Descriptor instead.
func (*AgentEventsRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{1}
}

func (x *AgentEventsRequest) GetEvent() isAgentEventsRequest_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AgentEventsRequest) GetVmStateEvent() *VmStateEvent {
	if x != nil {
		if x, ok := x.Event.(*AgentEventsRequest_VmStateEvent); ok {
			return x.VmStateEvent
		}
	}
	return nil
}

func (x *AgentEventsRequest) GetHeartbeat() *HeartbeatEvent {
	if x != nil {
		if x, ok := x.Event.(*AgentEventsRequest_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *AgentEventsRequest) GetVmDefinition() *VmDefinition {
	if x != nil {
		if x, ok := x.Event.(*AgentEventsRequest_VmDefinition); ok {
			return x.VmDefinition
		}
	}
	return nil
}

func (x *AgentEventsRequest) GetHostStats() *cloud.HostStats {
	if x != nil {
		if x, ok := x.Event.(*AgentEventsRequest_HostStats); ok {
			return x.HostStats
		}
	}
	return nil
}

func (x *AgentEventsRequest) GetVmMetrics() *cloud.VmMetrics {
	if x != nil {
		if x, ok := x.Event.(*AgentEventsRequest_VmMetrics); ok {
			return x.VmMetrics
		}
	}
	return nil
}

func (x *AgentEventsRequest) GetJobStatus() *cloud.JobStatus {
	if x != nil {
		if x, ok := x.Event.(*AgentEventsRequest_JobStatus); ok {
			return x.JobStatus
		}
	}
	return nil
}

func (x *AgentEventsRequest) GetVmGuestInfo() *VmGuestInfo {
	if x != nil {
		if x, ok := x.Event.(*AgentEventsRequest_VmGuestInfo); ok {
			return x.VmGuestInfo
		}
	}
	return nil
}

type isAgentEventsRequest_Event interface {
	isAgentEventsRequest_Event()
}

type AgentEventsRequest_VmStateEvent struct {
	VmStateEvent *VmStateEvent `protobuf:"bytes,1,opt,name=vm_state_event,json=vmStateEvent,proto3,oneof"`
}

type AgentEventsRequest_Heartbeat struct {
	Heartbeat *HeartbeatEvent `protobuf:"bytes,2,opt,name=heartbeat,proto3,oneof"`
}

type AgentEventsRequest_VmDefinition struct {
	VmDefinition *VmDefinition `protobuf:"bytes,3,opt,name=vm_definition,json=vmDefinition,proto3,oneof"`
}

type AgentEventsRequest_HostStats struct {
	HostStats *cloud.HostStats `protobuf:"bytes,4,opt,name=host_stats,json=hostStats,proto3,oneof"`
}

type AgentEventsRequest_VmMetrics struct {
	VmMetrics *cloud.VmMetrics `protobuf:"bytes,5,opt,name=vm_metrics,json=vmMetrics,proto3,oneof"`
}

type AgentEventsRequest_JobStatus struct {
	JobStatus *cloud.JobStatus `protobuf:"bytes,6,opt,name=job_status,json=jobStatus,proto3,oneof"`
}

type AgentEventsRequest_VmGuestInfo struct {
	VmGuestInfo *VmGuestInfo `protobuf:"bytes,7,opt,name=vm_guest_info,json=vmGuestInfo,proto3,oneof"`
}

func (*AgentEventsRequest_VmStateEvent) isAgentEventsRequest_Event() {}

func (*AgentEventsRequest_Heartbeat) isAgentEventsRequest_Event() {}

func (*AgentEventsRequest_VmDefinition) isAgentEventsRequest_Event() {}

func (*AgentEventsRequest_HostStats) isAgentEventsRequest_Event() {}

func (*AgentEventsRequest_VmMetrics) isAgentEventsRequest_Event() {}

func (*AgentEventsRequest_JobStatus) isAgentEventsRequest_Event() {}

func (*AgentEventsRequest_VmGuestInfo) isAgentEventsRequest_Event() {}

// HeartbeatEvent is the message that is sent from the
// Host to the director to indicate that the Host is still alive.
type HeartbeatEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	ElapsedTime   uint32                 `protobuf:"varint,2,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatEvent) Reset() {
	*x = HeartbeatEvent{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatEvent) ProtoMessage() {}

func (x *HeartbeatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatEvent.ProtoReflect.Descriptor instead.
func (*HeartbeatEvent) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{2}
}

func (x *HeartbeatEvent) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *HeartbeatEvent) GetElapsedTime() uint32 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

// VmDefinition is the message that is sent from the director to the Host.
// The message contains the domain XML of the vm, the UUID of the vm,
// the state of the vm, the Host ID, and the name of the vm.
type VmDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DomainXml     string                 `protobuf:"bytes,1,opt,name=domain_xml,json=domainXml,proto3" json:"domain_xml,omitempty"`
	DomainUuid    string                 `protobuf:"bytes,2,opt,name=domain_uuid,json=domainUuid,proto3" json:"domain_uuid,omitempty"`
	State         uint32                 `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VmDefinition) Reset() {
	*x = VmDefinition{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VmDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmDefinition) ProtoMessage() {}

func (x *VmDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmDefinition.ProtoReflect.Descriptor instead.
func (*VmDefinition) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{3}
}

func (x *VmDefinition) GetDomainXml() string {
	if x != nil {
		return x.DomainXml
	}
	return ""
}

func (x *VmDefinition) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *VmDefinition) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *VmDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// VmStateEvent is the message that is sent from the Host to the director.
type VmStateEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	VmName        string                 `protobuf:"bytes,2,opt,name=vm_name,json=vmName,proto3" json:"vm_name,omitempty"`
	Event         string                 `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Detail        string                 `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VmStateEvent) Reset() {
	*x = VmStateEvent{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VmStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmStateEvent) ProtoMessage() {}

func (x *VmStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmStateEvent.ProtoReflect.Descriptor instead.
func (*VmStateEvent) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{4}
}

func (x *VmStateEvent) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *VmStateEvent) GetVmName() string {
	if x != nil {
		return x.VmName
	}
	return ""
}

func (x *VmStateEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *VmStateEvent) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type DiskStateEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Event         string                 `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskStateEvent) Reset() {
	*x = DiskStateEvent{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskStateEvent) ProtoMessage() {}

func (x *DiskStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskStateEvent.ProtoReflect.Descriptor instead.
func (*DiskStateEvent) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{5}
}

func (x *DiskStateEvent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DiskStateEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

type ManagerMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*ManagerMessage_ResourceRefreshRequest
	Message       isManagerMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagerMessage) Reset() {
	*x = ManagerMessage{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerMessage) ProtoMessage() {}

func (x *ManagerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerMessage.ProtoReflect.Descriptor instead.
func (*ManagerMessage) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{6}
}

func (x *ManagerMessage) GetMessage() isManagerMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ManagerMessage) GetResourceRefreshRequest() *ResourceRefreshRequest {
	if x != nil {
		if x, ok := x.Message.(*ManagerMessage_ResourceRefreshRequest); ok {
			return x.ResourceRefreshRequest
		}
	}
	return nil
}

type isManagerMessage_Message interface {
	isManagerMessage_Message()
}

type ManagerMessage_ResourceRefreshRequest struct {
	ResourceRefreshRequest *ResourceRefreshRequest `protobuf:"bytes,2,opt,name=resource_refresh_request,json=resourceRefreshRequest,proto3,oneof"`
}

func (*ManagerMessage_ResourceRefreshRequest) isManagerMessage_Message() {}

type ResourceRefreshRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceRefreshRequest) Reset() {
	*x = ResourceRefreshRequest{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceRefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRefreshRequest) ProtoMessage() {}

func (x *ResourceRefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRefreshRequest.ProtoReflect.Descriptor instead.
func (*ResourceRefreshRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{7}
}

type RegisterAgentRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Hostname             string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	AgentVersion         string                 `protobuf:"bytes,2,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	CoresCount           uint32                 `protobuf:"varint,3,opt,name=cores_count,json=coresCount,proto3" json:"cores_count,omitempty"`
	Platform             string                 `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformFamily       string                 `protobuf:"bytes,5,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	Uptime               uint32                 `protobuf:"varint,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
	VirtualizationSystem string                 `protobuf:"bytes,7,opt,name=virtualization_system,json=virtualizationSystem,proto3" json:"virtualization_system,omitempty"`
	VirtualizationRole   string                 `protobuf:"bytes,8,opt,name=virtualization_role,json=virtualizationRole,proto3" json:"virtualization_role,omitempty"`
	KernelVersion        string                 `protobuf:"bytes,10,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	KernelArch           string                 `protobuf:"bytes,11,opt,name=kernel_arch,json=kernelArch,proto3" json:"kernel_arch,omitempty"`
	// string cpu_model = 12;
	CpuVendorId   string   `protobuf:"bytes,13,opt,name=cpu_vendor_id,json=cpuVendorId,proto3" json:"cpu_vendor_id,omitempty"`
	CpuFamily     string   `protobuf:"bytes,14,opt,name=cpu_family,json=cpuFamily,proto3" json:"cpu_family,omitempty"`
	CpuModel      string   `protobuf:"bytes,15,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	CpuModelName  string   `protobuf:"bytes,16,opt,name=cpu_model_name,json=cpuModelName,proto3" json:"cpu_model_name,omitempty"`
	CpuMhz        uint32   `protobuf:"varint,17,opt,name=cpu_mhz,json=cpuMhz,proto3" json:"cpu_mhz,omitempty"`
	CpuCacheSize  uint32   `protobuf:"varint,18,opt,name=cpu_cache_size,json=cpuCacheSize,proto3" json:"cpu_cache_size,omitempty"`
	CpuFlags      []string `protobuf:"bytes,19,rep,name=cpu_flags,json=cpuFlags,proto3" json:"cpu_flags,omitempty"`
	MemSize       uint64   `protobuf:"varint,20,opt,name=mem_size,json=memSize,proto3" json:"mem_size,omitempty"`
	HostState     string   `protobuf:"bytes,9999,opt,name=host_state,json=hostState,proto3" json:"host_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAgentRequest) Reset() {
	*x = RegisterAgentRequest{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAgentRequest) ProtoMessage() {}

func (x *RegisterAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAgentRequest.ProtoReflect.Descriptor instead.
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterAgentRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegisterAgentRequest) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *RegisterAgentRequest) GetCoresCount() uint32 {
	if x != nil {
		return x.CoresCount
	}
	return 0
}

func (x *RegisterAgentRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RegisterAgentRequest) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *RegisterAgentRequest) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *RegisterAgentRequest) GetVirtualizationSystem() string {
	if x != nil {
		return x.VirtualizationSystem
	}
	return ""
}

func (x *RegisterAgentRequest) GetVirtualizationRole() string {
	if x != nil {
		return x.VirtualizationRole
	}
	return ""
}

func (x *RegisterAgentRequest) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *RegisterAgentRequest) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

func (x *RegisterAgentRequest) GetCpuVendorId() string {
	if x != nil {
		return x.CpuVendorId
	}
	return ""
}

func (x *RegisterAgentRequest) GetCpuFamily() string {
	if x != nil {
		return x.CpuFamily
	}
	return ""
}

func (x *RegisterAgentRequest) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *RegisterAgentRequest) GetCpuModelName() string {
	if x != nil {
		return x.CpuModelName
	}
	return ""
}

func (x *RegisterAgentRequest) GetCpuMhz() uint32 {
	if x != nil {
		return x.CpuMhz
	}
	return 0
}

func (x *RegisterAgentRequest) GetCpuCacheSize() uint32 {
	if x != nil {
		return x.CpuCacheSize
	}
	return 0
}

func (x *RegisterAgentRequest) GetCpuFlags() []string {
	if x != nil {
		return x.CpuFlags
	}
	return nil
}

func (x *RegisterAgentRequest) GetMemSize() uint64 {
	if x != nil {
		return x.MemSize
	}
	return 0
}

func (x *RegisterAgentRequest) GetHostState() string {
	if x != nil {
		return x.HostState
	}
	return ""
}

type RegisterAgentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*RegisterAgentResponse_DirectorWelcome
	//	*RegisterAgentResponse_ErrorReason
	Response      isRegisterAgentResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAgentResponse) Reset() {
	*x = RegisterAgentResponse{}
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAgentResponse) ProtoMessage() {}

func (x *RegisterAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAgentResponse.ProtoReflect.Descriptor instead.
func (*RegisterAgentResponse) Descriptor() ([]byte, []int) {
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterAgentResponse) GetResponse() isRegisterAgentResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RegisterAgentResponse) GetDirectorWelcome() string {
	if x != nil {
		if x, ok := x.Response.(*RegisterAgentResponse_DirectorWelcome); ok {
			return x.DirectorWelcome
		}
	}
	return ""
}

func (x *RegisterAgentResponse) GetErrorReason() string {
	if x != nil {
		if x, ok := x.Response.(*RegisterAgentResponse_ErrorReason); ok {
			return x.ErrorReason
		}
	}
	return ""
}

type isRegisterAgentResponse_Response interface {
	isRegisterAgentResponse_Response()
}

type RegisterAgentResponse_DirectorWelcome struct {
	DirectorWelcome string `protobuf:"bytes,1,opt,name=director_welcome,json=directorWelcome,proto3,oneof"`
}

type RegisterAgentResponse_ErrorReason struct {
	ErrorReason string `protobuf:"bytes,2,opt,name=error_reason,json=errorReason,proto3,oneof"`
}

func (*RegisterAgentResponse_DirectorWelcome) isRegisterAgentResponse_Response() {}

func (*RegisterAgentResponse_ErrorReason) isRegisterAgentResponse_Response() {}

var File_pilab_cloud_director_v1_clouddirector_proto protoreflect.FileDescriptor

var file_pilab_cloud_director_v1_clouddirector_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x36, 0x0a, 0x0b, 0x56, 0x6d, 0x47, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x76, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xfa, 0x03, 0x0a, 0x12, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x0e, 0x76, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x76, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x76, 0x6d, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37,
	0x0a, 0x0a, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x56, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4a, 0x0a, 0x0d, 0x76, 0x6d, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6d, 0x47, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0b, 0x76, 0x6d, 0x47, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x0c, 0x56, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x78, 0x6d,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x58,
	0x6d, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a,
	0x0c, 0x56, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x0a, 0x0e, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa0, 0x05, 0x0a, 0x14, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x70, 0x75, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x68,
	0x7a, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x70, 0x75, 0x4d, 0x68, 0x7a, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x75, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8f, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a,
	0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x57, 0x65, 0x6c, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xef, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a,
	0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x6f, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x68, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x69, 0x72, 0x74,
	0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_pilab_cloud_director_v1_clouddirector_proto_rawDescOnce sync.Once
	file_pilab_cloud_director_v1_clouddirector_proto_rawDescData []byte
)

func file_pilab_cloud_director_v1_clouddirector_proto_rawDescGZIP() []byte {
	file_pilab_cloud_director_v1_clouddirector_proto_rawDescOnce.Do(func() {
		file_pilab_cloud_director_v1_clouddirector_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pilab_cloud_director_v1_clouddirector_proto_rawDesc), len(file_pilab_cloud_director_v1_clouddirector_proto_rawDesc)))
	})
	return file_pilab_cloud_director_v1_clouddirector_proto_rawDescData
}

var file_pilab_cloud_director_v1_clouddirector_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pilab_cloud_director_v1_clouddirector_proto_goTypes = []any{
	(*VmGuestInfo)(nil),            // 0: pilab.cloud.director.v1.VmGuestInfo
	(*AgentEventsRequest)(nil),     // 1: pilab.cloud.director.v1.AgentEventsRequest
	(*HeartbeatEvent)(nil),         // 2: pilab.cloud.director.v1.HeartbeatEvent
	(*VmDefinition)(nil),           // 3: pilab.cloud.director.v1.VmDefinition
	(*VmStateEvent)(nil),           // 4: pilab.cloud.director.v1.VmStateEvent
	(*DiskStateEvent)(nil),         // 5: pilab.cloud.director.v1.DiskStateEvent
	(*ManagerMessage)(nil),         // 6: pilab.cloud.director.v1.ManagerMessage
	(*ResourceRefreshRequest)(nil), // 7: pilab.cloud.director.v1.ResourceRefreshRequest
	(*RegisterAgentRequest)(nil),   // 8: pilab.cloud.director.v1.RegisterAgentRequest
	(*RegisterAgentResponse)(nil),  // 9: pilab.cloud.director.v1.RegisterAgentResponse
	(*cloud.HostStats)(nil),        // 10: pilab.cloud.HostStats
	(*cloud.VmMetrics)(nil),        // 11: pilab.cloud.VmMetrics
	(*cloud.JobStatus)(nil),        // 12: pilab.cloud.JobStatus
}
var file_pilab_cloud_director_v1_clouddirector_proto_depIdxs = []int32{
	4,  // 0: pilab.cloud.director.v1.AgentEventsRequest.vm_state_event:type_name -> pilab.cloud.director.v1.VmStateEvent
	2,  // 1: pilab.cloud.director.v1.AgentEventsRequest.heartbeat:type_name -> pilab.cloud.director.v1.HeartbeatEvent
	3,  // 2: pilab.cloud.director.v1.AgentEventsRequest.vm_definition:type_name -> pilab.cloud.director.v1.VmDefinition
	10, // 3: pilab.cloud.director.v1.AgentEventsRequest.host_stats:type_name -> pilab.cloud.HostStats
	11, // 4: pilab.cloud.director.v1.AgentEventsRequest.vm_metrics:type_name -> pilab.cloud.VmMetrics
	12, // 5: pilab.cloud.director.v1.AgentEventsRequest.job_status:type_name -> pilab.cloud.JobStatus
	0,  // 6: pilab.cloud.director.v1.AgentEventsRequest.vm_guest_info:type_name -> pilab.cloud.director.v1.VmGuestInfo
	7,  // 7: pilab.cloud.director.v1.ManagerMessage.resource_refresh_request:type_name -> pilab.cloud.director.v1.ResourceRefreshRequest
	8,  // 8: pilab.cloud.director.v1.CloudDirectorService.RegisterAgent:input_type -> pilab.cloud.director.v1.RegisterAgentRequest
	1,  // 9: pilab.cloud.director.v1.CloudDirectorService.AgentEvents:input_type -> pilab.cloud.director.v1.AgentEventsRequest
	9,  // 10: pilab.cloud.director.v1.CloudDirectorService.RegisterAgent:output_type -> pilab.cloud.director.v1.RegisterAgentResponse
	6,  // 11: pilab.cloud.director.v1.CloudDirectorService.AgentEvents:output_type -> pilab.cloud.director.v1.ManagerMessage
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_pilab_cloud_director_v1_clouddirector_proto_init() }
func file_pilab_cloud_director_v1_clouddirector_proto_init() {
	if File_pilab_cloud_director_v1_clouddirector_proto != nil {
		return
	}
	file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[1].OneofWrappers = []any{
		(*AgentEventsRequest_VmStateEvent)(nil),
		(*AgentEventsRequest_Heartbeat)(nil),
		(*AgentEventsRequest_VmDefinition)(nil),
		(*AgentEventsRequest_HostStats)(nil),
		(*AgentEventsRequest_VmMetrics)(nil),
		(*AgentEventsRequest_JobStatus)(nil),
		(*AgentEventsRequest_VmGuestInfo)(nil),
	}
	file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[6].OneofWrappers = []any{
		(*ManagerMessage_ResourceRefreshRequest)(nil),
	}
	file_pilab_cloud_director_v1_clouddirector_proto_msgTypes[9].OneofWrappers = []any{
		(*RegisterAgentResponse_DirectorWelcome)(nil),
		(*RegisterAgentResponse_ErrorReason)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pilab_cloud_director_v1_clouddirector_proto_rawDesc), len(file_pilab_cloud_director_v1_clouddirector_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilab_cloud_director_v1_clouddirector_proto_goTypes,
		DependencyIndexes: file_pilab_cloud_director_v1_clouddirector_proto_depIdxs,
		MessageInfos:      file_pilab_cloud_director_v1_clouddirector_proto_msgTypes,
	}.Build()
	File_pilab_cloud_director_v1_clouddirector_proto = out.File
	file_pilab_cloud_director_v1_clouddirector_proto_goTypes = nil
	file_pilab_cloud_director_v1_clouddirector_proto_depIdxs = nil
}
